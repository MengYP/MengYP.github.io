<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孟跃平的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengyueping.com/"/>
  <updated>2017-08-27T13:59:48.000Z</updated>
  <id>http://mengyueping.com/</id>
  
  <author>
    <name>孟跃平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS的Runloop</title>
    <link href="http://mengyueping.com/2017/08/27/iOS-runloop/"/>
    <id>http://mengyueping.com/2017/08/27/iOS-runloop/</id>
    <published>2017-08-26T16:00:00.000Z</published>
    <updated>2017-08-27T13:59:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="runloop"><a href="#runloop" class="headerlink" title="runloop"></a>runloop</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>程序启动过程？</li>
<li>创建定时器的方法？在主线程创建定时器？在子线程创建定时器？添加定时器到运行循环，不同模式的区别？</li>
<li>使用<code>GCD</code>创建定时器？</li>
<li>子线程创建的定时器，为什么需要开启一个子线程的<code>RunLoop</code>？</li>
<li><code>RunLoop</code>作用？主线程能不能被销毁，销毁后会程序会怎样？</li>
</ul>
<a id="more"></a>
<h1 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h1><p>程序启动：<code>打开程序</code> -&gt; <code>执行main函数</code> -&gt; <code>执行UIApplicationMain函数</code> -&gt; <code>初始化UIApplication（创建和设置代理对象，开启事件循环）</code> -&gt; <code>监听系统事件</code>。 </p>
<blockquote>
<p>1、<code>main</code>函数<br>2、<code>UIApplicationMain</code></p>
<blockquote>
<p>2.1 创建<code>UIApplication</code>对象</p>
<p>2.2 创建<code>UIApplication</code>的<code>delegate</code>对象 (没有<code>storyboard</code>)</p>
</blockquote>
<p>3、<code>delegate</code>对象开始处理（监听）系统事件(有<code>storyboard</code>)</p>
<blockquote>
<p>3.1 程序启动完毕的时候，就会调用代理的 <code>application:didFinishLaunchingWithOptions:</code>方法</p>
<p>3.2 创建和设置<code>UIWindow</code>的<code>rootViewController</code></p>
<p>3.3 显示窗口</p>
</blockquote>
<p>3.根据<code>Info.plist</code>获得最主要<code>storyboard</code>的文件名,加载最主要的<code>storyboard</code>(有<code>storyboard</code>)</p>
<blockquote>
<p>3.1 创建<code>UIWindow</code></p>
<p>3.2 创建和设置<code>UIWindow</code>的<code>rootViewController</code></p>
<p>3.3 显示窗口</p>
</blockquote>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If nil is specified for principalClassName, the value for NSPrincipalClass from the Info.plist is used. </span></div><div class="line"><span class="comment">//CH: 如果给“principalClassName”参数指定了“nil”，将会从“Info.plist”中加载key为“NSPrincipalClass”所对应的Value。</span></div><div class="line"></div><div class="line"><span class="comment">// If there is no NSPrincipalClass key specified, the UIApplication class is used. </span></div><div class="line"><span class="comment">//CH: 如果“Info.plist”中没有指定“NSPrincipalClass”这个key，那么“UIApplication”类会被使用。</span></div><div class="line"></div><div class="line"><span class="comment">// The delegate class will be instantiated using init.</span></div><div class="line"><span class="comment">//CH: 代理类将使用“init”来实例化。</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="keyword">int</span> <span class="built_in">UIApplicationMain</span>(<span class="keyword">int</span> argc, <span class="keyword">char</span> * _Nonnull * _Null_unspecified argv, <span class="built_in">NSString</span> * _Nullable principalClassName, <span class="built_in">NSString</span> * _Nullable delegateClassName);</div></pre></td></tr></table></figure>
<p>通常创建项目主运行循环代码：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div></pre></td></tr></table></figure></p>
<p>可以相当于:<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把 nil 替换为 @"UIApplication"</span></div><div class="line"><span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="string">@"UIApplication"</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div></pre></td></tr></table></figure></p>
<p>参数<code>principalClassName</code>是<code>APP</code>的单例对象，也可以是自定义<code>UIApplication</code>的子类，可以拦截<code>UIApplication</code>的一些事件。</p>
<p>通过下面代码可以证明<code>UIApplicationMain</code>函数是一个死循环。<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 死循环</span></div><div class="line"><span class="comment">// --- Runloop 主线程</span></div><div class="line"><span class="keyword">int</span> m = <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="string">@"UIApplication"</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---UIApplicationMain--不会执行---"</span>); <span class="comment">// 上面代码是死循环，所以下面代码都不会执行。</span></div><div class="line"><span class="keyword">return</span> m;</div></pre></td></tr></table></figure></p>
<h1 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h1><h2 id="主线程创建定时器"><a href="#主线程创建定时器" class="headerlink" title="主线程创建定时器"></a>主线程创建定时器</h2><p>方式一：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建定时器，并把定时器添加到主运行循环。</span></div><div class="line">[<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerStart) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerStart) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line"><span class="comment">// 把定时器对象添加到默认运行循环，即主运行循环。</span></div><div class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line"><span class="comment">// [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span></div><div class="line"><span class="comment">// [[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>添加到 NSRunLoop 的三种模式：</p>
<p><code>NSDefaultRunLoopMode</code>： 默认模式，苹果建议放时钟，网络事件。</p>
<p><code>UITrackingRunLoopMode</code>： UI模式，只有被触摸事件所唤醒。</p>
<p><code>NSRunLoopCommonModes</code>： 并不是一个真正的<code>Runloop</code>的模式，而是一个占位模式。<br>在<code>NSDefaultRunLoopMode</code>和<code>UITrackingRunLoopMode</code>模式中都会占位，即在这两种模式中都会添加事件。</p>
</blockquote>
<p>在<code>UITrackingRunLoopMode</code>模式下，使用计时器方法回调中的耗时操作，会造成<code>UI</code>界面操作卡顿现象，对用户体验不好，所以默认使用方法一开启定时器，是在<code>NSDefaultRunLoopMode</code>模式下。例如：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerStart) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">UITrackingRunLoopMode</span>];</div></pre></td></tr></table></figure></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 耗时操作</span></div><div class="line">- (<span class="keyword">void</span>)timerStart &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---timerStart--"</span>);</div><div class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1.0</span>]; <span class="comment">// 耗时操作</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---耗时操作--"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="子线程创建定时器"><a href="#子线程创建定时器" class="headerlink" title="子线程创建定时器"></a>子线程创建定时器</h2><p>创建一个<code>NSThread</code>的子类<code>Thread</code>，并重写<code>-dealloc</code>方法：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Thread</span> : <span class="title">NSThread</span></span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)dealloc</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--Thread--dealloc---"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建<code>Thread</code>对象，并使用一个全局对象对其进行强引用，开启一条子线程：<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Thread *thread;</div></pre></td></tr></table></figure></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启一条子线程</span></div><div class="line">_thread = [[Thread alloc] initWithBlock:^&#123;</div><div class="line">    <span class="comment">//方法一：</span></div><div class="line">   <span class="comment">// [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(timerStartChildThread) userInfo:nil repeats:YES];</span></div><div class="line">    </div><div class="line">    <span class="comment">//方法二：</span></div><div class="line">    <span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerStartChildThread) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">    <span class="comment">// 告诉Runloop</span></div><div class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    </div><div class="line">    <span class="comment">// 运行Runloop</span></div><div class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] run];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--此行代码--执行不到--"</span>); <span class="comment">//前面有死循环，所以不会执行 </span></div><div class="line">&#125;];</div><div class="line">[_thread start]; <span class="comment">// 开启线程</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如何保住一个线程？<br>1、对<code>NSThread</code>对象进行全局变量强引用，只是保证<code>NSThread</code>这个<code>OC</code>对象不会被销毁，并不能保证线程不会被销毁。</p>
<p>2、当一个线程没有任务的时候，这个线程就会销毁。所以要保住一个线程，必须给这个线程做完的事情任务。</p>
<p>3、<code>Runloop</code>就是一个事件监听任务，永远不会停止。<br> 除非主动停止，使用<code>[NSThread exit];</code> 或者<code>[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.001]];</code>。</p>
<p>4、子线程的<code>Runloop</code>默认是关闭的。</p>
<p>主线程和子线程的一些理解：</p>
<p>1、主线程和子线程在本质上没有任何区别。对于操作系统来说，一个<code>App</code>的主线程就是一个子线程。</p>
<p>2、<code>iOS</code>系统对待主线程和子线程是有区别的，渲染<code>UI</code>在主线程上面做。</p>
<p>3、<code>UIKit</code> 框架下的控件，苹果建议都用 <code>nonatomic</code> 非原子性来修饰（不加锁），提升性能。建议：<code>UI</code>操作都在主线程上面执行。</p>
<p>4、主线程是可以被干掉的。使用<code>[NSThread exit];</code>。把主线程干掉后，子线程可以继续运行，<code>App</code>不<code>Crash</code>，只是<code>UI</code>操作全部不会响应。</p>
</blockquote>
<h2 id="GCD创建定时器"><a href="#GCD创建定时器" class="headerlink" title="GCD创建定时器"></a>GCD创建定时器</h2><p><code>GCD</code>创建的定时器，默认会在子线程，会默认开启一个子线程<code>Runloop</code>。<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 强引用</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) dispatch_source_t timer;</div></pre></td></tr></table></figure></p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GCD 并发编程</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">// 创建一个定时器,必须有一个全局的强引用,来保持住timer对象</span></div><div class="line">_timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</div><div class="line"><span class="comment">// 设置timer GCD中时间单位是纳秒。NSEC_PER_SEC 1000000000ull</span></div><div class="line">dispatch_source_set_timer(_timer, DISPATCH_TIME_NOW, <span class="number">1.0</span> * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>);</div><div class="line"><span class="comment">// 设置回调</span></div><div class="line">dispatch_source_set_event_handler(_timer, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--%@--"</span>,[<span class="built_in">NSThread</span> currentThread]); <span class="comment">//子线程</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 启动</span></div><div class="line">dispatch_resume(_timer);</div></pre></td></tr></table></figure>
<h1 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h1><blockquote>
<p>为什么要有<code>RunLoop</code>：<br>1、保证程序不退出。主<code>RunLoop</code>保证主线程不退出，保证主线程存活。<br>2、负责监听事件：触摸事件、时钟事件、网络事件。<br>3、如果没有事件发生，会进入休眠。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;runloop&quot;&gt;&lt;a href=&quot;#runloop&quot; class=&quot;headerlink&quot; title=&quot;runloop&quot;&gt;&lt;/a&gt;runloop&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序启动过程？&lt;/li&gt;
&lt;li&gt;创建定时器的方法？在主线程创建定时器？在子线程创建定时器？添加定时器到运行循环，不同模式的区别？&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;GCD&lt;/code&gt;创建定时器？&lt;/li&gt;
&lt;li&gt;子线程创建的定时器，为什么需要开启一个子线程的&lt;code&gt;RunLoop&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RunLoop&lt;/code&gt;作用？主线程能不能被销毁，销毁后会程序会怎样？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="RunLoop" scheme="http://mengyueping.com/categories/iOS/RunLoop/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="GCD" scheme="http://mengyueping.com/tags/GCD/"/>
    
      <category term="NSThread" scheme="http://mengyueping.com/tags/NSThread/"/>
    
      <category term="多线程" scheme="http://mengyueping.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="RunLoop" scheme="http://mengyueping.com/tags/RunLoop/"/>
    
      <category term="NSTimer" scheme="http://mengyueping.com/tags/NSTimer/"/>
    
  </entry>
  
  <entry>
    <title>iOS的runtime之AssociatedObject</title>
    <link href="http://mengyueping.com/2017/08/13/iOS-runtime-associated-object/"/>
    <id>http://mengyueping.com/2017/08/13/iOS-runtime-associated-object/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2017-08-13T06:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote>
<ol>
<li>关联对象被存储在什么地方，是不是存放在被关联对象本身的内存中？</li>
<li>关联对象的五种关联策略有什么区别？</li>
<li>关联对象都有哪些使用场景?</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="关联对象函数"><a href="#关联对象函数" class="headerlink" title="关联对象函数"></a>关联对象函数</h1><p>关联对象函数：<code>objc_setAssociatedObject</code>、<code>objc_getAssociatedObject</code>、<code>objc_removeAssociatedObjects</code>。</p>
<blockquote>
<p><code>关联</code>是指把两个对象相互关联起来，使得其中的一个对象作为另外一个对象的一部分，可以理解为对象和属性的关系，但是有所不同。</p>
<p><code>关联</code>是在类的定义之外为类增加额外的存储空间。使用关联，我们可以<strong>不用修改类的定义</strong>而为其<strong>对象增加存储空间</strong>。在<strong>无法访问到类的源码</strong>的时候或者是<strong>考虑到二进制兼容性</strong>的时候是非常有用。</p>
<p><code>关联</code>是基于关键字的，因此，我们可以为任何对象增加任意多的关联，每个都使用不同的关键字即可。<code>关联</code>是可以保证<strong>被关联的对象在关联对象的整个生命周期都是可用的</strong>。</p>
</blockquote>
<h2 id="设置关联对象"><a href="#设置关联对象" class="headerlink" title="设置关联对象"></a>设置关联对象</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT <span class="keyword">void</span> objc_setAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key, <span class="keyword">id</span> value, objc_AssociationPolicy policy);</div></pre></td></tr></table></figure>
<p>四个参数：<strong>源对象</strong>(被关联的对象-<code>id object</code>)，<strong>关键字</strong>(<code>const void *key</code>)，<strong>关联的对象</strong>(<code>id value</code>)和一个<strong>关联策略</strong>(<code>objc_AssociationPolicy policy</code>)。</p>
<p><code>关键字</code>：是一个<code>void</code>类型的指针。每一个关联的关键字必须是唯一的。通常都是会采用静态变量来作为关键字。</p>
<blockquote>
<p>有三种推荐<code>Key</code>值：<br>声明 <code>static char kAssociatedObjectKey;</code>，使用 <code>&amp;kAssociatedObjectKey</code>作为 <code>key</code>值;<br>声明 <code>static void *kAssociatedObjectKey = &amp;kAssociatedObjectKey;</code>，使用 <code>kAssociatedObjectKey</code> 作为<code>key</code> 值；<br>用<code>selector</code>，使用<code>getter</code>方法的名称作为<code>key</code>值。(省掉了一个变量名。可以通过<code>_cmd</code>)</p>
</blockquote>
<h2 id="关联策略"><a href="#关联策略" class="headerlink" title="关联策略"></a>关联策略</h2><p>表明了关联的对象是通过  赋值，保留引用还是复制的方式进行关联的；还有这种关联是原子的还是非原子的。这里的关联策略和声明属性时的很类似。使用枚举常量来表示的。<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OBJC_ASSOCIATION_ASSIGN           : 弱引用关联对象《=》@property(assign)/@property(unsafe_unretained)</span></div><div class="line"><span class="comment">// OBJC_ASSOCIATION_RETAIN_NONATOMIC : 强引用关联对象，且为非原子操作《=》@property (strong, nonatomic)</span></div><div class="line"><span class="comment">// OBJC_ASSOCIATION_COPY_NONATOMIC   : 复制关联对象，且为非原子操作《=》@property (copy, nonatomic)</span></div><div class="line"><span class="comment">// OBJC_ASSOCIATION_RETAIN           : 强引用关联对象，且为原子操作《=》@property (strong, atomic)</span></div><div class="line"><span class="comment">// OBJC_ASSOCIATION_COPY             : 复制关联对象，且为原子操作《=》@property (copy, atomic)</span></div><div class="line"><span class="keyword">typedef</span> OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line">    OBJC_ASSOCIATION_ASSIGN = <span class="number">0</span>,          </div><div class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class="number">1</span>, </div><div class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class="number">3</span>,   </div><div class="line">    OBJC_ASSOCIATION_RETAIN = <span class="number">01401</span>,       </div><div class="line">    OBJC_ASSOCIATION_COPY = <span class="number">01403</span>      </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="断开关联"><a href="#断开关联" class="headerlink" title="断开关联"></a>断开关联</h2><p>断开关联可以使用<code>objc_setAssociatedObject</code>函数，传入<code>nil</code>值即可。<br>其中，被关联的对象为<code>nil</code>，此时关联策略也就无关紧要了。<br><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_setAssociatedObject(array, &amp;Key, <span class="literal">nil</span>, OBJC_ASSOCIATION_ASSIGN);</div></pre></td></tr></table></figure></p>
<h2 id="获取关联对象"><a href="#获取关联对象" class="headerlink" title="获取关联对象"></a>获取关联对象</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT <span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key);</div></pre></td></tr></table></figure>
<h2 id="断开所有关联对象"><a href="#断开所有关联对象" class="headerlink" title="断开所有关联对象"></a>断开所有关联对象</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT <span class="keyword">void</span> objc_removeAssociatedObjects(<span class="keyword">id</span> object);</div></pre></td></tr></table></figure>
<p>通常情况下不建议使用这个函数，因为他会断开所有关联。只有在需要把对象恢复到“原始状态”的时候才会使用这个函数。</p>
<h1 id="关联对象使用"><a href="#关联对象使用" class="headerlink" title="关联对象使用"></a>关联对象使用</h1><p>给一个对象动态添加属性，其实就是<code>get/set</code>方法。</p>
<blockquote>
<p>为现有的类添加私有变量以帮助实现细节。<br>为现有的类添加公有属性。<br>为<code>KVO</code>创建一个关联的观察者。</p>
</blockquote>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对象关联</span></div><div class="line"><span class="comment">//1 定义常量关键字  键名</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> arrayKey;</div><div class="line"><span class="comment">//2 创建一个数组（要关联对象）</span></div><div class="line"><span class="built_in">NSArray</span> *arr = [[<span class="built_in">NSArray</span> alloc] initWithObjects:<span class="string">@"One"</span>, <span class="string">@"Two"</span>,<span class="string">@"Three"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="comment">//3 创建一个字符串（关联对象）</span></div><div class="line"><span class="built_in">NSString</span> *arrayID = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,<span class="string">@"three numbers"</span>];</div><div class="line"><span class="comment">//4 把 arrayID 关联到对象</span></div><div class="line">objc_setAssociatedObject(arr, &amp;arrayKey, arrayID, OBJC_ASSOCIATION_RETAIN);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;关联对象被存储在什么地方，是不是存放在被关联对象本身的内存中？&lt;/li&gt;
&lt;li&gt;关联对象的五种关联策略有什么区别？&lt;/li&gt;
&lt;li&gt;关联对象都有哪些使用场景?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/categories/iOS/runtime/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/tags/runtime/"/>
    
      <category term="关联对象" scheme="http://mengyueping.com/tags/%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="AssociatedObject" scheme="http://mengyueping.com/tags/AssociatedObject/"/>
    
  </entry>
  
  <entry>
    <title>iOS之多线程</title>
    <link href="http://mengyueping.com/2017/07/20/iOS-multi-thread/"/>
    <id>http://mengyueping.com/2017/07/20/iOS-multi-thread/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2017-07-20T12:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>线程与进程的区别和联系？</li>
<li>多线程技术有哪些优点和缺点？</li>
<li><code>iOS</code>中的多线程技术都有哪些？都有哪些常用<code>API</code>？</li>
<li><code>iOS</code>中<code>NSThread</code>、<code>GCD</code> 与<code>NSOperation</code>该如何看待（如何选择使用）？</li>
</ul>
<a id="more"></a>
<h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><blockquote>
<p>一个程序至少要有一个进程，一个进程至少要有一个线程。</p>
<p><code>进程</code>：</p>
<p>是系统进行资源分配和调度的一个独立单元。<code>进程</code>是具有一定独立功能的程序关于某个数据集合上的一次运行活动。在系统中正在运行的一个应用程序，每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内。</p>
<p><code>线程</code>：</p>
<p>是<code>进程</code>下的一个分支，是<code>进程</code>的实体，是<code>CPU</code>调度和分派的基本单元，它是比<code>进程</code>更小的独立运行的基本单位。<code>线程</code>自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源（<code>程序计数器</code>、<code>一组寄存器</code>、<code>栈</code>），但是它可与同属一个<code>进程</code>的其他<code>线程</code>共享<code>进程</code>所拥有的全部资源。一个<code>进程</code>（程序）的所有任务都在<code>线程</code>中执行，每个<code>进程</code>都至少有一个<code>线程</code>（<code>主线程</code>）。</p>
<p><code>进程</code>和<code>线程</code>：</p>
<p>1、都是由操作系统所分配的<code>程序运行的基本单元</code>，系统利用该基本单元<code>实现系统对应用的并发性</code>。</p>
<p>2、<code>进程</code>和<code>线程</code>的主要差别在于它们是不同的操作系统资源管理方式。</p>
<p>3、<code>进程</code>有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而<code>线程</code>只是一个<code>进程</code>中的不同执行路径。</p>
<p>4、<code>线程</code>有自己的堆栈和局部变量，但<code>线程</code>之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以<code>多进程</code>的程序要比<code>多线程</code>的程序健壮，但在<code>进程切换时</code>，耗费资源较大，效率要差一些。 </p>
<p>5、对于一些要求<code>同时进行</code>并且又要<code>共享某些变量</code>的<code>并发操作</code>，只能用线程，不能用进程。</p>
<p>多线程：</p>
<p>一个<code>进程</code>中可以开启<code>多条线程</code>，多条线程可以并行（同时）执行不同的任务，<code>多线程并发</code>（同时）执行，其实是<code>CPU</code>快速地在多条线程之间调度（切换）。</p>
</blockquote>
<p><code>多线程</code>是一个比较轻量级的方法来实现单个应用程序内多个代码执行路径。</p>
<p><code>多线程</code>编程是防止主线程堵塞、增加运行效率的最佳方法。</p>
<p><code>主线程</code>：一个<code>iOS</code>程序运行后，默认会开启<code>1</code>条线程，称为<code>主线程</code>或<code>UI线程</code>。处理<code>UI</code>事件（比如：<code>点击事件</code>、<code>滚动事件</code>、<code>拖拽事件</code>等）、<code>显示/刷新UI界面</code>。</p>
<p><code>iOS</code>下的<code>主线程</code>的<code>堆栈</code>大小是<code>1M</code>。从第二个线程开始就是<code>512KB</code>，并且该值不能通过编译器开关或线程<code>API</code>函数来更改，只有主线程有直接修改<code>UI</code>的能力。</p>
<h1 id="iOS的多线程技术"><a href="#iOS的多线程技术" class="headerlink" title="iOS的多线程技术"></a><code>iOS</code>的多线程技术</h1><blockquote>
<p>多线程的优缺点：</p>
<p>优点：</p>
<p>1、能适当提高程序的执行效率。</p>
<p>2、能适当提高资源利用率（<code>CPU</code>、<code>内存利用率</code>）。</p>
<p>缺点：</p>
<p>1、创建线程是有开销的，<code>iOS</code>下主要成本包括：<code>内核数据结构（大约1KB）</code>、<code>栈空间</code>、<code>创建时间90毫秒</code>。</p>
<p>2、如果开启大量的线程，会降低程序的性能。</p>
<p>3、线程越多，<code>CPU</code>在调度线程上的开销就越大。</p>
<p>4、程序设计更加复杂：比如<code>线程之间的通信</code>、<code>多线程的数据共享</code>。</p>
</blockquote>
<p><code>iOS</code>可以使用的多线程技术有：<code>pthread</code>、<code>NSThread</code>、<code>GCD</code>、<code>NSOperation</code>。</p>
<ul>
<li><p><code>pthread (C)</code> ：适用于<code>Unix\Linux\Windows</code>等系统。<strong>跨平台/可移植</strong>。一套通用的多线程<code>API</code>。线程生命周期需要程序员管理。</p>
</li>
<li><p><code>NSThread (OC)</code>：使用更加<strong>面向对象</strong>。可直接操作线程对象。<strong>线程生命周期需要程序员管理</strong>。</p>
</li>
<li><p><code>GCD（C）</code>：<strong>充分利用设备多核</strong>。线程生命周期<strong>自动管理</strong>。</p>
</li>
<li><p><code>NSOperation (OC)</code>：基于<code>GCD</code>（底层是<code>GCD</code>）。使用更加<strong>面向对象</strong>。线程生命周期自动管理。</p>
</li>
</ul>
<h1 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h1><p>一个<code>NSThread</code>对象就代表一条线程。</p>
<p>线程状态：创建（<code>New</code>） -&gt; 进入就绪状态（<code>Runnable</code>） -&gt; 运行状态（<code>Running</code>）。当线程任务执行完毕，自动进入死亡状态。中间可能会有：强制停止线程、阻塞（<code>Blocked</code>）。</p>
<p>一旦线程停止（死亡）了，就不能再次开启任务。</p>
<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><ul>
<li>创建、启动线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithTarget:(id)target selector:(SEL)selector object:(nullable id)argument NS_AVAILABLE(10_5, 2_0);</div><div class="line">- (void)start NS_AVAILABLE(10_5, 2_0);</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(target: <span class="type">Any</span>, selector: <span class="type">Selector</span>, object argument: <span class="type">Any</span>?)</div><div class="line"></div><div class="line"><span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<ul>
<li>获得主线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property (class, readonly, strong) NSThread *mainThread NS_AVAILABLE(10_5, 2_0);</div><div class="line"></div><div class="line">[NSThread mainThread];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">main</span>: <span class="title">Thread</span> </span>&#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="type">Thread</span>.main</div></pre></td></tr></table></figure>
<ul>
<li>是否为主线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (readonly) BOOL isMainThread NS_AVAILABLE(10_5, 2_0);</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> isMainThread: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取当前线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property (class, readonly, strong) NSThread *currentThread;</div><div class="line"></div><div class="line">[NSThread currentThread];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">current</span>: <span class="title">Thread</span> </span>&#123; <span class="keyword">get</span> &#125;</div><div class="line"></div><div class="line"><span class="type">Thread</span>.current</div></pre></td></tr></table></figure>
<ul>
<li>创建线程后自动启动线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[NSThread detachNewThreadSelector:@selector(run) toTarget:self withObject:nil];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">detachNewThreadSelector</span>(<span class="title">_</span> <span class="title">selector</span>: <span class="title">Selector</span>, <span class="title">toTarget</span> <span class="title">target</span>: <span class="title">Any</span>, <span class="title">with</span> <span class="title">argument</span>: <span class="title">Any</span>?)</span></div></pre></td></tr></table></figure>
<ul>
<li>隐式创建并启动线程：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self performSelectorInBackground:@selector(run) withObject:nil];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOS <span class="number">2.0</span>, *)</div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">performSelector</span><span class="params">(inBackground aSelector: Selector, with arg: Any?)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>阻塞 Blocked ：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ (void)sleepUntilDate:(NSDate *)date;</div><div class="line">+ (void)sleepForTimeInterval:(NSTimeInterval)ti;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">sleep</span>(<span class="title">until</span> <span class="title">date</span>: <span class="title">Date</span>)</span></div><div class="line"><span class="title">open</span> <span class="title">class</span> <span class="title">func</span> <span class="title">sleep</span>(<span class="title">forTimeInterval</span> <span class="title">ti</span>: <span class="title">TimeInterval</span>)</div></pre></td></tr></table></figure>
<ul>
<li>停止线程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (void)exit;</div><div class="line"></div><div class="line">[NSThread exit];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">exit</span>()</span></div></pre></td></tr></table></figure>
<h1 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h1><ul>
<li>自定义子类继承<code>NSOperation</code>：</li>
</ul>
<blockquote>
<ol>
<li><p>重写<code>- (void)main</code>方法，在里面实现想执行的任务。</p>
</li>
<li><p>自己创建自动释放池，因为如果是异步操作，无法访问主线程的自动释放池。</p>
</li>
<li><p>经常通过<code>-(Bool)isCancelled</code>方法检测操作是否被取消，对取消做出响应。</p>
</li>
</ol>
</blockquote>
<ul>
<li>一般的实现步骤：</li>
</ul>
<blockquote>
<ol>
<li><p>先将需要执行的操作封装到一个<code>NSOperation</code>对象中</p>
</li>
<li><p>然后将<code>NSOperation</code>对象添加到<code>NSOperationQueue</code>中</p>
</li>
<li><p>系统会自动将<code>NSOperationQueue</code>中的<code>NSOperation</code>取出来</p>
</li>
<li><p>将取出的<code>NSOperation</code>封装的操作放到一条线程中执行</p>
</li>
</ol>
</blockquote>
<h2 id="抽象父类"><a href="#抽象父类" class="headerlink" title="抽象父类"></a>抽象父类</h2><p><code>NSOperation</code>是个抽象类，并不具备封装操作的能力，有两个子类：<code>NSInvocationOperation</code> 和 <code>NSBlockOperation</code>。而<code>Swift</code>中的<code>Operation</code>子类只有<code>BlockOperation</code>。</p>
<p>自定义子类继承 <code>NSOperation</code>， 重写 <code>-(void)main</code>方法，在里面实现向执行的任务。<br>自定义创建自动释放池，因为如果是异步操作，无法访问主线程的自动释放池。<br>经常通过 <code>- (BOOL)isCancelled</code> 方法检测操作是否被取消，对取消做出响应。</p>
<ul>
<li>开始执行操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)start;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p>默认情况下，调用了<code>start</code>方法后并不会开一条新线程去执行操作，而是在当前线程同步执行操作，只有将<code>NSOperation</code>放到一个<code>NSOperationQueue</code>中，才会异步执行操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)main;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<ul>
<li>取消单个队列操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)cancel;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<ul>
<li>依赖</li>
</ul>
<p>可以通过设置依赖来保证执行顺序，可以设置不同队列中的<code>operation</code>创建依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//添加依赖</div><div class="line">- (void)addDependency:(NSOperation *)op;</div><div class="line"></div><div class="line">//eg: 操作B依赖于操作A</div><div class="line">[operationB addDependency:operationA];</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">addDependency</span><span class="params">(<span class="number">_</span> op: Operation)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//删除依赖</div><div class="line">- (void)removeDependency:(NSOperation *)op;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">removeDependency</span><span class="params">(<span class="number">_</span> op: Operation)</span></span></div></pre></td></tr></table></figure>
<h2 id="子类-NSInvocationOperation"><a href="#子类-NSInvocationOperation" class="headerlink" title="子类 NSInvocationOperation"></a>子类 NSInvocationOperation</h2><ul>
<li>创建<code>NSInvocationOperation</code>对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;</div></pre></td></tr></table></figure>
<h2 id="子类-NSBlockOperation"><a href="#子类-NSBlockOperation" class="headerlink" title="子类 NSBlockOperation"></a>子类 NSBlockOperation</h2><p>只要<code>NSBlockOperation</code>封装的操作数大于<code>1</code>，就会异步执行操作。</p>
<ul>
<li>创建<code>NSBlockOperation</code>对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)blockOperationWithBlock:(void (^)(void))block;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(block: @escaping () -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure>
<ul>
<li>添加更多的操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)addExecutionBlock:(void (^)(void))block;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">addExecutionBlock</span><span class="params">(<span class="number">_</span> block: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure>
<h2 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h2><p>一个<code>NSOperationQueue</code>操作队列，相当于一个<code>线程管理器</code>，而非一个线程，因为你可以设置这个线程管理器内能并行运行的线程数量等。</p>
<p>只要是自己创建的队列，就会在子线程中执行，而且默认并发。自动异步执行<code>NSOperationQueue</code>中<code>NSOperation</code>操作。所以<strong>不需要考虑线程同步问题</strong>。</p>
<p>编程的重点都放在<code>main</code>里面，<code>NSInvocationOperation</code>、<code>NSBlockOperation</code>、自定义<code>Operation</code>。创建一个操作绑定相应的方法，当把操作添加到操作队列中时，操作绑定的方法就会自动执行了。当把操作添加到操作队列中时，默认会调用<code>main</code>方法。</p>
<ul>
<li>添加操作到<code>NSOperationQueue</code>中：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)addOperation:(NSOperation *)op;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">addOperation</span><span class="params">(<span class="number">_</span> op: Operation)</span></span></div></pre></td></tr></table></figure>
<p>此方法，系统内部会自动把<code>block</code>封装成一个<code>NSBlockOperation</code>然后再添加到队列中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)addOperationWithBlock:(void (^)(void))block;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">addOperation</span><span class="params">(<span class="number">_</span> block: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Swift</span>.<span class="type">Void</span>)</div></pre></td></tr></table></figure>
<ul>
<li>最大并发数（队列同时执行的任务数）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property NSInteger maxConcurrentOperationCount;</div><div class="line">static const NSInteger NSOperationQueueDefaultMaxConcurrentOperationCount = -1;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> maxConcurrentOperationCount: <span class="type">Int</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">let</span> <span class="title">defaultMaxConcurrentOperationCount</span>: <span class="title">Int</span>  // -1</span></div></pre></td></tr></table></figure>
<p><code>maxConcurrentOperationCount</code>默认为<code>-1</code>，不能取<code>0</code>。</p>
<ul>
<li>取消、暂停、恢复：</li>
</ul>
<p>只会对后面未执行的任务进行操作，不会影响当前执行的，且取消不可恢复。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 暂停</div><div class="line">self.queue.suspended = YES;</div><div class="line">// 恢复</div><div class="line">self.queue.suspended = NO;</div><div class="line">// 取消</div><div class="line">- (void)cancelAllOperations;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="keyword">var</span> isSuspended: <span class="type">Bool</span></div><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">cancelAllOperations</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><p><code>GCD</code> (<code>Grand Gentral Dispatch</code>，宏大的中央调度)，优势：</p>
<blockquote>
<p>1、<code>GCD</code>是苹果公司为多核的并行运算提出的解决方案；</p>
<p>2、<code>GCD</code>会自动利用更多的<code>CPU</code>内核（比如双核、四核）；</p>
<p>3、<code>GCD</code>会自动管理线程的生命周期（<code>创建线程</code>、<code>调度任务</code>、<code>销毁线程</code>）。程序员只需要告诉<code>GCD</code>想要执行什么任务，不需要编写任何线程管理代码。</p>
</blockquote>
<ul>
<li>执行步骤：</li>
</ul>
<blockquote>
<p>1、定制任务，就是执行什么操作；</p>
<p>2、将任务添加到队列中。<br><code>GCD</code>会<strong>自动</strong>将队列中的任务取出，放到对应的线程中执行。<br>任务的取出遵循队列的<code>FIFO</code>原则：先进先出，后进后出。</p>
</blockquote>
<ul>
<li>同步和异步、串行和并行：</li>
</ul>
<blockquote>
<p>同步：指第一个任务不执行完，不会开始第二个。只能在当前线程中执行任务，不具备开启新线程的能力。</p>
<p>异步：是不管第一个有没有执行完，都开始第二个。具备开启新线程的能力。</p>
<p>串行：是多个任务按一定顺序执行。让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务）。使用<code>dispatch_queue_create</code>函数创建串行队列。主队列是<code>GCD</code>自带的一种特殊的串行队列，放在主队列中的任务，都会放到主线程中执行，使用<code>dispatch_get_main_queue()</code>获得主队列。</p>
<p>并发：是多个任务同时执行。自动开启多个线程同时执行任务。并发功能只有在异步（<code>dispatch_async</code>）函数下才有效。使用<code>dispatch_queue_create</code>函数创建队列。使用<code>dispatch_get_global_queue</code>函数获得全局的并发队列。</p>
</blockquote>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul>
<li>队列类型：<blockquote>
<p>同步并发：没有开启新线程，串行执行任务。<br>同步串行：没有开启新线程，串行执行任务。<br>同步主队列：没有开启新线程，串行执行任务。<br>异步并发：开启新线程，并发执行任务。<br>异步串行：开启一条新线程，串行执行任务。<br>异步主队列：没有开启新线程，串行执行任务。</p>
</blockquote>
</li>
</ul>
<p>在<code>iOS</code>中队列分为：<code>串行队列</code>、<code>并发队列</code>、<code>主线程队列</code>。</p>
<ul>
<li><p>串行队列：队列中任务只会顺序执行；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t q = dispatch_queue_create(&quot;...&quot;, DISPATCH_QUEUE_SERIAL);</div></pre></td></tr></table></figure>
</li>
<li><p>并发队列：队列中的任务通常会并发执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t q = dispatch_queue_create(&quot;......&quot;,DISPATCH_QUEUE_CONCURRENT);</div></pre></td></tr></table></figure>
</li>
<li><p>全局队列：是系统的，直接拿过来用就可以，与并发队列类似。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DISPATCH_EXPORT DISPATCH_CONST DISPATCH_WARN_RESULT DISPATCH_NOTHROW</div><div class="line">dispatch_queue_t</div><div class="line">dispatch_get_global_queue(long identifier, unsigned long flags);</div><div class="line"></div><div class="line"></div><div class="line">dispatch_queue_t q = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div></pre></td></tr></table></figure>
</li>
<li><p>主队列：每一个应用程序对应唯一主队列，直接拿来用即可。在多线程编程中，使用主队列更新UI。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_CONST DISPATCH_NOTHROW</div><div class="line">dispatch_queue_t</div><div class="line">dispatch_get_main_queue(void)</div><div class="line">&#123;</div><div class="line">	return DISPATCH_GLOBAL_OBJECT(dispatch_queue_t, _dispatch_main_q);</div><div class="line">&#125;</div><div class="line"></div><div class="line">dispatch_queue_t q = dispatch_get_main_queue();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li>延时函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)performSelector:(SEL)aSelector withObject:(nullable id)anArgument afterDelay:(NSTimeInterval)delay;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NONNULL3 DISPATCH_NOTHROW</div><div class="line">void</div><div class="line">dispatch_after(dispatch_time_t when,</div><div class="line">	dispatch_queue_t queue,</div><div class="line">	dispatch_block_t block);</div><div class="line"></div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        //2秒后执行这里</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo;</div></pre></td></tr></table></figure>
<ul>
<li><p>一次性代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static dispatch_once_t onceToken;</div><div class="line">dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">    //只执行1次的代码（这里面默认是线程安全的）</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>遍历：进行快速迭代遍历</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DISPATCH_EXPORT DISPATCH_NONNULL3 DISPATCH_NOTHROW</div><div class="line">void</div><div class="line">dispatch_apply(size_t iterations, dispatch_queue_t queue,</div><div class="line">		DISPATCH_NOESCAPE void (^block)(size_t));</div><div class="line"></div><div class="line">dispatch_apply(5, dispatch_get_global_queue(0, 0), ^(size_t index) &#123;</div><div class="line">   //执行5次代码，index顺序不确定</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p><code>GCD</code> 与<code>NSOperation</code>：</p>
<blockquote>
<p><code>GCD</code>和<code>NSOperation</code>都是用于实现多线程。</p>
<p><code>GCD</code>基于<code>C</code>语言的底层<code>API</code>，<code>GCD</code>主要与<code>block</code>结合使用，代码简洁高效。</p>
<p><code>NSOperation</code>属于<code>OC</code>类，是基于<code>GCD</code>更高一层的封装。复杂任务一般用<code>NSOperation</code>实现。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;线程与进程的区别和联系？&lt;/li&gt;
&lt;li&gt;多线程技术有哪些优点和缺点？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中的多线程技术都有哪些？都有哪些常用&lt;code&gt;API&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中&lt;code&gt;NSThread&lt;/code&gt;、&lt;code&gt;GCD&lt;/code&gt; 与&lt;code&gt;NSOperation&lt;/code&gt;该如何看待（如何选择使用）？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="多线程" scheme="http://mengyueping.com/categories/iOS/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="GCD" scheme="http://mengyueping.com/tags/GCD/"/>
    
      <category term="NSThread" scheme="http://mengyueping.com/tags/NSThread/"/>
    
      <category term="NSOperation" scheme="http://mengyueping.com/tags/NSOperation/"/>
    
      <category term="多线程" scheme="http://mengyueping.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Thread" scheme="http://mengyueping.com/tags/Thread/"/>
    
      <category term="Operation" scheme="http://mengyueping.com/tags/Operation/"/>
    
  </entry>
  
  <entry>
    <title>iOS的runtime应用篇之方法交换</title>
    <link href="http://mengyueping.com/2017/07/18/iOS-runtime-methodExchange/"/>
    <id>http://mengyueping.com/2017/07/18/iOS-runtime-methodExchange/</id>
    <published>2017-07-17T16:00:00.000Z</published>
    <updated>2017-07-18T08:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用runtime进行方法交换"><a href="#使用runtime进行方法交换" class="headerlink" title="使用runtime进行方法交换"></a>使用runtime进行方法交换</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>如何对系统方法进行添加功能，在不修改原有方法调用的基础之上？</li>
<li>项目中已经大量使用了字符串转<code>URL</code>的调用，调用的系统方法，而没有对字符串进行转码，这样如果字符串中出现中文的话会导致<code>URL</code>转换失败的情况，那么如何不大量修改原项目中代码，来实现对<code>URL</code>的转码以及判空？</li>
</ul>
<a id="more"></a>
<h1 id="使用Runtime对系统方法实现方法交换"><a href="#使用Runtime对系统方法实现方法交换" class="headerlink" title="使用Runtime对系统方法实现方法交换"></a>使用Runtime对系统方法实现方法交换</h1><p>在项目中已经大量使用了字符串转<code>URL</code>的调用，调用的是系统方法，而没有对字符串进行转码，这样如果字符串中出现中文(特殊符号&amp;％、空格)的话会导致<code>URL</code>转换失败的情况，就需要对所有用到该系统方法的地方进行转码和判空，代码的改动量非常大，无疑就是体力活，这不是一个好主意。那么，我们该如何更巧妙的实现我们的目的呢？这就可以使用<code>runtime</code>的方法交换来实现我们的需求了。</p>
<p>我们可以在<code>NSURL</code>分类中，实现我们想要的方法，然后使用<code>runtime</code>的方法交换，把我们方法实现和系统方法实现做一个交换，这样调用系统的方法就相当于调用我们定义的方法，而我们定义的方法是满足我们的需求的。这样就不用大量修改项目中的代码了，只需要实现一个<code>NSURL</code>的分类即可。</p>
<p>创建分类<code>NSURL+methodExchange</code>，实现自定义方法。自定义方法需要满足：自己的需求又要实现系统功能。方法<code>+ (void)load</code>在类被加载的时候，此方法就被调用了。然后在方法<code>+ (void)load</code>中，把系统方法和自定义方法进行方法实现的交换。</p>
<p>需要注意的是，在方法<code>+ (instancetype)MYP_URLWithString:</code>中，此处已经进行了方法实现的交换，所有调用方法<code>+ (instancetype)MYP_URLWithString:</code>相当于调用系统方法<code>+ (instancetype)URLWithString:</code>的实现。所以此处在做完判空和转码之后，需要调用<code>+ (instancetype)MYP_URLWithString:</code>，即调用系统方法实现系统所做的事情。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)MYP_URLWithString:(NSString *)URLString</div><div class="line">&#123;</div><div class="line">    //1. 转码</div><div class="line">//    URLString = [URLString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; //iOS9不再使用</div><div class="line">    URLString = [URLString stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]]; </div><div class="line"></div><div class="line">    //2. 实现系统调用</div><div class="line">    NSURL *url = [NSURL MYP_URLWithString:URLString];</div><div class="line">    if (url == nil) &#123; //判空</div><div class="line">        NSAssert(NO, @&quot;url为空&quot;);</div><div class="line">    &#125;</div><div class="line">    return url;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> 当这个类被加载的时候，此方法会被调用</div><div class="line"> */</div><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">    //1. 拿到要交换的两个方法：系统方法和自定义的方法</div><div class="line">    Method urlmethod = class_getClassMethod([NSURL class], @selector(URLWithString:));</div><div class="line">    Method urlmethodmyp = class_getClassMethod([NSURL class], @selector(MYP_URLWithString:));</div><div class="line">    </div><div class="line">    //2.进行方法交换</div><div class="line">    method_exchangeImplementations(urlmethod, urlmethodmyp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他类似需求，也可以使用<code>runtime</code>交换方法来实现。例如，对图片的统一处理，可以对<code>+ imageNamed:</code>进行方法交换；<code>UIButton</code>重复点击的间隔，可以对<code>- sendAction: to: forEvent:</code>进行方法交换。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_runtime-methodExchange" target="_blank" rel="external">apple-stack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用runtime进行方法交换&quot;&gt;&lt;a href=&quot;#使用runtime进行方法交换&quot; class=&quot;headerlink&quot; title=&quot;使用runtime进行方法交换&quot;&gt;&lt;/a&gt;使用runtime进行方法交换&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如何对系统方法进行添加功能，在不修改原有方法调用的基础之上？&lt;/li&gt;
&lt;li&gt;项目中已经大量使用了字符串转&lt;code&gt;URL&lt;/code&gt;的调用，调用的系统方法，而没有对字符串进行转码，这样如果字符串中出现中文的话会导致&lt;code&gt;URL&lt;/code&gt;转换失败的情况，那么如何不大量修改原项目中代码，来实现对&lt;code&gt;URL&lt;/code&gt;的转码以及判空？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/categories/iOS/runtime/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/tags/runtime/"/>
    
      <category term="方法交换" scheme="http://mengyueping.com/tags/%E6%96%B9%E6%B3%95%E4%BA%A4%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>iOS之KVO机制</title>
    <link href="http://mengyueping.com/2017/07/18/iOS_KVO/"/>
    <id>http://mengyueping.com/2017/07/18/iOS_KVO/</id>
    <published>2017-07-17T16:00:00.000Z</published>
    <updated>2017-07-18T12:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>KeyPath、KVC、KVO有什么联系？</li>
<li>KVC通过Key找到Value的原理？</li>
<li>iOS中的KVO是如何实现的？</li>
<li>MVC数据流通哪些阶段都会使用到哪些模式？</li>
</ul>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="KeyPath"><a href="#KeyPath" class="headerlink" title="KeyPath"></a>KeyPath</h2><p><code>KeyPath</code>，键路径，是基于<strong>键-值（key-value）</strong>编码技术的。<strong>键-值（key-value）</strong>编码技术是一种间接访问对象属性的机制，是一种查找方式。在一个给定的实体（比如对象）中，同一个属性的所有值具有相同的数据类型。</p>
<p><code>键路径</code>是一个由用点作分隔符的键组成的字符串（点语法），用于指定一个连接在一起的对象性质序列。后一个键的性质是由前一个键的性质决定的。</p>
<p>有了<code>键路径</code>，就可以不通过模型（类/对象）实现的方法，来直接指定相关对象的性质（属性/方法）。通过<code>键路径</code>，可以指定对象中的一个任意深度的路径，使其指向相关对象的特定属性。</p>
<h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2><p><code>Key-Value-Coding</code>，键值编码，是一种通过字符串间接访问对象的属性的方法。不是通过调用存取方法（<code>setter/getter</code>）来获取属性，而是使用字符串来标识属性，直接或通过实例变量访问的机制，非对象类型的变量将自动封装或者解封成对象，很多情况下会简化程序代码。在字典转模型、自定义模型归档/解档都会使用到。</p>
<p><code>KVC</code>的缺点：一旦使用<code>KVC</code>，编译器将无法检查出错误，即<strong>不会对设置的键、键路径进行错误检查</strong>，且执行效率要低于合成存取器方法和自定义的<code>setter</code>和<code>getter</code>方法。效率低的原因是使用<code>KVC</code>键值编码，它必须先解析字符串，然后在设置或者访问对象的实例变量。</p>
<h2 id="KVC机制通过key找到value的原理"><a href="#KVC机制通过key找到value的原理" class="headerlink" title="KVC机制通过key找到value的原理"></a>KVC机制通过key找到value的原理</h2><p>当通过<code>KVC</code>访问对象时，例如：<code>[self valueForKey:@&quot;view&quot;]</code>，程序会自动试图通过下面几种不同的方式解析这个方法的调用：</p>
<ul>
<li>第一、查找对象是否带有 <code>view</code> 这个方法，</li>
<li>第二、如果没有找到，会继续查找对象是否带有 <code>view</code> 这个实例变量（<code>iVar</code>） </li>
<li>第三、如果还没有找到，程序会继续试图调用方法 <code>-(id)valueForUndefinedKey:</code>。</li>
<li>第四、如果这个方法还是没有被实现的话，程序会抛出一个 <code>NSundefinedKeyException</code> 异常错误。</li>
</ul>
<blockquote>
<p>注意：</p>
<p>1、<code>KVC</code>查找方法的时候，不仅仅会查找 <code>view</code> 这个方法，还会查找 <code>getview</code> (前面加一个<code>get</code>)这个方法，或者 <code>_view</code> 以及 <code>_getview</code> 这个几种形式。</p>
<p>2、在查找实例变量的时候，也会不仅仅查找 <code>view</code> 这个变量，也会查找 <code>_view</code> 这个变量是否存在。</p>
<p>3、设计 <code>valueForUndefinedKey:</code> 方法的主要目的是：当你使用 <code>-(id)valueForKey</code> 方法从对象中请求值时，对象能够在错误发生前，有最后的机会响应这个请求。</p>
</blockquote>
<h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p><code>key-Value-Observing</code>，键值观察机制，键值观察机制是一种能使得一个对象获取到其他对象<strong>属性变化</strong>的通知，极大的简化了代码。这样看来，<code>KVO</code>就是一种典型的通知模式。实现<code>KVO</code>键值观察模式，被观察的对象必须使用 <code>KVC</code> 键值编码技术来修改它的实例变量，或者点语法，这样才能被观察者观察到。因此，<code>KVC</code>是<code>KVO</code>的基础。<code>KVC</code> 和 <code>KVO</code> 的 <code>keyPath</code> 可以是属性、实例变量、成员变量。</p>
<h2 id="iOS中实现KVO"><a href="#iOS中实现KVO" class="headerlink" title="iOS中实现KVO"></a>iOS中实现KVO</h2><p><code>KVO</code>是基于<code>runtime</code>机制实现的。<br><code>KVO</code>中谁监听谁注册，且对响应进行处理，这样观察者和被观察者完全解耦。<code>KVO</code>只检测类中的属性，并且属性名都是通过字符串来查找，编译器不会检错和补全，全部取决于自己。观察者和被观察者不会被保留也不会被释放。</p>
<p><code>Core Data</code>实现了对于<code>KVC</code>和<code>KVO</code>完整且自动化的支持，除了为属性整合<code>KVO</code>和<code>KVC</code>访问方法外，还整合了适当的集合访问方法来处理多值关系。</p>
<h3 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h3><p>第一、注册观察者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</div></pre></td></tr></table></figure></p>
<p>第二、接收变更通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)observeValueForKeyPath:(nullable NSString *)keyPath ofObject:(nullable id)object change:(nullable NSDictionary&lt;NSKeyValueChangeKey, id&gt; *)change context:(nullable void *)context;</div></pre></td></tr></table></figure></p>
<p>第三、移除对象的观察者身份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;</div></pre></td></tr></table></figure></p>
<h3 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h3><p>第一、注册观察者<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">addObserver</span><span class="params">(<span class="number">_</span> observer: NSObject, forKeyPath keyPath: String, options: NSKeyValueObservingOptions = [], context: UnsafeMutableRawPointer?)</span></span></div></pre></td></tr></table></figure></p>
<p>第二、接收变更通知<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span></div></pre></td></tr></table></figure></p>
<p>第三、移除对象的观察者身份<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">removeObserver</span><span class="params">(<span class="number">_</span> observer: NSObject, forKeyPath keyPath: String)</span></span></div></pre></td></tr></table></figure></p>
<h1 id="与其他设计模式的比较"><a href="#与其他设计模式的比较" class="headerlink" title="与其他设计模式的比较"></a>与其他设计模式的比较</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p><strong>代理</strong>又叫<strong>委托</strong>，是一种设计模式。代理是对象与对象之间的通信交互，解除了对象之间的耦合性。允许一个类在某些特定时刻通知到其他类，而不需要获取到那些类的指针，改变或传递控制链。可以减少框架复杂度。代理的属性常使用<code>weak</code>修饰的原因：防止循环引用（循环引用会导致对象无法得到正确的释放）。</p>
<blockquote>
<p>通知和代理区别：</p>
<p>1、代理是一种回调机制，且是一对一的关系。</p>
<p>2、通知是一对多的关系，一个对所有的观察者提供变更的通知。</p>
<p>3、代理效率比通知高。</p>
<p>代理 和 Block</p>
<p>1、一般都是一对一的通信。</p>
<p>2、代理需要定义协议，代理对象遵守协议且实现协议方法，才可以实现通信。</p>
<p>3、相比之下，Block更加简洁，不需要定义繁琐的协议方法，但通信事件比较多的话，建议使用代理。</p>
</blockquote>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><code>iOS</code>中的协议是一个方法列表，且多少有点相关。它的特点是可以被任何类使用（实现），但类自身不会实现这样方法，而是由其他人来实现。</p>
<p>协议经常用来实现委托对象（委托设计模式）。如果一个类采用了一个协议，那么它必须实现协议中必须需要实现的方法。在协议中，方法默认是必须实现（<code>@required</code>），添加关键字<code>@optional</code>，表明一旦采用该协议，这些可选的方法是可以选择不实现。</p>
<h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p><code>MVC</code>是一种架构模式，<code>M</code>表示<code>model</code>，<code>V</code>表示视图<code>view</code>，<code>C</code>表示控制器<code>controller</code>。</p>
<ul>
<li><p><code>model</code>负责存储、定义、操作数据；</p>
</li>
<li><p><code>view</code>用来展示给用户，和用户进行操作交互；</p>
</li>
<li><p><code>controller</code>是<code>model</code>和<code>view</code>的协调者。<code>controller</code>把<code>model</code>中的数据拿过来给<code>view</code>用。</p>
</li>
</ul>
<blockquote>
<p>注意：</p>
<p>1、<code>controller</code>可以直接与<code>model</code>和<code>view</code>进行通信，而<code>view</code>不能和<code>controller</code>直接通信。<code>view</code>与<code>controller</code>通信需要利用代理协议的方式。</p>
<p>2、当有数据更新时，<code>model</code>也要与<code>controller</code>进行通信，这个时候就要用<code>Notification</code>和<code>KVO</code>，这个方式就像一个广播一样，<code>model</code>发信号，<code>controller</code>设置监听接受信号，当有数据更新时就发信号给<code>controller</code>。</p>
<p>3、<code>model</code>和<code>view</code>不能直接进行通信，这样会违背<code>MVC</code>设计模式。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;KeyPath、KVC、KVO有什么联系？&lt;/li&gt;
&lt;li&gt;KVC通过Key找到Value的原理？&lt;/li&gt;
&lt;li&gt;iOS中的KVO是如何实现的？&lt;/li&gt;
&lt;li&gt;MVC数据流通哪些阶段都会使用到哪些模式？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="KVO" scheme="http://mengyueping.com/categories/iOS/KVO/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="KVO" scheme="http://mengyueping.com/tags/KVO/"/>
    
      <category term="KVC" scheme="http://mengyueping.com/tags/KVC/"/>
    
      <category term="KeyPath" scheme="http://mengyueping.com/tags/KeyPath/"/>
    
      <category term="Block" scheme="http://mengyueping.com/tags/Block/"/>
    
      <category term="代理" scheme="http://mengyueping.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="Notification" scheme="http://mengyueping.com/tags/Notification/"/>
    
      <category term="MVC" scheme="http://mengyueping.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>iOS的runtime应用篇之实现归档解档</title>
    <link href="http://mengyueping.com/2017/07/17/iOS-runtime-archive/"/>
    <id>http://mengyueping.com/2017/07/17/iOS-runtime-archive/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-18T02:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用runtime进行归档解档"><a href="#使用runtime进行归档解档" class="headerlink" title="使用runtime进行归档解档"></a>使用runtime进行归档解档</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>不使用<code>runtime</code>情况下，<strong>归档/解档</strong>有什么缺点？</li>
<li>如何使用<code>runtime</code>进行<strong>归档/解档</strong>？</li>
<li>使用<code>runtime</code>进行<strong>归档/解档</strong>好处是什么？</li>
</ul>
<a id="more"></a>
<h1 id="归档解档"><a href="#归档解档" class="headerlink" title="归档解档"></a>归档解档</h1><p><code>OC</code>中归档解档又称为序列化和反序列化。在<code>iOS</code>开发中通常会遇到对模型进行归档，而要实现模型归档，必须对该模型实现<code>NSCoding</code>协议。实现<code>NSCoding</code>协议的归档解档方法，一般做法是分别对该模型的每个属性进行<code>encodeObject</code>和<code>decodeObjectForKey</code>操作，如下。这样做缺点就是太过繁琐，如果该模型属性特别多的话，不适合使用。如果要修改了该模型的一些属性，对应的<code>encodeObject</code>和<code>decodeObjectForKey</code>操作也需要修改。</p>
<h2 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h2><p>对模型<code>MomentModel</code>进行归档解档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@interface MomentModel : NSObject&lt;NSCoding&gt;</div><div class="line"></div><div class="line">@property (nonatomic, copy) NSString *content;</div><div class="line">@property (nonatomic, copy) NSString *time;</div><div class="line">@property (nonatomic, copy) NSString *pic;</div><div class="line">@property (nonatomic, copy) NSString *place;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//归档操作</div><div class="line">- (void)encodeWithCoder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    [coder encodeObject:_content forKey:@&quot;_content&quot;];</div><div class="line">    [coder encodeObject:_time forKey:@&quot;_time&quot;];</div><div class="line">    [coder encodeObject:_pic forKey:@&quot;_pic&quot;];</div><div class="line">    [coder encodeObject:_place forKey:@&quot;_place&quot;];</div><div class="line">&#125;</div><div class="line">//解档操作</div><div class="line">- (instancetype)initWithCoder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        _content = [coder decodeObjectForKey:@&quot;_content&quot;];</div><div class="line">        _time = [coder decodeObjectForKey:@&quot;_time&quot;];</div><div class="line">        _pic = [coder decodeObjectForKey:@&quot;_pic&quot;];</div><div class="line">        _place = [coder decodeObjectForKey:@&quot;_place&quot;];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要归档的模型类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MomentModel</span>: <span class="title">NSObject</span>, <span class="title">NSCoding</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> time: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> pic: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> place: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 归档</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</div><div class="line">        aCoder.encode(content, forKey: <span class="string">"content"</span>)</div><div class="line">        aCoder.encode(time, forKey: <span class="string">"time"</span>)</div><div class="line">        aCoder.encode(pic, forKey: <span class="string">"pic"</span>)</div><div class="line">        aCoder.encode(place, forKey: <span class="string">"place"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// MARK: - 解档</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">        content = aDecoder.decodeObject(forKey: <span class="string">"content"</span>) <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        time = aDecoder.decodeObject(forKey: <span class="string">"time"</span>) <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        pic = aDecoder.decodeObject(forKey: <span class="string">"pic"</span>) <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        place = aDecoder.decodeObject(forKey: <span class="string">"place"</span>) <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归档操作</span></div><div class="line"><span class="keyword">let</span> k_moment_path = <span class="string">"<span class="subst">\(NSTemporaryDirectory()</span>)/moment.moment"</span></div><div class="line"><span class="keyword">let</span> isSuccess: <span class="type">Bool</span> = <span class="type">NSKeyedArchiver</span>.archiveRootObject(momentmodel, toFile: k_moment_path)</div><div class="line"><span class="keyword">if</span> isSuccess &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"归档成功"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//解档操作</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> obj = <span class="type">NSKeyedUnarchiver</span>.unarchiveObject(withFile: k_moment_path) <span class="keyword">as</span>? <span class="type">MomentModel</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"MomentModel: <span class="subst">\(obj)</span> <span class="subst">\(obj.content!)</span> <span class="subst">\(obj.pic!)</span> <span class="subst">\(obj.place!)</span> <span class="subst">\(obj.time!)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用Runtime归档解档"><a href="#使用Runtime归档解档" class="headerlink" title="使用Runtime归档解档"></a>使用Runtime归档解档</h1><p><strong>归档/解档</strong>需要实现<code>NSCoding</code>协议方法，在<code>NSCoding</code>协议方法中实现了对每个属性分别进行<strong>归档/解档</strong>，归档对属性值归档为相应的字段，解档依据相应的字段为对象属性赋值。只要获得模型的属性个数，模型的属性列表，以及模型的属性名，模型的属性值，就可以通过循环遍历的方式分别对每个属性进行<strong>归档/解档</strong>操作。这样就不用考虑属性有多少，是否会改变，解决了一般归档方法的缺点。</p>
<p>可以使用<code>runtime</code>的<code>OBJC_EXPORT Ivar *class_copyIvarList(Class cls, unsigned int *outCount)</code>方法获取某个类的属性个数和属性列表。遍历属性列表，可获取每个属性的名字，然后使用<code>KVC</code>获取每个属性的值。这样拿到了每个属性的名字和属性值就可以对模型进行归档。同样拿到属性的名字，进行解档。</p>
<h2 id="OC版本-1"><a href="#OC版本-1" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#pragma mark - NSCoding协议</div><div class="line">- (void)encodeWithCoder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    [self code:YES coder:coder];</div><div class="line">&#125;</div><div class="line">- (instancetype)initWithCoder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        [self code:NO coder:coder];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">#pragma mark - 私有</div><div class="line">/**</div><div class="line"> 归档 | 解档</div><div class="line"> </div><div class="line"> @param isEncode YES：归档  NO：解档</div><div class="line"> */</div><div class="line">- (void)code:(BOOL)isEncode coder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    //1. 获取属性个数 &amp; 属性列表</div><div class="line">    unsigned int outCount = 0;</div><div class="line">    Ivar *ivars = class_copyIvarList([UserModel class], &amp;outCount);</div><div class="line">    </div><div class="line">    //2. 遍历属性列表，</div><div class="line">    for (int i = 0; i&lt;outCount; i++) &#123;</div><div class="line">        //3. 获取属性名字</div><div class="line">        Ivar ivar = ivars[i];</div><div class="line">        const char * name = ivar_getName(ivar);</div><div class="line">        NSString *key = [NSString stringWithUTF8String:name];</div><div class="line">        id value;</div><div class="line">        if (isEncode) &#123;</div><div class="line">            //4. kvc获取属性值</div><div class="line">            value = [self valueForKey:key];</div><div class="line">            </div><div class="line">            //5. 归档</div><div class="line">            [coder encodeObject:value forKey:key];</div><div class="line">        &#125; else &#123;</div><div class="line">            //4. 解档</div><div class="line">            value = [coder decodeObjectForKey:key];</div><div class="line">            //5. kvc设置属性值</div><div class="line">            [self setValue:value forKey:key];</div><div class="line">        &#125;</div><div class="line">        NSLog(@&quot;count: %u | const char *name: %s | NSString *name: %@ | value: %@&quot;, outCount, name, key, value);</div><div class="line">        //c语言里面需要释放指针</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Swift版本-1"><a href="#Swift版本-1" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//要归档解档的模型类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span>: <span class="title">NSObject</span>, <span class="title">NSCoding</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> age: <span class="type">String</span>?</div><div class="line">    <span class="keyword">var</span> avatar: <span class="type">String</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 归档</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//1. 获取属性列表 &amp; 属性数量</span></div><div class="line">        <span class="keyword">var</span> outCount: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">UserModel</span>.<span class="keyword">self</span>, &amp;outCount)</div><div class="line">        </div><div class="line">        <span class="comment">//2. 遍历属性列表</span></div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="type">Array</span>(repeating: <span class="number">1</span>, <span class="built_in">count</span>: <span class="type">Int</span>(outCount)) &#123;</div><div class="line">            <span class="comment">//3. 获取属性名</span></div><div class="line">            <span class="keyword">let</span> key = <span class="type">String</span>(cString: ivar_getName(ivars?[i]), encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</div><div class="line">            <span class="comment">//4. kvc获取属性值</span></div><div class="line">            <span class="keyword">let</span> v = value(forKey: key)</div><div class="line">            </div><div class="line">            <span class="comment">//5. 归档</span></div><div class="line">            aCoder.encode(v, forKey: key)</div><div class="line">            </div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6. 释放内存</span></div><div class="line">        free(ivars)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - 解档</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">        <span class="comment">//1. 获取属性列表 &amp; 属性数量</span></div><div class="line">        <span class="keyword">var</span> outCount: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">UserModel</span>.<span class="keyword">self</span>, &amp;outCount)</div><div class="line">        </div><div class="line">        <span class="comment">//2. 遍历属性列表</span></div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="type">Array</span>(repeating: <span class="number">1</span>, <span class="built_in">count</span>: <span class="type">Int</span>(outCount)) &#123;</div><div class="line">            <span class="comment">//3. 获取属性名</span></div><div class="line">            <span class="keyword">let</span> key = <span class="type">String</span>(cString: ivar_getName(ivars?[i]), encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)!</div><div class="line">            </div><div class="line">            <span class="comment">//4. 解档</span></div><div class="line">            <span class="keyword">let</span> v = aDecoder.decodeObject(forKey: key)</div><div class="line">            </div><div class="line">            <span class="comment">//5. kvc获取属性值</span></div><div class="line">            setValue(v, forKey: key)</div><div class="line">            </div><div class="line">            i += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//6. 释放内存</span></div><div class="line">        free(ivars)</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归档操作</span></div><div class="line"><span class="keyword">let</span> k_user_path = <span class="string">"<span class="subst">\(NSTemporaryDirectory()</span>)/user.user"</span></div><div class="line"><span class="keyword">let</span> isOk = <span class="type">NSKeyedArchiver</span>.archiveRootObject(userModel, toFile: k_user_path)</div><div class="line"><span class="keyword">if</span> isOk &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"归档成功 isOK"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//解档操作</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> user = <span class="type">NSKeyedUnarchiver</span>.unarchiveObject(withFile: k_user_path) <span class="keyword">as</span>? <span class="type">UserModel</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"UserModel: <span class="subst">\(user)</span> <span class="subst">\(user.name!)</span> <span class="subst">\(user.avatar!)</span> <span class="subst">\(user.age!)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_runtime-archive" target="_blank" rel="external">apple-stack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用runtime进行归档解档&quot;&gt;&lt;a href=&quot;#使用runtime进行归档解档&quot; class=&quot;headerlink&quot; title=&quot;使用runtime进行归档解档&quot;&gt;&lt;/a&gt;使用runtime进行归档解档&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不使用&lt;code&gt;runtime&lt;/code&gt;情况下，&lt;strong&gt;归档/解档&lt;/strong&gt;有什么缺点？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;runtime&lt;/code&gt;进行&lt;strong&gt;归档/解档&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;runtime&lt;/code&gt;进行&lt;strong&gt;归档/解档&lt;/strong&gt;好处是什么？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/categories/iOS/runtime/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="runtime" scheme="http://mengyueping.com/tags/runtime/"/>
    
      <category term="归档" scheme="http://mengyueping.com/tags/%E5%BD%92%E6%A1%A3/"/>
    
      <category term="解档" scheme="http://mengyueping.com/tags/%E8%A7%A3%E6%A1%A3/"/>
    
      <category term="序列化" scheme="http://mengyueping.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="反序列化" scheme="http://mengyueping.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发中使用到的设备ID及存储方案</title>
    <link href="http://mengyueping.com/2017/07/12/iOS-keyChain-IDFV/"/>
    <id>http://mengyueping.com/2017/07/12/iOS-keyChain-IDFV/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-07-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS设备ID"><a href="#iOS设备ID" class="headerlink" title="iOS设备ID"></a>iOS设备ID</h1><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li><code>UDID</code>、<code>MAC地址</code>、<code>UUID</code>、<code>IDFV</code>、<code>keychain</code>、<code>IDFA</code>能作为设备的唯一标识吗？</li>
<li>如何使用<code>IDFV</code>和<code>keychain</code>来标识安装<code>App</code>的设备？</li>
<li>如何来标识本公司所有<code>App</code>安装的设备？记录用户应用使用习惯？</li>
<li>用哪种<code>ID</code>追踪某一台设备是否在下载过某个应用?</li>
</ul>
<a id="more"></a>
<h1 id="UDID"><a href="#UDID" class="headerlink" title="UDID"></a>UDID</h1><p><code>Unique Device Identifier</code>是<code>iOS</code>设备的唯一识别码，由40个字符的字母和数字组成。在需要限制一台设备一个账号的应用中经常会用到。在<code>iOS5</code>中可以获取到设备的<code>UDID</code>，<code>iOS7</code>中已经完全的禁用了它。另外可以使用<code>iTunes</code>，<code>pp助手</code>或<code>itools</code>等软件查看iOS设备<code>UDID</code>（设备标识）。<code>iOS7</code>之前使用了获取到设备的<code>UDID</code>的<code>app</code>，如果在<code>iOS7</code>上运行，它不会返回设备的<code>UDID</code>，而是会返回一串字符串，以<code>FFFFFFFF</code>开头，跟着<code>identifierForVendor</code>的十六进制值。废弃。</p>
<blockquote>
<p><code>UDID</code>可以关联其它各种数据到相关设备上。例如，连接到开发者账号，可以允许在发布前让设备安装或测试应用；也可以让开发者获得<code>iOS</code>测试版进行体验。<code>apple</code>用<code>UDID</code>连接到<code>apple ID</code>，这些设备可以自动下载和安装从<code>App Store</code>购买的应用、保存从<code>iTunes</code>购买的音乐、帮助<code>apple</code>发送推送通知、即时消息。 在<code>iOS</code>应用早期，<code>UDID</code>被第三方应用开发者和网络广告商用来收集用户数据，可以用来关联地址、记录应用使用习惯等等以便推送精准广告。</p>
<p>为什么苹果反对开发人员使用<code>UDID</code>？</p>
<p>开发者把<code>UDID</code>跟用户的真实姓名、密码、住址、其它数据关联起来；网络窥探者会从多个应用收集这些数据，然后顺藤摸瓜得到这个人的许多隐私数据。同时大部分应用确实在频繁传输<code>UDID</code>和私人信息。 为了避免集体诉讼，苹果最终决定在<code>iOS 5</code>的时候，将这一惯例废除，开发者被引导生成一个唯一的标识符，只能检测应用程序，其他的信息不提供。现在应用试图获取<code>UDID</code>已被禁止且不允许上架。</p>
</blockquote>
<h1 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h1><p><code>MAC</code>地址在网络上用来区分设备的唯一性，接入网络的设备都有一个<code>MAC</code>地址，是唯一的，就如同我们身份证上的身份证号码，具有全球唯一性。一部<code>iPhone</code>上可能有多个<code>MAC</code>地址，包括<code>WIFI</code>的、<code>SIM</code>的等，所有的<code>iOS</code>设备都会有<code>WIFI</code>的<code>MAC</code>地址，因此只需获取<code>WIFI</code>的<code>MAC</code>地址就好了。但在<code>iOS7</code>之后，如果请求<code>Mac</code>地址都会返回一个固定值。废弃。</p>
<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><p><code>Universally Unique Identifier</code>，通用唯一标识符。<code>UUID</code>是指在一台机器上生成的数字，它是根据时间变化的。一个32位的十六进制序列，使用小横线来连接。适用<code>iOS6.0+</code>。</p>
<blockquote>
<p>类似这样：</p>
<p><code>26EA83F9-F510-4A08-BA4C-0CD431922D9C</code></p>
<p><code>1EF34611-4735-44C5-AC44-5D1ABD70B618</code></p>
</blockquote>
<p>代码生成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[NSUUID UUID].UUIDString;</div></pre></td></tr></table></figure>
<h1 id="IDFV"><a href="#IDFV" class="headerlink" title="IDFV"></a>IDFV</h1><p><code>iOS 6.0</code>系统新增用于替换获取<code>UDID</code>的接口。是给<code>Vendor</code>（应用提供商）标识用户用的，每个设备在所属同一个<code>Vender</code>的应用里，都有相同的值。其中的<code>Vender</code>是指应用提供商。</p>
<p>通过<code>Bundle ID</code>前三部分进行匹配（前三部分一般是<code>Organization</code>），如果相同就是同一个<code>Vender</code>，例如对于<code>com.mengyueping.www.appone</code>,<code>com.mengyueping.www.apptwo</code>这两个<code>BundleID</code>来说，就属于同一个<code>Vender</code>，共享同一个<code>IDFV</code>的值。另外，还与设备相关。<code>IDFV</code>的值是一定能取到的，非常适合于作为内部用户行为分析的主<code>id</code>，来标识用户，替代<code>UDID</code>。如果用户将属于此<code>Vender</code>的所有<code>App</code>卸载，则<code>IDFV</code>的值会被重置，即再重装此<code>Vender</code>的<code>App</code>，<code>IDFV</code>的值和之前不同。<code>iOS6.0</code>及以后。</p>
<p>代码生成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[[UIDevice currentDevice] identifierForVendor] UUIDString]</div></pre></td></tr></table></figure></p>
<p>模拟器中测试：</p>
<ul>
<li>1、同一个模拟器中运行不同<code>App</code>(<code>Bundle ID</code>不同)，<code>Bundle ID</code>前三部分相同（一般是公司域名反转，eg:<code>com.mengyueping.www</code>），即属于同一个家公司，获取到<code>IDFV</code>相同。</li>
<li>2、同一个模拟器中删除<code>App</code>后，再次安装运行同一个<code>App</code>，如果这个模拟器中有同一个公司的其他<code>App</code>(<code>Bundle ID</code>前三部分相同)，获取到<code>IDFV</code>相同。如果没有，则获取到<code>IDFV</code>不同。</li>
<li>3、同一个<code>App</code>，安装到不同的模拟器中，获取到<code>IDFV</code>不同。</li>
</ul>
<p>真机中测试：</p>
<ul>
<li>1、同一个真机中运行不同<code>App</code>(<code>Bundle ID</code>不同)，<code>Bundle ID</code>前三部分相同（一般是公司域名反转，eg:<code>com.mengyueping.www</code>），即属于同一个家公司，获取到<code>IDFV</code>相同。</li>
<li>2、同一个真机中删除<code>App</code>后，再次安装运行同一个<code>App</code>，如果这个真机中有同一个公司的其他<code>App</code>(<code>Bundle ID</code>前三部分相同)，获取到<code>IDFV</code>相同。如果没有，则获取到<code>IDFV</code>不同。</li>
<li>3、同一个<code>App</code>，安装到不同的真机中，获取到<code>IDFV</code>不同。</li>
</ul>
<p>也就是说，真机和模拟器相同。</p>
<h1 id="KeyChain"><a href="#KeyChain" class="headerlink" title="KeyChain"></a>KeyChain</h1><p><code>KeyChain</code>是<code>iOS</code>系统的一个加密容器，可以安全地存储小块数据。每个程序都可以往<code>KeyChain</code>中记录数据，而且只能读取到自己程序记录在<code>KeyChain</code>中的数据。并且<code>App</code>删除或升级，或系统升级，<code>KeyChain</code>中存储的数据都不会清除掉。除了系统还原、刷机会清除<code>KeyChain</code>中的数据。这样我们就可以将<code>IDFV</code>的字符串存储到<code>KeyChain</code>中，然后下次直接从<code>KeyChain</code>获取<code>IDFV</code>字符串。就算我们<code>App</code>删除再安装，依旧可以获取到与之前一致的<code>IDFV</code>（系统还原、刷机除外）。这样就可以作为设备的唯一标识。</p>
<p>另外，还可以通过使用<code>KeyChain</code>的<code>group</code>保证同一个<code>Vender</code>应用提供商的所有<code>App</code>针对同一台设备能够获取到相同的不变的<code>IDFV</code>，即同一个应用提供商的不同<code>App</code>，在同一台设备上拥有同一个设备标识。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>关于<code>KeyChain</code>操作是在<code>Security Framework</code>中，主要<code>API</code>在<code>&lt;Security/SecItem.h&gt;</code>头文件中。下面对常用<code>API</code>粗略介绍。</p>
<p>对<code>Keychain</code>存储的<code>Item</code>（条目）可以理解为包含三部分：</p>
<ul>
<li>一部分是标识<code>Keychain</code>存储的<code>Item</code>类型，有固定的键<code>Key</code>是<code>kSecClass</code>，<code>Value</code>是一个<code>CFStringRef</code>类型，有固定五个选择：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 键</div><div class="line">extern const CFStringRef kSecClass</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 对应的值</div><div class="line">extern const CFStringRef kSecClassInternetPassword;</div><div class="line">extern const CFStringRef kSecClassGenericPassword;  //一般密码类型的item（不同类型会采用不同的加密级别）</div><div class="line">extern const CFStringRef kSecClassCertificate;</div><div class="line">extern const CFStringRef kSecClassKey;</div><div class="line">extern const CFStringRef kSecClassIdentity;</div></pre></td></tr></table></figure>
<p><code>SecItem</code>有五类：<strong>通用密码</strong>、<strong>互联网密码</strong>、<strong>证书</strong>、<strong>密钥</strong>和<strong>身份</strong>。</p>
<ul>
<li>一部分是可搜索的属性键值，定义了<code>Keychain</code>的<code>Item</code>的一些属性，有固定的键<code>Key</code>，是<code>CFStringRef</code>类型，<code>Value</code>是自己定义的对象，做存储搜索用，常用的<code>key</code>有：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">extern const CFStringRef kSecAttrAccessGroup</div><div class="line">extern const CFStringRef kSecAttrService    // 用于描述该item的service属性</div><div class="line">extern const CFStringRef kSecAttrGeneric</div><div class="line">extern const CFStringRef kSecAttrAccount    // 指定item的account name。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">extern const CFStringRef kSecAttrAccessible // 就是设置item的属性访问方式的</div><div class="line">// 有固定的Value选择， 一般是 kSecAttrAccessibleAfterFirstUnlock 表示只要设备一旦设备启动解锁后就可以一直访问。</div></pre></td></tr></table></figure>
<ul>
<li>一部分是加密过的存储数据，通常是要存储的密码等。</li>
</ul>
<p>这三部分都是以<code>Key-Value</code>（键值对）的字典形式存储的。</p>
<p>对应<code>增、删、改、查</code>的<code>API</code>使用了<code>C</code>语言函数，如下：</p>
<ul>
<li>往<code>Keychain</code>里增加一条数据。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef * __nullable CF_RETURNS_RETAINED result)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>第一个参数表示数据。<br>第二个参数表示执行该操作后，指向刚添加的这个数据的引用，如果不需要用到这条数据，可以传入NULL。</p>
</blockquote>
<ul>
<li>查询<code>Keychain</code>里是否有符合条件的记录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef * __nullable CF_RETURNS_RETAINED result)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>第一个参数查询条件<br>第二个查询到结果的引用。</p>
</blockquote>
<ul>
<li>删除符号查询条件的记录。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSStatus SecItemDelete(CFDictionaryRef query)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>参数表示查询条件</p>
</blockquote>
<ul>
<li>更新Keychain里的记录。第一个参数表示查询条件，第二个表示当根据第一个查询条件后，用于更新的值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>第一个参数表示查询条件。<br>第二个表示当根据第一个查询条件后，用于更新的值。</p>
</blockquote>
<h2 id="Keychain-IDFV作为设备标识"><a href="#Keychain-IDFV作为设备标识" class="headerlink" title="Keychain+IDFV作为设备标识"></a><code>Keychain</code>+<code>IDFV</code>作为设备标识</h2><p>让同一开发商的所有<code>APP</code>在同一台设备上获取到设备标识相同，方便追踪用户，做数据统计。</p>
<blockquote>
<p>项目配置：<br>第一，在项目根目录下创建名字为<code>KeychainAccessGroups.plist</code>的<code>plist</code>文件，该文件的结构是一个字典，其中最顶层的节点是一个键为<code>keychain-access-groups</code>的<code>Array</code>，并且该<code>Array</code>中每一项都是一个描述分组的<code>NSString</code>。这个描述分组的<code>NSString</code>，就是<code>Keychain</code>配置字典中键<code>kSecAttrAccessGroup</code>所对应的值，就是要设置的组名。</p>
<p>第二，设置<code>Code signing Entitlements</code>，在<code>Target -&gt; Build Settings -&gt; Signing</code>这一栏下配置路径，即为<code>Code Signing Entitlements</code>设置键值<code>$(PROJECT)/KeychainAccessGroups.plist</code>。这样就可以保证每个<code>app</code>都能从<code>keychain</code>中读取出来同一个值。</p>
</blockquote>
<h3 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h3><p>封装方法获取/存储<code>IDFV</code>作为设备标识，如果<code>Keychain</code>中已经存储的有，就直接获取，如果没有就获取并存储：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> 获得/存储IDFV</div><div class="line"> </div><div class="line"> @return IDFV设备标识</div><div class="line"> */</div><div class="line">+ (NSString *)getToPutUUID</div><div class="line">&#123;</div><div class="line">    NSString *idfv = [self get:kIDFVKey];</div><div class="line">    if (!idfv) &#123;</div><div class="line">        idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];</div><div class="line">        [self put:kIDFVKey data:idfv];  //存储到Keychain</div><div class="line">    &#125;</div><div class="line">    return idfv;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对<code>Keychain</code>的基本操作封装，<code>增/删/改/查</code>代码实现类<code>MYPKeychain</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#pragma mark 增</div><div class="line">+ (void)put:(NSString *)key data:(id)data</div><div class="line">&#123;</div><div class="line">    NSMutableDictionary *keychainData = [self getKeychainBaseDict];</div><div class="line">    if ([self get:key]) &#123;</div><div class="line">        [self update:key data:data]; //更新</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    [keychainData setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(__bridge id)kSecValueData];</div><div class="line">    </div><div class="line">    OSStatus result = SecItemAdd((__bridge CFDictionaryRef)keychainData, NULL);</div><div class="line">    if (result == noErr) &#123;</div><div class="line">        NSLog(@&quot;SecItemAdd Success.\n&quot;);</div><div class="line">    &#125;else if(result == -34018) &#123;</div><div class="line">        NSAssert(NO, @&quot;add Failure,Internal error when a required entitlement isn&apos;t present..\n&quot;);</div><div class="line">    &#125;else &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#pragma mark 删</div><div class="line">+ (void)delete:(NSString *)key</div><div class="line">&#123;</div><div class="line">    NSMutableDictionary *keychainQuery = [self getKeychainBaseDict];</div><div class="line">    </div><div class="line">    OSStatus result = SecItemDelete((__bridge CFDictionaryRef)keychainQuery);</div><div class="line">    if (result == noErr) &#123;</div><div class="line">        NSLog(@&quot;SecItemDelete Success.\n&quot;);</div><div class="line">    &#125;else if(result == -34018) &#123;</div><div class="line">        NSAssert(NO, @&quot;add Failure,Internal error when a required entitlement isn&apos;t present..\n&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#pragma mark 改</div><div class="line">+ (void)update:(NSString *)key data:(id)data</div><div class="line">&#123;</div><div class="line">    NSMutableDictionary *keychainDict = [self getKeychainBaseDict];</div><div class="line">    </div><div class="line">    CFDictionaryRef attributes = nil;</div><div class="line">    OSStatus keychainErr = SecItemCopyMatching((__bridge CFDictionaryRef)keychainDict, (CFTypeRef *)&amp;attributes);</div><div class="line">    if (keychainErr == noErr)&#123;</div><div class="line">        </div><div class="line">        NSMutableDictionary *updateData = [NSMutableDictionary dictionaryWithDictionary:keychainDict];</div><div class="line">        [updateData setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(__bridge id)kSecValueData];</div><div class="line">        [updateData removeObjectForKey:(__bridge id)kSecClass];</div><div class="line">        [self updateWithData:updateData keychainQuery:keychainDict];</div><div class="line">        </div><div class="line">    &#125;else if (keychainErr == errSecItemNotFound) &#123; //如果在Keychain中没有找到，就创建</div><div class="line">        </div><div class="line">        [self put:key data:data];</div><div class="line">    &#125; else &#123;</div><div class="line">        NSAssert(NO, @&quot;Serious error.\n&quot;);</div><div class="line">        if (attributes) CFRelease(attributes);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#pragma mark 查</div><div class="line">/**</div><div class="line"> 获得存储的数据</div><div class="line"> */</div><div class="line">+ (id)get:(NSString *)key</div><div class="line">&#123;</div><div class="line">    id ret = nil;</div><div class="line">    NSMutableDictionary *keychainQuery = [self getKeychainQueryDict];</div><div class="line">    </div><div class="line">    CFDataRef keyData = NULL;</div><div class="line">    OSStatus keychainErr = SecItemCopyMatching((__bridge CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;keyData);</div><div class="line">    if (keychainErr == noErr) &#123;</div><div class="line">        ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge NSData *)keyData];</div><div class="line">    &#125;</div><div class="line">    if (keyData) &#123;</div><div class="line">        CFRelease(keyData);</div><div class="line">    &#125;</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 私有方法</div><div class="line">+ (void)updateWithData:(NSMutableDictionary *)updateData keychainQuery: (NSMutableDictionary *)query &#123;</div><div class="line">    //#if TARGET_IPHONE_SIMULATOR</div><div class="line">    //        // 模拟器的都有个默认的组“test”，删了，不然会出错</div><div class="line">    //        [updateData removeObjectForKey:(id)kSecAttrAccessGroup];</div><div class="line">    //#endif</div><div class="line">    </div><div class="line">    OSStatus result = SecItemUpdate((__bridge CFDictionaryRef)query, (__bridge CFDictionaryRef)updateData);</div><div class="line">    </div><div class="line">    if (result == noErr) &#123;</div><div class="line">        NSLog(@&quot;SecItemUpdate Success.\n&quot;);</div><div class="line">    &#125;else if(result == -34018) &#123;</div><div class="line">        NSAssert(NO, @&quot;add Failure,Internal error when a required entitlement isn&apos;t present..\n&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> keychain item的搜索属性配置</div><div class="line"> */</div><div class="line">+ (NSMutableDictionary *)getKeychainQueryDict</div><div class="line">&#123;</div><div class="line">    NSMutableDictionary *dict = [self getKeychainBaseDict];</div><div class="line">    [dict setObject:(id)kCFBooleanTrue forKey:(__bridge id)kSecReturnData];</div><div class="line">    [dict setObject:(__bridge id)kSecMatchLimitOne forKey:(__bridge id)kSecMatchLimit];</div><div class="line">    </div><div class="line">    return dict;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> keychain item的存储数据配置</div><div class="line"> */</div><div class="line">+ (NSMutableDictionary *)getKeychainBaseDict</div><div class="line">&#123;</div><div class="line">    NSDictionary *dict =</div><div class="line">    @&#123;</div><div class="line">      (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,</div><div class="line">      (__bridge id)kSecAttrService: kSeachAttrService,</div><div class="line">      (__bridge id)kSecAttrAccount: kSeachAttrAccount,</div><div class="line">      (__bridge id)kSecAttrAccessible: (__bridge id)kSecAttrAccessibleAfterFirstUnlock,</div><div class="line">      (__bridge id)kSecAttrAccessGroup: kAccessGroup</div><div class="line">      &#125;;</div><div class="line">    </div><div class="line">    return [NSMutableDictionary dictionaryWithDictionary:dict];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="IDFA"><a href="#IDFA" class="headerlink" title="IDFA"></a>IDFA</h1><p><code>advertising Identifier</code>，广告标示符，广告id，适用于广告推广，<code>App</code>换量等跨应用的用户追踪等。在同一个设备上的所有<code>App</code>都会取到相同的值，是苹果专门给应用提供商用来追踪用户而设的。<code>iOS</code>设备用户可以设置<code>限制广告跟踪</code>和<code>还原广告标识符</code>。(设置 -&gt; 隐私 -&gt; 广告 -&gt; 限制广告跟踪/还原广告标识符…)（Settings -&gt; Privacy -&gt; Advertising -&gt; Limit Ad Tracking/Reset Advertising Identifier…）。iOS6.0+。</p>
<ul>
<li>同一台<code>iOS</code>设备上的所有<code>App</code>获得的<code>IDFA</code>都是相同的。<code>App</code>卸载再安装，获得的<code>IDFA</code>依然相同。</li>
<li><code>Reset Advertising Identifier...</code>，<code>IDFA</code>会被重置。</li>
<li>在模拟器中，<code>Limit Ad Tracking</code>打开和关闭，<code>IDFA</code>都会被重置。</li>
<li>在真机中，<code>iOS10</code>系统，<code>Limit Ad Tracking</code>功能打开，<code>IDFA</code>会被重置为无意义的<code>00000000-0000-0000-0000-000000000000</code>，再次关闭重新生成新的值。</li>
</ul>
<p>获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#import &lt;AdSupport/AdSupport.h&gt;</div><div class="line"></div><div class="line">[[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</div></pre></td></tr></table></figure>
<p>注意：由于<code>IDFA</code>会出现取不到的情况，故不能作为业务分析的主<code>id</code>，来识别用户。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_KeyChain-IDFV/OC-KeyChain-IDFV" target="_blank" rel="external">apple-stack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS设备ID&quot;&gt;&lt;a href=&quot;#iOS设备ID&quot; class=&quot;headerlink&quot; title=&quot;iOS设备ID&quot;&gt;&lt;/a&gt;iOS设备ID&lt;/h1&gt;&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UDID&lt;/code&gt;、&lt;code&gt;MAC地址&lt;/code&gt;、&lt;code&gt;UUID&lt;/code&gt;、&lt;code&gt;IDFV&lt;/code&gt;、&lt;code&gt;keychain&lt;/code&gt;、&lt;code&gt;IDFA&lt;/code&gt;能作为设备的唯一标识吗？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;IDFV&lt;/code&gt;和&lt;code&gt;keychain&lt;/code&gt;来标识安装&lt;code&gt;App&lt;/code&gt;的设备？&lt;/li&gt;
&lt;li&gt;如何来标识本公司所有&lt;code&gt;App&lt;/code&gt;安装的设备？记录用户应用使用习惯？&lt;/li&gt;
&lt;li&gt;用哪种&lt;code&gt;ID&lt;/code&gt;追踪某一台设备是否在下载过某个应用?&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="IDFV" scheme="http://mengyueping.com/tags/IDFV/"/>
    
      <category term="KeyChain" scheme="http://mengyueping.com/tags/KeyChain/"/>
    
      <category term="UDID" scheme="http://mengyueping.com/tags/UDID/"/>
    
      <category term="IDFA" scheme="http://mengyueping.com/tags/IDFA/"/>
    
  </entry>
  
  <entry>
    <title>JSExport实现JS调用OC/Swift</title>
    <link href="http://mengyueping.com/2017/07/02/iOS-JSExport-JSCallOC-Swift/"/>
    <id>http://mengyueping.com/2017/07/02/iOS-JSExport-JSCallOC-Swift/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2017-07-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li><code>JSExport</code>如何使用？</li>
<li>如何使用<code>JSExport</code>调用自定义的<code>OC/Swift</code>类属性?</li>
<li>如何使用<code>JSExport</code>调用自定义的<code>OC/Swift</code>类的方法？</li>
<li>如何使用<code>JSExport</code>调用系统或外部引用库的<code>OC/Swift</code>类的属性和方法？</li>
<li><code>JSManagedValue</code>的作用？</li>
</ul>
<p>若想了解如何通过<code>UIWebView</code>、<code>WKWebView</code>、<code>JavaScriptCore</code>的<code>JSContext</code>来执行<code>JavaScript</code>代码，使用<code>UIWebView</code>、<code>WKWebView</code>监听<code>JS</code>函数调用，<code>WKWebView</code>与<code>JS</code>之间的通信，以及通过<code>JavaScriptCore</code>的<code>JSContext</code>使<code>OC/Swift</code>中<code>Block/Closure</code>转换成<code>JS</code>函数以达到<code>JS</code>调用<code>OC</code>效果，可以参看：<a href="http://www.mengyueping.com/2016/10/16/iOS-callJavaScript/" target="_blank" rel="external">Objective-C/Swift与JavaScript交互</a>。</p>
<a id="more"></a>
<h1 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h1><blockquote>
<p><code>JSExport</code>：是一个协议，没有声明任何属性和方法。可以自定义一个协议，继承自<code>JSExport</code>。我们可以在自定义的协议里面声明属性、方法，继承该协议的<code>OC/Swift</code>对象会把协议中的属性和方法提供给<code>JS</code>调用。<code>JSExport</code>主要是用于将<code>OC/Swift</code>中定义的<code>Model</code>类等引入到<code>JavaScript</code>中，便于在<code>JS</code>中使用这种对象和对象的属性、方法。</p>
</blockquote>
<h1 id="JSExport实现JS调用原生对象属性和方法"><a href="#JSExport实现JS调用原生对象属性和方法" class="headerlink" title="JSExport实现JS调用原生对象属性和方法"></a>JSExport实现JS调用原生对象属性和方法</h1><p>通过<code>OC/Swift</code>类实现<code>JSExport</code>协议，来实现<code>JS</code>对象直接调用<code>OC/Swift</code>对象里面的方法和属性。<code>OC/Swift</code>如何实现<code>JSExport</code>协议？需要自定义一个协议继承自<code>JSExport</code>协议，在自定义协议中声明<code>JS</code>要调用的属性和方法。然后让<code>OC/Swift</code>类遵守自定义协议并实现协议中的定义的属性和方法。然后把<code>OC/Swift</code>对象存储到<code>JSContext</code>中，这样在<code>JS</code>运行环境中就可以调用<code>OC/Swift</code>对象的属性和方法了。</p>
<h2 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// MYPJSExport.h</div><div class="line">/*</div><div class="line"> * 自定义协议继承自 &lt;JSExport&gt;</div><div class="line"> */</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</div><div class="line"></div><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">@property (nonatomic, assign) NSInteger sum;</div><div class="line">JSExportAs(add, - (NSInteger)add:(NSInteger)a b:(NSInteger)b);</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//在MYPObject.m中</div><div class="line">@synthesize sum = _sum;</div><div class="line">/**</div><div class="line"> 实现协议方法</div><div class="line"> */</div><div class="line">- (NSInteger)add:(NSInteger)a b:(NSInteger)b</div><div class="line">&#123;</div><div class="line">    return a + b;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> 重写setter方法方便打印信息</div><div class="line"> */</div><div class="line">- (void)setSum:(NSInteger)sum</div><div class="line">&#123;</div><div class="line">    _sum = sum;</div><div class="line">    NSLog(@&quot;--%@&quot;, @(sum));</div><div class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]); // main</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//在ViewController.m</div><div class="line">//初始化</div><div class="line">self.obj = [[MYPObject alloc] init];</div><div class="line">self.context = [[JSContext alloc] init];</div><div class="line">self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">    [JSContext currentContext].exception = exception;</div><div class="line">    NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//将OC对象obj添加到context中</div><div class="line">self.context[@&quot;OCobj&quot;] = self.obj;</div><div class="line">//使用JS调用存储在context中的OC对象obj的方法，并将结果赋值给OC对象obj的sum属性</div><div class="line">[self.context evaluateScript:@&quot;OCobj.sum = OCobj.add(2,3)&quot;]; //OC对象属性值改变是在主线程</div><div class="line">//更改了OC对象 self.obj 的属性值sum , 可见，都是强引用。</div><div class="line">NSLog(@&quot;self.obj.sum: %ld&quot;,(long)self.obj.sum);  // self.obj.sum: 5</div></pre></td></tr></table></figure>
<h2 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum: <span class="type">Int</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doNothing</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">squared</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, num2: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line"><span class="comment">//    func add(_ num1: Int, num2: Int) -&gt; Int //第一个外部参数省略，是没办法使用JS方法表达   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MYPObject</span>: <span class="title">NSObject</span>, <span class="title">MYPJSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum: <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"newValue: <span class="subst">\(newValue)</span>  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"oldValue: <span class="subst">\(oldValue)</span>  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> a + b</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doNothing</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"doNothing--"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">squared</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num * num</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num + <span class="number">10</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num1 * num2</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//不成立</span></div><div class="line"><span class="comment">//    func add(_ num1: Int, num2: Int) -&gt; Int &#123;</span></div><div class="line"><span class="comment">//        return (num1 + num2) * 2</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在ViewController.swift中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj: <span class="type">MYPObject</span> = <span class="type">MYPObject</span>()</div><div class="line">    <span class="keyword">let</span> context:<span class="type">JSContext</span> = <span class="type">JSContext</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exce = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context!.exception = exce</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出exception: <span class="subst">\(exce)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"++++++Begin Log++++++"</span>)</div><div class="line">            <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">for</span> jsVal <span class="keyword">in</span> args! &#123;</div><div class="line">                <span class="built_in">print</span>(jsVal)</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"---End Log------"</span>)</div><div class="line">        &#125;</div><div class="line">        context.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line">        context.setObject(obj, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"Swiftobj"</span>))</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.doNothing(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.squared(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.add(5,5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum1Num2(10,10))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum1(10,10))"</span>))</div><div class="line"><span class="comment">//        print(context.evaluateScript("log(Swiftobj.addWithNum2(10,10))")) // 'Swiftobj.addWithNum2' is undefined</span></div><div class="line">        </div><div class="line">        context.evaluateScript(<span class="string">"Swiftobj.sum = Swiftobj.add(2,3)"</span>)</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.sum)"</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.sum: <span class="subst">\(obj.sum)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JSExport实现JS调用系统对象属性和方法"><a href="#JSExport实现JS调用系统对象属性和方法" class="headerlink" title="JSExport实现JS调用系统对象属性和方法"></a>JSExport实现JS调用系统对象属性和方法</h1><p>通过<code>&lt;objc/runtime.h&gt;</code>运行时，可以动态的为一个系统类、或者外部导入的库类添加一个协议，这样我们就可以让这些已经定义实现的类遵守我们的<code>JSExport</code>子协议，从而可以在<code>JS</code>中调用这些类在协议中声明的属性和方法。如下：为系统<code>UITextField</code>类动态添加自定义的<code>JSExport</code>子协议，让其能够通过<code>JSContext</code>环境中运行的<code>JS</code>脚本运行修改<code>UITextField</code>对象的<code>text</code>属性。</p>
<h2 id="OC版本-1"><a href="#OC版本-1" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        function btnClick()&#123;</div><div class="line">            log("打印自定义对象："+jsObj.text);</div><div class="line">            //jsObj.text = 333; //子线程更新UI，Crash</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"log()"</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"打印log"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"btnClick()"</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"点击H5的按钮标签，修改iOS的UITextField的输入值"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//自定义协议继承自 &lt;JSExport&gt;</div><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">@property (nonatomic, copy) NSString *text;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">// 在ViewController.m中</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</div><div class="line">    NSURL *url = [NSURL fileURLWithPath:path];</div><div class="line">    [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line">    </div><div class="line">    //为UITextField类动态添加协议</div><div class="line">    class_addProtocol([UITextField class], @protocol(MYPJSExport));</div><div class="line"></div><div class="line">    // 注意：不能在JS脚本中更改UI控件类的UI属性，因为JS的运行是在子线程，不能对UI进行更新。</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)btnClick:(UIButton *)sender</div><div class="line">&#123;</div><div class="line">    self.context = [[JSContext alloc] init];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    self.context[@&quot;log&quot;] = ^() &#123;</div><div class="line">        NSLog(@&quot;---Begin Log---&quot;);</div><div class="line">        NSArray *arr= JSContext.currentArguments;</div><div class="line">        for (int i=0; i&lt;arr.count; i++) &#123;</div><div class="line">            NSLog(@&quot;arr[%d] = %@&quot;,i, arr[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,[NSThread currentThread]); // 主线程</div><div class="line">        NSLog(@&quot;---End Log---&quot;);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    // 实现：可以在JS中拿到原生控件的属性值。</div><div class="line">    self.context[@&quot;textField&quot;] = self.textField;</div><div class="line">    NSString *script = @&quot;var text = textField.text;&quot;;</div><div class="line">    [self.context evaluateScript:script];</div><div class="line">    [self.context evaluateScript:@&quot;log(text)&quot;]; // 此处执行log函数，log内部依然是主线程。</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)addBtnClick:(UIButton *)sender</div><div class="line">&#123;</div><div class="line">    NSString *script = @&quot;var num = parseInt(textField.text, 10);&quot;</div><div class="line">    &quot;++num;&quot;</div><div class="line">    &quot;textField.text = num;&quot;;</div><div class="line">    [self.context evaluateScript: script];</div><div class="line">    </div><div class="line">    //问题：JS执行环境都是在子线程，修改UITextField的text属性值是更新UI，子线程更新UI会Crash。为什么此处更新成功了？</div><div class="line">    //猜想：JS调用OC，OC执行依然在主线程。</div><div class="line">    //证实：使用OC执行JS脚本，JS脚本调用OC，对OC对象属性值改变，是在主线程发生的。</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过-evaluateScript: 方法，OC执行JS脚本，此时JS脚本的执行是在主线程，可以通过JS更新原生控件UI。</div><div class="line">// JS 直接在Html中调用OC定义的JS函数，运行是在子线程。</div><div class="line"></div><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    self.context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    self.context[@&quot;log&quot;] = ^() &#123;</div><div class="line">        NSLog(@&quot;---Begin Log---&quot;);</div><div class="line">        </div><div class="line">        NSArray *arr= JSContext.currentArguments;</div><div class="line">        for (int i=0; i&lt;arr.count; i++) &#123;</div><div class="line">            NSLog(@&quot;arr[%d] = %@&quot;,i, arr[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,[NSThread currentThread]); //子线程</div><div class="line">        NSLog(@&quot;---End Log---&quot;);</div><div class="line">    &#125;;</div><div class="line">    //注意：直接在Html中调用OC定义的JS函数，运行是在子线程。</div><div class="line">    </div><div class="line">    // 存储OC对象，JS调用OC，JS脚本中获得OC对象的属性值。</div><div class="line">    JSValue *jsObj = [JSValue valueWithObject:self.textField inContext:self.context]; //把OC对象转为JS对象</div><div class="line">    JSManagedValue *managedValue = [JSManagedValue managedValueWithValue:jsObj];</div><div class="line">    [self.context.virtualMachine addManagedReference:managedValue withOwner:self];</div><div class="line">    self.context[@&quot;jsObj&quot;] = jsObj; // 存储JS对象</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Swift版本-1"><a href="#Swift版本-1" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> text: <span class="type">String</span>? &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> context: <span class="type">JSContext</span>? = &#123;</div><div class="line">        <span class="keyword">let</span> context = <span class="type">JSContext</span>()</div><div class="line">        <span class="keyword">return</span> context</div><div class="line">    &#125;()</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> textField: <span class="type">UITextField</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context?.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exception = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context?.exception = exception</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出错误：<span class="subst">\(exception)</span>"</span>)</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"----Begin Log----"</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Thread.current: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> arguments = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> args = arguments <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="keyword">var</span> num = <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> arg <span class="keyword">in</span> args &#123;</div><div class="line">                num += <span class="number">1</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"arg[<span class="subst">\(num)</span>]: <span class="subst">\(arg)</span>"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"----End Log----"</span>)</div><div class="line">        &#125;</div><div class="line">        context?.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line">        </div><div class="line">        <span class="comment">//为UITextField类动态添加协议</span></div><div class="line">        class_addProtocol(<span class="type">UITextField</span>.<span class="keyword">self</span>, <span class="type">MYPJSExport</span>.<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">()</span></span> &#123;</div><div class="line">        context?.setObject(textField, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"textField"</span>))</div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"log(textField.text)"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> script = <span class="string">"var num = parseInt(textField.text, 10); ++num; textField.text = num;"</span></div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(script)</div><div class="line">        </div><div class="line">        <span class="comment">//注音：注意JS脚本调用OC/Swift是在子线程还是主线程，如果是更新原生UI，需要注意在主线程更新。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JSManagedValue"><a href="#JSManagedValue" class="headerlink" title="JSManagedValue"></a>JSManagedValue</h1><p>关于内存管理，<code>OC/Swfit</code>使用<code>ARC</code>，而<code>JS</code>使用的是垃圾回收机制，且<code>JS</code>中所有的引用都是强引用，不过<code>JS</code>的循环引用，垃圾回收会帮他们打破。在使用<code>JavaScriptCore</code>里面提供的<code>API</code>时，关于<code>OC/Swift</code>和<code>JS</code>对象之间内存管理，需要注意，一是不要在<code>Block/Closure</code>里面直接使用外部的<code>JSContext</code>对象和外部的<code>JSValue</code>对象；二是<code>OC/Swift</code>对象不要用属性直接保存<code>JSValue</code>对象，太容易循环引用。可以使用<code>JSManagedValue</code>，<code>JSManagedValue</code>帮我们保存了<code>JSValue</code>，这个是弱引用，但必须保证保存的<code>JS</code>对象在<code>JS</code>环境中是存在的。三是不要在不同的<code>JSVirtualMachine</code>之间进行传递<code>JS</code>对象。一个<code>JSVirtualMachine</code>可以运行多个<code>JSContext</code>对象，由于在同一个堆内存和同一个垃圾回收下，所以相互之间传值是没有问题的。但是如果在不同的<code>JSVirtualMachine</code>之间传值，垃圾回收就不知道他们之间的关系了，可能会引起异常。</p>
<p>有时候为了方便调用，要全局保存<code>JSValue</code>对象，就可以通过全局保存<code>JSManagedValue</code>变量，来达到全局拿到<code>JSValue</code>对象的目的，这样可以避免产生循环引用。这也是<code>JSManagedValue</code>主要用途，解决<code>JSValue</code>对象在<code>OC/Swift</code>堆上的安全引用问题。把<code>JSValue</code>保存进<code>OC/Swift</code>堆对象中是不正确的，这很容易引发循环引用，而导致<code>JSContext</code>不能释放。</p>
<h2 id="OC版本-2"><a href="#OC版本-2" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">//注意：在OC中，保存JS的对象，不要使用JSValue对象作为属性，容易循环引用，替代使用JSManagedValue对象。</div><div class="line">//@property (nonatomic, strong) JSValue *jsValue;</div><div class="line"></div><div class="line">//JSManagedValue对象本身是弱引用，来打破强引用，可以用来保存JSValue对象（JS对象）</div><div class="line">@property (nonatomic, strong) JSManagedValue *managedValue;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@implementation MYPObject</div><div class="line">@synthesize managedValue = _managedValue;</div><div class="line"></div><div class="line">- (void)setManagedValue:(JSManagedValue *)managedValue</div><div class="line">&#123;</div><div class="line">    _managedValue = managedValue;</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//在ViewController.h 中</div><div class="line">    self.obj = [[MYPObject alloc] init];</div><div class="line">    self.context = [[JSContext alloc] init];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    self.context[@&quot;OCobj&quot;] = self.obj;</div><div class="line">    [self.context evaluateScript: @&quot;function callback()&#123;&#125;;&quot;];</div><div class="line">    </div><div class="line">    //把JS对象存储为全局属性，方便OC下次调用JS</div><div class="line">    self.obj.managedValue = [JSManagedValue managedValueWithValue:self.context[@&quot;callback&quot;]];</div><div class="line">    [JSContext.currentContext.virtualMachine addManagedReference:self.obj.managedValue withOwner:self];</div><div class="line">    NSLog(@&quot;self.obj.managedValue.value: %@&quot;, self.obj.managedValue.value); // function callback()&#123;&#125;</div><div class="line">    // 用 JSManagedValue来保存 JSValue</div><div class="line">    </div><div class="line">    // 如果直接使用JSValue对象作为属性，调用JS方法，进行赋值，JS对象保留了传进来的obj，最后，JS将自己的回调callback赋值给了obj，方便obj下次回调给JS；由于JS那边保存了obj，而且obj这边也保留了JS的回调。这样就形成了循环引用。</div><div class="line">    </div><div class="line">    //注意：只有在协议中定义的方法和属性才能够在JS中被调用。</div></pre></td></tr></table></figure>
<h2 id="Swift版本-2"><a href="#Swift版本-2" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> managedValue: <span class="type">JSManagedValue</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MYPObject</span>: <span class="title">NSObject</span>, <span class="title">MYPJSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> text: <span class="type">String</span>?</div><div class="line">    </div><div class="line"><span class="comment">//    var managedValue: JSManagedValue = managedValue</span></div><div class="line">    <span class="keyword">var</span> managedValue: <span class="type">JSManagedValue</span>? &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"newValue: <span class="subst">\(String(describing: newValue)</span>)  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"oldValue: <span class="subst">\(String(describing: oldValue)</span>)  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj = <span class="type">MYPObject</span>()</div><div class="line">    <span class="keyword">let</span> context = <span class="type">JSContext</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context?.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exce = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context!.exception = exce</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出exception: <span class="subst">\(exce)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        context?.setObject(obj, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"SwiftObj"</span>))</div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"function callback()&#123;&#125;;"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">// 用 JSManagedValue来保存 JSValue</span></div><div class="line">        <span class="comment">// 把JS对象存储为全局属性，方便OC下次调用JS</span></div><div class="line">        obj.managedValue = <span class="type">JSManagedValue</span>.<span class="keyword">init</span>(value: context?.objectForKeyedSubscript(<span class="string">"callback"</span>))</div><div class="line">        context?.virtualMachine.addManagedReference(obj.managedValue, withOwner: <span class="keyword">self</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.managedValue.value: <span class="subst">\(String(describing: obj.managedValue?.value)</span>)"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//注意：只有在协议中定义的方法和属性才能够在JS中被调用。</span></div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"SwiftObj.text = '测试';"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.text: <span class="subst">\(String(describing: obj.text)</span>)"</span>) <span class="comment">// obj.text: nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>JSVirtualMachine</code>对象通过方法<code>- (void)addManagedReference:(id)object withOwner:(id)owner</code>来建立<code>JSManagedValue</code>对象与控制器<code>self</code>之间的弱引用关系。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_JavaScript/iOS-JavaScriptCore-JSExport" target="_blank" rel="external">apple-stack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSExport&lt;/code&gt;如何使用？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用自定义的&lt;code&gt;OC/Swift&lt;/code&gt;类属性?&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用自定义的&lt;code&gt;OC/Swift&lt;/code&gt;类的方法？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用系统或外部引用库的&lt;code&gt;OC/Swift&lt;/code&gt;类的属性和方法？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSManagedValue&lt;/code&gt;的作用？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若想了解如何通过&lt;code&gt;UIWebView&lt;/code&gt;、&lt;code&gt;WKWebView&lt;/code&gt;、&lt;code&gt;JavaScriptCore&lt;/code&gt;的&lt;code&gt;JSContext&lt;/code&gt;来执行&lt;code&gt;JavaScript&lt;/code&gt;代码，使用&lt;code&gt;UIWebView&lt;/code&gt;、&lt;code&gt;WKWebView&lt;/code&gt;监听&lt;code&gt;JS&lt;/code&gt;函数调用，&lt;code&gt;WKWebView&lt;/code&gt;与&lt;code&gt;JS&lt;/code&gt;之间的通信，以及通过&lt;code&gt;JavaScriptCore&lt;/code&gt;的&lt;code&gt;JSContext&lt;/code&gt;使&lt;code&gt;OC/Swift&lt;/code&gt;中&lt;code&gt;Block/Closure&lt;/code&gt;转换成&lt;code&gt;JS&lt;/code&gt;函数以达到&lt;code&gt;JS&lt;/code&gt;调用&lt;code&gt;OC&lt;/code&gt;效果，可以参看：&lt;a href=&quot;http://www.mengyueping.com/2016/10/16/iOS-callJavaScript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C/Swift与JavaScript交互&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/categories/iOS/JavaScriptCore/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="JavaScript" scheme="http://mengyueping.com/tags/JavaScript/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/tags/JavaScriptCore/"/>
    
      <category term="JSExport" scheme="http://mengyueping.com/tags/JSExport/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="JSManagedValue" scheme="http://mengyueping.com/tags/JSManagedValue/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C/Swift与JavaScript交互</title>
    <link href="http://mengyueping.com/2016/10/16/iOS-callJavaScript/"/>
    <id>http://mengyueping.com/2016/10/16/iOS-callJavaScript/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2017-07-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OC-Swift与JavaScript交互"><a href="#OC-Swift与JavaScript交互" class="headerlink" title="OC/Swift与JavaScript交互"></a>OC/Swift与JavaScript交互</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><code>iOS</code>中如何加载<code>HTML</code>页面？（包括<code>Objective-C</code>和<code>Swift</code>）</li>
<li><code>iOS</code>中如何去执行一段<code>JavaScript</code>代码？（包括<code>Objective-C</code>和<code>Swift</code>）</li>
<li><code>iOS</code>中为什么要使用原生语言去执行一段<code>JavaScript</code>代码？</li>
<li><code>iOS</code>中如何监听到<code>HTML</code>页面中触发的事件？（<code>JavaScript</code>函数的触发）</li>
<li><code>iOS</code>混合开发中，当<code>JavaScript</code>函数触发时，能否发送一些数据给<code>iOS</code>原生，如何发送？</li>
<li><code>iOS</code>混合开发中，当<code>JavaScript</code>函数触发时，能否让<code>OC/Swift</code>执行一些操作，比如调用系统相机等？<a id="more"></a>
</li>
</ul>
<h1 id="iOS中加载HTML页面"><a href="#iOS中加载HTML页面" class="headerlink" title="iOS中加载HTML页面"></a>iOS中加载HTML页面</h1><h2 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h2><h3 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h3><p><code>UIWebView</code>是<code>iOS 2.0</code>就有的一个UI控件，是用来加载<code>HTML</code>页面的，属于<code>UIKit</code>框架。基本使用比较简单，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//UI控件设置</div><div class="line">  UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">  webView.delegate = self;</div><div class="line">  [self.view addSubview:webView];</div><div class="line">  NSURL *htmlUrl = [NSURL URLWithString:@&quot;https://www.baidu.com&quot;];</div><div class="line">  NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line">  [webView loadRequest:request];</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 实现代理 UIWebViewDelegate</div><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView&#123;</div><div class="line">	//网页开始加载时调用</div><div class="line">&#125;</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView&#123;</div><div class="line">	//网页加载完成时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error&#123;</div><div class="line">	//网页加载失败时调用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UI控件设置</span></div><div class="line">  <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">  webView.delegate = <span class="keyword">self</span></div><div class="line">  view.addSubview(webView)</div><div class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.baidu.com"</span>)!</div><div class="line">  webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="comment">//网页开始加载时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="comment">//网页加载完成时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, didFailLoadWithError error: Error)</span></span> &#123;</div><div class="line">        <span class="comment">//网页加载失败时调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><h3 id="OC版本-1"><a href="#OC版本-1" class="headerlink" title="OC版本"></a>OC版本</h3><p><code>WKWebView</code>是<code>iOS 8.0</code>出现的一个UI控件，是用来加载<code>HTML</code>页面的，属于<code>WebKit</code>框架。基本使用，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;https://www.baidu.com&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//需要遵守协议 WKNavigationDelegate, WKUIDelegate</div><div class="line">/*</div><div class="line">WKNavigationDelegate实现：</div><div class="line">首次载入调用顺序：didStartProvisionalNavigation -&gt; didCommitNavigation -&gt; didFinishNavigation</div><div class="line">重定向：didStartProvisionalNavigation -&gt; didReceiveServerRedirectForProvisionalNavigation -&gt; didCommitNavigation -&gt; didFinishNavigation</div><div class="line">*/</div><div class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面开始加载时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didCommitNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //当内容开始返回时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面加载完成之后调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //服务器重定向页面时调用,并且在 didStartProvisionalNavigation 之后，didCommitNavigation之前调用。</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面加载失败时调用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-1"><a href="#Swift版本-1" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line"><span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">webView.uiDelegate = <span class="keyword">self</span></div><div class="line">view.addSubview(webView)</div><div class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.baidu.com"</span>)!</div><div class="line">webView.load(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要遵守协议 WKNavigationDelegate, WKUIDelegate</span></div><div class="line"><span class="comment">/*</span></div><div class="line">顺序：didStartProvisionalNavigation -&gt; didCommit -&gt; didFinish</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面开始加载时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//当内容开始返回时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面加载完成之后调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//服务器重定向页面时调用.</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面加载失败时调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中执行一段JavaScript代码"><a href="#iOS中执行一段JavaScript代码" class="headerlink" title="iOS中执行一段JavaScript代码"></a>iOS中执行一段JavaScript代码</h1><p>在<code>iOS</code>中使用原生语言去执行<code>JavaScript</code>脚本，是为了对已经加载好的<code>HTML</code>的<code>DOM</code>元素的增、删、改、查。同时，还可以通过执行<code>JavaScript</code>脚本获取<code>DOM</code>对象，进而获取一些<code>HTML</code>的页面信息，比如，通过脚本<code>document.title</code>可以获取当前页面的<code>title</code>,通过脚本<code>document.location.href</code>可以获取当前加载的<code>HTML</code>页面的<code>url</code>。<br>通常这些操作的方法是：使用<code>UIWebView</code>或<code>WKWebView</code>的对象方法执行<code>JavaScript</code>脚本。通常这些操作的时机是：在<code>HTML</code>页面加载完成的原生回调中进行的。</p>
<h2 id="使用UIWebView执行JS代码"><a href="#使用UIWebView执行JS代码" class="headerlink" title="使用UIWebView执行JS代码"></a>使用UIWebView执行JS代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--要加载的HTML文件 index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-2"><a href="#OC版本-2" class="headerlink" title="OC版本"></a>OC版本</h3><p>使用<code>UIWebView</code>的对象方法<code>- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</code>来执行一段<code>JavaScript</code>代码。一般是在<code>UIWebView</code>的代理方法：<code>- (void)webViewDidFinishLoad:(UIWebView *)webView;</code>中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">webView.delegate = self;</div><div class="line">webView.scrollView.hidden = YES;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">webView.scalesPageToFit = YES;</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line">[webView loadRequest:request];</div><div class="line"></div><div class="line">//添加网络加载指示器</div><div class="line">UIActivityIndicatorView *indicatorView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];</div><div class="line">indicatorView.center = CGPointMake(200, 200);</div><div class="line">[self.view addSubview:indicatorView];</div><div class="line">self.indicatorView = indicatorView;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 代理</div><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView</div><div class="line">&#123;//网页开始加载时调用</div><div class="line">    //指示器开始显示动画</div><div class="line">    [self.indicatorView startAnimating];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;//网页加载完成时调用</div><div class="line">    </div><div class="line">    //指示器结束显示动画</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.25 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        webView.scrollView.hidden = NO;</div><div class="line">        [self.indicatorView stopAnimating];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    //注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</div><div class="line">    NSString *jsStr_1 = @&quot;alert(&apos;JS弹框&apos;)&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_1];</div><div class="line">    </div><div class="line">    NSString *jsStr_2 = @&quot;var p = document.getElementsByTagName(&apos;p&apos;)[0];&quot;;</div><div class="line">    NSString *jsStr_3 = @&quot;p.innerHTML = &apos;使用JavaScript很🐂&apos;;&quot;;</div><div class="line">    NSString *jsStr_4 = @&quot;p.style.background = &apos;red&apos;;document.body.appendChild(p);&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_2];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_3];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_4];</div><div class="line">    </div><div class="line">    NSString *jsStr_5 = @&quot;var li = document.createElement(&apos;li&apos;);li.innerHTML=&apos;执行js代码，dom操作元素&apos;;li.style.background = &apos;gray&apos;;document.body.appendChild(li);&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_5];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-2"><a href="#Swift版本-2" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//网络加载指示器</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> indicatorView: <span class="type">UIActivityIndicatorView</span> = &#123;</div><div class="line">        <span class="keyword">var</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle: .whiteLarge)</div><div class="line">        indicator.center = <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">200</span>)</div><div class="line">        <span class="keyword">return</span> indicator</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">        webView.delegate = <span class="keyword">self</span></div><div class="line">        webView.scrollView.isHidden = <span class="literal">true</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.scalesPageToFit = <span class="literal">true</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">        </div><div class="line">        <span class="comment">//添加网络加载指示器</span></div><div class="line">        view.addSubview(indicatorView)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;<span class="comment">//网页开始加载时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器开始显示动画</span></div><div class="line">        indicatorView.startAnimating()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;<span class="comment">//网页加载完成时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器结束显示动画</span></div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.25</span>) &#123; </div><div class="line">            webView.scrollView.isHidden = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.indicatorView.stopAnimating()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</span></div><div class="line">        <span class="keyword">let</span> jsStr_1 = <span class="string">"alert('JS弹框')"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_1)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_2 = <span class="string">"var p = document.getElementsByTagName('p')[0];"</span></div><div class="line">        <span class="keyword">let</span> jsStr_3 = <span class="string">"p.innerHTML = '使用JavaScript很🐂';"</span></div><div class="line">        <span class="keyword">let</span> jsStr_4 = <span class="string">"p.style.background = 'red';document.body.appendChild(p);"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_2)</div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_3)</div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_4)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_5 = <span class="string">"var li = document.createElement('li');li.innerHTML='执行js代码，dom操作元素';li.style.background = 'gray';document.body.appendChild(li);"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_5)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用WKWebView执行JS代码"><a href="#使用WKWebView执行JS代码" class="headerlink" title="使用WKWebView执行JS代码"></a>使用WKWebView执行JS代码</h2><h3 id="OC版本-3"><a href="#OC版本-3" class="headerlink" title="OC版本"></a>OC版本</h3><p>使用<code>WKWebView</code>的对象方法<code>- (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^ _Nullable)(_Nullable id, NSError * _Nullable error))completionHandler;</code>来执行一段<code>JavaScript</code>代码。一般是在<code>WKWebView</code>的代理方法：<code>- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation;</code>中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">webView.scrollView.hidden = YES;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line"></div><div class="line">//添加网络加载指示器</div><div class="line">UIActivityIndicatorView *indicatorView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];</div><div class="line">indicatorView.center = CGPointMake(200, 200);</div><div class="line">[self.view addSubview:indicatorView];</div><div class="line">self.indicatorView = indicatorView;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 代理 WKNavigationDelegate</div><div class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123;//页面开始加载时调用</div><div class="line">    //指示器开始显示动画</div><div class="line">    [self.indicatorView startAnimating];</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123; //页面加载完成之后调用</div><div class="line">    </div><div class="line">    //指示器结束显示动画</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.25 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        webView.scrollView.hidden = NO;</div><div class="line">        [self.indicatorView stopAnimating];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    //注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</div><div class="line">    NSString *jsStr_1 = @&quot;var p = document.getElementsByTagName(&apos;p&apos;)[0];&quot;;</div><div class="line">    NSString *jsStr_2 = @&quot;p.innerHTML = &apos;使用JavaScript很🐂&apos;;&quot;;</div><div class="line">    NSString *jsStr_3 = @&quot;p.style.background = &apos;red&apos;;document.body.appendChild(p);&quot;;</div><div class="line">    [webView evaluateJavaScript:jsStr_1 completionHandler:nil];</div><div class="line">    [webView evaluateJavaScript:jsStr_2 completionHandler:^(id _Nullable value, NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;value: %@&quot;,value); //打印出插入的内容：使用JavaScript很🐂</div><div class="line">    &#125;];</div><div class="line">    [webView evaluateJavaScript:jsStr_3 completionHandler:nil];</div><div class="line">    </div><div class="line">    NSString *jsStr_4 = @&quot;var li = document.createElement(&apos;li&apos;);li.innerHTML=&apos;执行js代码，dom操作元素&apos;;li.style.background = &apos;gray&apos;;document.body.appendChild(li);&quot;;</div><div class="line">    [webView evaluateJavaScript:jsStr_4 completionHandler:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-3"><a href="#Swift版本-3" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="comment">//网络加载指示器</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> indicatorView: <span class="type">UIActivityIndicatorView</span> = &#123;</div><div class="line">        <span class="keyword">var</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle: .whiteLarge)</div><div class="line">        indicator.center = <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">200</span>)</div><div class="line">        <span class="keyword">return</span> indicator</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">        <span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">        webView.scrollView.isHidden = <span class="literal">true</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        webView.uiDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.load(<span class="type">URLRequest</span>(url: url))</div><div class="line">        </div><div class="line">        <span class="comment">//添加网络加载指示器</span></div><div class="line">        view.addSubview(indicatorView)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代理 WKNavigationDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面开始加载时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器开始显示动画</span></div><div class="line">        indicatorView.startAnimating()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面加载完成之后调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器结束显示动画</span></div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.25</span>) &#123;</div><div class="line">            webView.scrollView.isHidden = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.indicatorView.stopAnimating()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</span></div><div class="line">        <span class="keyword">let</span> jsStr_1 = <span class="string">"var p = document.getElementsByTagName('p')[0];"</span></div><div class="line">        <span class="keyword">let</span> jsStr_2 = <span class="string">"p.innerHTML = '使用JavaScript很🐂';"</span></div><div class="line">        <span class="keyword">let</span> jsStr_3 = <span class="string">"p.style.background = 'red';document.body.appendChild(p);"</span></div><div class="line">        webView.evaluateJavaScript(jsStr_1, completionHandler: <span class="literal">nil</span>)</div><div class="line">        webView.evaluateJavaScript(jsStr_2) &#123; (value, error) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value ?? <span class="string">""</span>) <span class="comment">//打印出插入的内容：使用JavaScript很🐂</span></div><div class="line">        &#125;</div><div class="line">        webView.evaluateJavaScript(jsStr_3, completionHandler: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_4 = <span class="string">"var li = document.createElement('li');li.innerHTML='执行js代码，dom操作元素';li.style.background = 'gray';document.body.appendChild(li);"</span></div><div class="line">        webView.evaluateJavaScript(jsStr_4, completionHandler: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中监听JavaScript函数调用"><a href="#iOS中监听JavaScript函数调用" class="headerlink" title="iOS中监听JavaScript函数调用"></a>iOS中监听JavaScript函数调用</h1><p>在<code>iOS</code>混合<code>HTML</code>开发中，如何去监听<code>HTML</code>页面中一个<code>JavaScript</code>函数的调用，这是在需求中经常遇到的。比如，在一个混合页面中，需要点击<code>HTML</code>中的某个按钮标签，调用iPhone系统相机，而相机的触发必须调用<code>iOS</code>原生方法。再比如，在一个混合页面中，需要点击<code>HTML</code>中的某个支付按钮标签，调用iPhone系统已经安装的支付宝应用进行支付操作，来实现应用间的传参跳转，就需要调用<code>支付宝SDK</code>的<code>iOS</code>原生方法。又比如，在混合开发中，需要从一个<code>HTML</code>页面跳转到我的原生页面，并且传送相应的参数，就需要监听<code>JavaScript</code>事件，调用原生控制器跳转方法。这又被很多人称为用<code>JavaScript</code>调用<code>iOS</code>原生代码，个人认为这种说法是不准确的。确切的说，<code>iOS</code>中监听<code>JavaScript</code>函数调用，并作出相应的行为，比较准确。</p>
<h2 id="使用UIWebView监听JS函数调用"><a href="#使用UIWebView监听JS函数调用" class="headerlink" title="使用UIWebView监听JS函数调用"></a>使用UIWebView监听JS函数调用</h2><p>在<code>HTML</code>页面中，对要触发的<code>JavaScript</code>方法中，使用<code>window.location.href =</code>实现一个页面重定向。当触发页面中<code>JavaScript</code>方法，即会调用<code>window.location.href =</code>进行页面重定向时，此时<code>UIWebView</code>代理方法<code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;</code>会监听到页面的重定向，并且可以获取请求对象，<code>NSURLRequest</code>对象<code>request</code>，从<code>request</code>中可以获得重定向的地址。可以对要重定向的地址进行重新定义协议，例如，<code>&#39;mengyueping.com://&#39;</code>，后面可以拼接上要触发的<code>OC/Swift</code>方法名，<code>&#39;mengyueping.com://openCamera&#39;</code>，在代理中拦截到完整协议地址，可以通过截取获得<code>OC/Swift</code>方法名，然后根据方法名给方法发送消息，触发方法，从而达到监听<code>JavaScript</code>函数调用的目的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加载的本地HTML--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"openCamera()"</span>&gt;</span>访问相册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"field"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">            function openCamera() &#123;</div><div class="line">                document.getElementById('field').value = "赋值一下";</div><div class="line">                window.location.href = 'mengyueping.com://openCamera'; //自定义协议</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-4"><a href="#OC版本-4" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">webView.delegate = self;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">webView.scalesPageToFit = YES;</div><div class="line">[self.view addSubview:webView];</div><div class="line"></div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:htmlUrl]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//代理 UIWebViewDelegate</div><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</div><div class="line">&#123;</div><div class="line">    NSString *url = request.URL.absoluteString;</div><div class="line">    NSRange range = [url rangeOfString:@&quot;mengyueping.com://&quot;]; //自定义协议</div><div class="line">    NSUInteger location = range.location;</div><div class="line">    </div><div class="line">    if (location != NSNotFound) &#123;</div><div class="line">        NSString *str = [url substringFromIndex:(location + range.length)];</div><div class="line">        SEL selector = NSSelectorFromString(str);</div><div class="line">        //警告：PerformSelector may cause a leak because its selector is unknown</div><div class="line">        //[self performSelector:selector];</div><div class="line">        [self performSelector:selector withObject:nil afterDelay:0.0];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-4"><a href="#Swift版本-4" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">        webView.delegate = <span class="keyword">self</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.scalesPageToFit = <span class="literal">true</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// iOS原生方法访问相册</span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">openCamera</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> pickerVC = <span class="type">UIImagePickerController</span>()</div><div class="line">        pickerVC.sourceType = .photoLibrary</div><div class="line">        <span class="keyword">self</span>.present(pickerVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = request.url?.absoluteString</div><div class="line">        <span class="keyword">let</span> range = url?.range(of: <span class="string">"mengyueping.com://"</span>) <span class="comment">//自定义协议</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = range <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> str = url?.substring(from: <span class="string">"mengyueping.com://"</span>.endIndex)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> selStr = str <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> selector = <span class="type">Selector</span>(selStr)</div><div class="line">        perform(selector)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用WKWebView监听JS函数调用"><a href="#使用WKWebView监听JS函数调用" class="headerlink" title="使用WKWebView监听JS函数调用"></a>使用WKWebView监听JS函数调用</h2><h3 id="OC版本-5"><a href="#OC版本-5" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// app注册方法，供JS调用</div><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// 代理 WKNavigationDelegate</div><div class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123; //页面重定向时调用，不是每次都调用，不准确</div><div class="line">    NSLog(@&quot;navigation: %@&quot;,navigation);</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</div><div class="line">&#123;//在发送请求之前，决定是否跳转，可以截获发送的请求</div><div class="line">    </div><div class="line">    NSString *url = navigationAction.request.URL.absoluteString;</div><div class="line">    NSRange range = [url rangeOfString:@&quot;mengyueping.com://&quot;]; //自定义协议</div><div class="line">    NSUInteger location = range.location;</div><div class="line">    </div><div class="line">    if (location != NSNotFound) &#123;</div><div class="line">        NSString *str = [url substringFromIndex:(location + range.length)];</div><div class="line">        SEL selector = NSSelectorFromString(str);</div><div class="line">        //警告：PerformSelector may cause a leak because its selector is unknown</div><div class="line">        //[self performSelector:selector];</div><div class="line">        [self performSelector:selector withObject:nil afterDelay:0.0];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    decisionHandler(WKNavigationActionPolicyAllow);</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler</div><div class="line">&#123;// 在收到响应后，决定是否跳转，可以截获服务器的响应数据</div><div class="line">    decisionHandler(WKNavigationResponsePolicyAllow);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-5"><a href="#Swift版本-5" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">        <span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        webView.uiDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.load(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// iOS原生方法访问相册</span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">openCamera</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> pickerVC = <span class="type">UIImagePickerController</span>()</div><div class="line">        pickerVC.sourceType = .photoLibrary</div><div class="line">        <span class="keyword">self</span>.present(pickerVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理 WKNavigationDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)</span></span> &#123; </div><div class="line">        <span class="comment">//页面重定向时调用，不是每次都调用，不准确</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123; </div><div class="line">        <span class="comment">// 在发送请求之前，决定是否跳转，可以截获发送的请求</span></div><div class="line">        decisionHandler(.allow)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = navigationAction.request.url?.absoluteString</div><div class="line">        <span class="keyword">let</span> range = url?.range(of: <span class="string">"mengyueping.com://"</span>) <span class="comment">//自定义协议</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = range <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> str = url?.substring(from: <span class="string">"mengyueping.com://"</span>.endIndex)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> selStr = str <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> selector = <span class="type">Selector</span>(selStr)</div><div class="line">        perform(selector)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping <span class="params">(WKNavigationResponsePolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123; </div><div class="line">        <span class="comment">// 在收到响应后，决定是否跳转，可以截获服务器的响应数据</span></div><div class="line">        decisionHandler(.allow)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面开始加载时调用</span></div><div class="line">        <span class="comment">// 不是每次都调用，只有decisionHandler(.allow)时才能调用此方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="WKWebView与JS之间的通信"><a href="#WKWebView与JS之间的通信" class="headerlink" title="WKWebView与JS之间的通信"></a>WKWebView与JS之间的通信</h2><p><code>iOS</code>的<code>WebKit</code>中，为<code>JavaScript</code>提供了一个发消息的通道，是通过<code>WKUserContentController</code>类实现的，可以通过配置类<code>WKWebViewConfiguration</code>配置到<code>WKWebView</code>对象上。并且<code>WKUserContentController</code>的对象可以添加一个脚本信息处理器，(<code>addScriptMessageHandler: name:</code> 或 <code>add(_ scriptMessageHandler: WKScriptMessageHandler, name: String)</code>)，通过实现协议<code>WKScriptMessageHandler</code>来接收处理<code>JS</code>脚本发送过来信息。</p>
<blockquote>
<p><code>WKWebViewConfiguration</code>：是<code>WKWebView</code>初始化时的配置类，里面存储着初始化<code>WKWebView</code>的一系列属性。<br><code>WKUserContentController</code>：为<code>JavaScript</code>提供了一个发送消息的通道，并且可以向页面注入<code>JavaScript</code>的类。可以在配置类&gt; <code>WKWebViewConfiguration</code>属性中，配置此类。<br><code>WKScriptMessageHandler</code>：一个协议，协议只有一个方法，页面执行特定<code>JavaScript</code>的一个回调，这个特定<code>JavaScript</code>格式为<code>window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;);</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html 要加载的HTML，及通信脚本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sendMsgToiOS()"</span>&gt;</span>点击给iOS原生发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    function sendMsgToiOS() &#123;</div><div class="line"></div><div class="line">        var ua = navigator.userAgent.toLowerCase();</div><div class="line">        if (!!ua.match(/\(i[^;]+;( u;)? cpu.+mac os x/)) &#123; // iOS   Mac OS</div><div class="line"></div><div class="line">            var JSCallIOS = function () &#123;</div><div class="line">                //发送给 iOS 原生的 json 数据</div><div class="line">                var message = &#123;</div><div class="line">                    'method': 'push', </div><div class="line">                    'name' : '王小锌',</div><div class="line">                    'title' : '朋友圈',  </div><div class="line">                    'url': 'http://www.baidu.com'</div><div class="line">                &#125;;</div><div class="line">                //JS 脚本向 iOS原生传递消息</div><div class="line">                window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</div><div class="line">            &#125;</div><div class="line">            JSCallIOS();</div><div class="line"></div><div class="line">        &#125; else if (/android/.test(ua)) &#123; // 安卓</div><div class="line">            window.android.finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-6"><a href="#OC版本-6" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 为JS提供了一个发送消息的通道，且可以向页面注入JS的类。</div><div class="line">WKUserContentController *userContentController = [[WKUserContentController alloc] init];</div><div class="line">[userContentController addScriptMessageHandler:self name:@&quot;JSMessageToIOS&quot;]; // &lt;WKScriptMessageHandler&gt;</div><div class="line"></div><div class="line">// 添加一个脚本信息处理器。self遵守协议WKScriptMessageHandler</div><div class="line">// 脚本信息处理器，可以接收JS脚本发送过来的消息。JS脚本通过`window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)`发送消息。</div><div class="line">// 脚本处理器中监听的名字是js脚本里面消息发送的名字。                 window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</div><div class="line"></div><div class="line">// 配置</div><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line">configuration.userContentController = userContentController; //配置消息通道</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;  //&lt;WKUIDelegate&gt;</div><div class="line">webView.navigationDelegate = self; //&lt;WKNavigationDelegate&gt;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 协议 WKScriptMessageHandler</div><div class="line">// 当JS给OC发送消息时，此回调中执行消息处理</div><div class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;JS传递过来的消息-message.body: %@&quot;,message.body);</div><div class="line">    </div><div class="line">    //收到JS传递过来的消息回调，可以做一些原生想要做的事情。--&gt; JS向原生OC传递消息。</div><div class="line">    //发送网络请求，页面跳转，打开相机等</div><div class="line"></div><div class="line">    [self openCamera];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-6"><a href="#Swift版本-6" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为JS提供了一个发送消息的通道，且可以向页面注入JS的类。</span></div><div class="line"><span class="keyword">let</span> userContentController = <span class="type">WKUserContentController</span>()</div><div class="line">userContentController.add(<span class="keyword">self</span>, name: <span class="string">"JSMessageToIOS"</span>)</div><div class="line"><span class="comment">// 添加一个脚本信息处理器。self遵守协议WKScriptMessageHandler</span></div><div class="line"><span class="comment">// 脚本信息处理器，可以接收JS脚本发送过来的消息。JS脚本通过`window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)`发送消息。</span></div><div class="line"><span class="comment">// 脚本处理器中监听的名字是js脚本里面消息发送的名字。          window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</span></div><div class="line"></div><div class="line"><span class="comment">// 配置</span></div><div class="line"><span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">configuration.userContentController = userContentController</div><div class="line"></div><div class="line"><span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">webView.backgroundColor = .gray</div><div class="line">webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">webView.uiDelegate = <span class="keyword">self</span></div><div class="line">view.addSubview(webView)</div><div class="line"></div><div class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">webView.load(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKScriptMessageHandler</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userContentController</span><span class="params">(<span class="number">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage)</span></span> &#123;</div><div class="line">        <span class="comment">// 当JS给OC发送消息时，此回调中执行消息处理</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"JS传递过来的消息-message.body:<span class="subst">\(message.body)</span>, name：<span class="subst">\(message.name)</span>"</span>);</div><div class="line">        <span class="comment">//iOS和js统一好的名字：message.name</span></div><div class="line">        </div><div class="line">        <span class="comment">//收到JS传递过来的消息回调，可以做一些原生想要做的事情。--&gt; JS向原生OC传递消息。</span></div><div class="line">        <span class="comment">//发送网络请求，页面跳转，打开相机等</span></div><div class="line"></div><div class="line">        <span class="keyword">let</span> vc = <span class="type">UIViewController</span>()</div><div class="line">        vc.title = <span class="string">"name：<span class="subst">\(message.name)</span>"</span></div><div class="line">        vc.view = &#123;</div><div class="line">            <span class="keyword">let</span> v = <span class="type">UITextView</span>(frame: <span class="keyword">self</span>.view.bounds)</div><div class="line">            v.text = <span class="string">"body: <span class="subst">\(message.body)</span>"</span></div><div class="line">            <span class="keyword">return</span> v</div><div class="line">        &#125;()</div><div class="line">        <span class="keyword">let</span> nav = <span class="type">UINavigationController</span>(rootViewController: vc)</div><div class="line">        <span class="keyword">self</span>.present(nav, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中利用JavaScriptCore交互JS"><a href="#iOS中利用JavaScriptCore交互JS" class="headerlink" title="iOS中利用JavaScriptCore交互JS"></a>iOS中利用JavaScriptCore交互JS</h1><p><code>JavaScriptCore.framework</code>是<code>iOS7</code>以后推出的一个<code>JS</code>与<code>OC</code>交互的框架，是使用<code>OC</code>语言对<code>WebKit</code>的<code>JS</code>引擎进行的封装。之后引入<code>Swift</code>。<br>使用时导入头文件<code>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</code>或<code>import JavaScriptCore</code>。相关类：<code>JSContext</code>、<code>JSValue</code>、<code>JSManagedValue</code>、<code>JSVirtualMachine</code>、<code>JSExport</code>。</p>
<h2 id="使用JSContext运行JS代码"><a href="#使用JSContext运行JS代码" class="headerlink" title="使用JSContext运行JS代码"></a>使用JSContext运行JS代码</h2><p><code>JSContext</code>是运行<code>JS</code>代码的环境，一个<code>JSContext</code>是一个全局环境的实例。<code>JSContext</code>类似<code>window</code>对象。通过对象方法<code>- (JSValue *)evaluateScript:(NSString *)script;</code>来运行<code>JS</code>代码。</p>
<p><code>JSValue</code>包含了每一个<code>JS</code>类型的值。通过<code>JSValue</code>可以将<code>OC</code>中的类型转换为<code>JS</code>中的类型，也可将<code>JS</code>中的类型转为<code>OC</code>中的类型。类型对照如下：</p>
<p><pre><br>    OC Swift type         |   JavaScript type<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>         nil              |     undefined<br>        NSNull            |        null<br>  NSString String         |       string<br>       NSNumber           |   number, boolean<br>NSDictionary Dictionary   |   Object object<br>  NSArray  Array          |    Array object<br>        NSDate            |     Date object<br>       NSBlock (1)        |   Function object (1)<br>          id (2)          |   Wrapper object (2)<br>        Class (3)         | Constructor object (3)<br></pre><br><code>JSValue</code>都是通过<code>JSContext</code>返回或者创建的，并没有构造方法。每一个<code>JSValue</code>对象都要强引用关联一个<code>JSContext</code>。当与<code>JSContext</code>对象关联的所有<code>JSValue</code>释放后，<code>JSContext</code>也会释放。我们对<code>JS</code>的数值、对象、函数等进行操作，都是通过<code>JSValue</code>对象来实现的。<code>JSValue</code>是 <code>JS</code> 和 <code>OC/Swift</code>数据和方法的桥梁,封装了<code>JS</code>与<code>OC/Swift</code>中的对应的类型，以及如何通过<code>OC/Swift</code>方法调用<code>JS</code>函数的<code>API</code>等</p>
<h3 id="初始化JSContext对象及异常处理"><a href="#初始化JSContext对象及异常处理" class="headerlink" title="初始化JSContext对象及异常处理"></a>初始化JSContext对象及异常处理</h3><p><code>OC/Swift</code>异常会在运行时被<code>Xcode</code>捕获，<code>JSContext</code>中执行的<code>JS</code>如果出现异常，只会被<code>JSContext</code>捕获并存储在<code>exception</code>属性上，而不会向外抛出。时刻检查<code>JSContext</code>对象的<code>exception</code>是否为<code>nil</code>显然是不合适的，更合理的方法是，给<code>JSContext</code>对象设置<code>exceptionHandler</code>回调属性，它接受的是<code>void(^exceptionHandler)(JSContext *context, JSValue *exceptionValue)</code>形式的<code>block</code>，或<code>((JSContext?, JSValue?) -&gt; Swift.Void)</code>形式的闭包。其默认值就是将传入的<code>exceptionValue</code>赋给传入的<code>context</code>的<code>exception</code>属性。这样<code>JS</code>运行发生异常的时候，在<code>Block/Closure</code>中可以立即知道，通过设置<code>Block/Closure</code>中参数<code>context.exception</code>属性，可以观察和记录语法、类型以及运行时错误。</p>
<h4 id="OC版本-7"><a href="#OC版本-7" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [[JSContext alloc] init];</div><div class="line">// 异常处理回调</div><div class="line">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">    NSLog(@&quot;%@&quot;, exception);</div><div class="line">    context.exception = exception;</div><div class="line">    /*</div><div class="line">        此处打印js异常错误，JSContext不会主动抛出js异常。</div><div class="line">        常见异常：</div><div class="line">            ReferenceError: Can&apos;t find variable:</div><div class="line">            TypeError: undefined is not an object</div><div class="line">    */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Swift版本-7"><a href="#Swift版本-7" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 初始化JSContext对象及异常处理</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> context = <span class="type">JSContext</span>()!</div><div class="line">context.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> excep = exception <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(excep)</div><div class="line">    <span class="comment">/*</span></div><div class="line">    此处打印js异常错误，JSContext不会主动抛出js异常。</div><div class="line">    常见异常：</div><div class="line">        ReferenceError: Can't find variable:</div><div class="line">        TypeError: undefined is not an object</div><div class="line">    */</div><div class="line">    context?.exception = excep</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行带返回结果js脚本"><a href="#执行带返回结果js脚本" class="headerlink" title="执行带返回结果js脚本"></a>执行带返回结果js脚本</h3><p>如果执行的<code>js</code>脚本有返回结果，则<code>- (JSValue *)evaluateScript:(NSString *)script;</code>执行后返回的<code>JSValue</code>对象，包含返回的结果。可以解析为<code>JS</code>类型，也可以调用<code>JSValue</code>对象<code>API</code>方法，解析为<code>OC</code>对象。</p>
<h4 id="OC版本-8"><a href="#OC版本-8" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr1 = @&quot;1+2&quot;;</div><div class="line">JSValue *value1 = [context evaluateScript:jsStr1]; // 返回的JSValue对象，存储的是js计算的返回结果。不存储定义的变量。</div><div class="line">NSLog(@&quot;value1 JS: %@  -&gt; OC: %@&quot;,value1, value1.toNumber); // 3  3</div></pre></td></tr></table></figure>
<h4 id="Swift版本-8"><a href="#Swift版本-8" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 执行带返回结果js脚本</span></div><div class="line"><span class="keyword">let</span> jsStr1 = <span class="string">"1+2"</span></div><div class="line"><span class="keyword">let</span> jsvalue1 = context.evaluateScript(jsStr1)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value1 JS: <span class="subst">\(String(describing: jsvalue1)</span>)  -&gt; Swift: <span class="subst">\(String(describing: jsvalue1?.toNumber()</span>))"</span>)</div><div class="line"><span class="comment">// value1 JS: Optional(3)  -&gt; Swift: Optional(3)</span></div></pre></td></tr></table></figure>
<h3 id="执行不带返回结果js脚本"><a href="#执行不带返回结果js脚本" class="headerlink" title="执行不带返回结果js脚本"></a>执行不带返回结果js脚本</h3><p>如果执行的<code>js</code>脚本没有返回结果，则<code>- (JSValue *)evaluateScript:(NSString *)script;</code>执行后返回的<code>JSValue</code>对象，解析为<code>JS</code>是 <code>undefined</code>，对应的<code>OC</code>是<code>(null)</code>。</p>
<h4 id="OC版本-9"><a href="#OC版本-9" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr2 = @&quot;var a = 1; var b = 2;&quot;;</div><div class="line">JSValue *value2 = [context evaluateScript:jsStr2];</div><div class="line">NSLog(@&quot;value2 JS: %@  -&gt; OC: %@&quot;,value2, value2.toObject); // value2 JS: undefined  -&gt; OC: (null)</div></pre></td></tr></table></figure>
<h4 id="Swift版本-9"><a href="#Swift版本-9" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 执行不带返回结果js脚本</span></div><div class="line"><span class="keyword">let</span> jsStr2 = <span class="string">"var a = 1; var b = 2;"</span></div><div class="line"><span class="keyword">let</span> jsvalue2 = context.evaluateScript(jsStr2)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value2 JS: <span class="subst">\(String(describing: jsvalue2)</span>)  -&gt; Swift: <span class="subst">\(String(describing: jsvalue2?.toObject)</span>)"</span>);</div><div class="line"><span class="comment">//value2 JS: Optional(undefined)  -&gt; Swift: Optional((Function))</span></div></pre></td></tr></table></figure>
<h3 id="取出js脚本执行后存储在JSContext对象中的变量"><a href="#取出js脚本执行后存储在JSContext对象中的变量" class="headerlink" title="取出js脚本执行后存储在JSContext对象中的变量"></a>取出js脚本执行后存储在JSContext对象中的变量</h3><p>当<code>JSContext</code>对象调用方法<code>- (JSValue *)evaluateScript:(NSString *)script;</code>来执行<code>js</code>脚本时，会把<code>JS</code>中定义的变量函数等存储到<code>JSContext</code>对象中，并且可以通过<code>key-value</code>方法取出，取出获得的是<code>JSValue</code>对象。这样就可以通过取出的<code>JSValue</code>对象转换<code>js</code>脚本中定义的<code>JS</code>变量为<code>OC</code>对象来使用，或可以通过取出的<code>JSValue</code>对象调用<code>js</code>脚本中定义的<code>JS</code>函数。（调用<code>JSValue</code>的<code>API</code>）</p>
<h4 id="OC版本-10"><a href="#OC版本-10" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr2 = @&quot;var a = 1; var b = 2;&quot;;</div><div class="line">JSValue *value2 = [context evaluateScript:jsStr2];</div><div class="line">JSValue *jsValueA = context[@&quot;a&quot;];  // 运行js，定义的变量，存储在context中。</div><div class="line">JSValue *jsValueB = context[@&quot;b&quot;];</div><div class="line">NSLog(@&quot;JS a: %@;  JS a: %@&quot;, jsValueA, jsValueB); // JS a: 1;  JS a: 2</div></pre></td></tr></table></figure>
<h4 id="Swift版本-10"><a href="#Swift版本-10" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出js脚本执行后存储在JSContext对象中的变量</span></div><div class="line"><span class="keyword">let</span> jsValueA = context.objectForKeyedSubscript(<span class="string">"a"</span>)</div><div class="line"><span class="keyword">let</span> jsValueB = context.objectForKeyedSubscript(<span class="string">"b"</span>)</div><div class="line"><span class="type">NSLog</span>(<span class="string">"JS a: <span class="subst">\(String(describing: jsValueA)</span>);  JS b: <span class="subst">\(String(describing: jsValueB)</span>)"</span>) <span class="comment">//  JS a: Optional(1);  JS b: Optional(2)</span></div></pre></td></tr></table></figure>
<h3 id="取出存储的js变量，并修改"><a href="#取出存储的js变量，并修改" class="headerlink" title="取出存储的js变量，并修改"></a>取出存储的js变量，并修改</h3><p>对于<code>JS</code>的<code>Array</code>、<code>Object</code>类型，<code>JSValue</code>也可以通过下标直接取值和赋值。</p>
<h4 id="OC版本-11"><a href="#OC版本-11" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">NSLog(@&quot;value3 JS: %@  -&gt; OC: %@&quot;,value3, value3.toObject); // value2 JS: undefined  -&gt; OC: (null)</div><div class="line">NSLog(@&quot;JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]); // JS Array: 20,10,www.mengyueping.com;  Length: 3; jsArr[0]：20</div><div class="line">jsArr[0] = @&quot;www.&quot;;</div><div class="line">jsArr[2] = @&quot;.com&quot;;</div><div class="line">NSLog(@&quot;通过下标对js取值赋值：JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]); // JS Array: 20,10,www.mengyueping.com;  Length: 3; jsArr[0]：20</div></pre></td></tr></table></figure>
<h4 id="Swift版本-11"><a href="#Swift版本-11" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js变量，并修改</span></div><div class="line"><span class="keyword">let</span> jsStr3 = <span class="string">"var arr = [88, 'mengyueping', 66];"</span></div><div class="line"><span class="keyword">let</span> value3 = context.evaluateScript(jsStr3)</div><div class="line"><span class="keyword">let</span> jsArr = context.objectForKeyedSubscript(<span class="string">"arr"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value3 JS: <span class="subst">\(String(describing: value3)</span>)  -&gt; Swift: <span class="subst">\(String(describing: value3?.toObject)</span>)"</span>);</div><div class="line"><span class="comment">// value3 JS: Optional(undefined)  -&gt; Swift: Optional((Function))</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// JS Array: Optional(88,mengyueping,66);  Length: Optional(3); jsArr[0]：Optional(88)</span></div><div class="line">jsArr?.setValue(<span class="string">"www."</span>, at: <span class="number">0</span>)</div><div class="line">jsArr?.setValue(<span class="string">".com"</span>, at: <span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"通过下标对js取值赋值：JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// 通过下标对js取值赋值：JS Array: Optional(www.,mengyueping,.com);  Length: Optional(3); jsArr[0]：Optional(www.)</span></div></pre></td></tr></table></figure>
<h3 id="取出存储的js集合对象，并转为OC数组对象"><a href="#取出存储的js集合对象，并转为OC数组对象" class="headerlink" title="取出存储的js集合对象，并转为OC数组对象"></a>取出存储的js集合对象，并转为OC数组对象</h3><h4 id="OC版本-12"><a href="#OC版本-12" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">NSArray *ocArr = jsArr.toArray;</div><div class="line">NSLog(@&quot;js Arr -&gt; OC Arr: %@&quot;, ocArr);</div><div class="line">/*</div><div class="line">    js Arr -&gt; OC Arr: (</div><div class="line">    &quot;www.&quot;,</div><div class="line">    mengyueping,</div><div class="line">    &quot;.com&quot;</div><div class="line">    )</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-12"><a href="#Swift版本-12" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> swiftArr = jsArr?.toArray()</div><div class="line"><span class="built_in">print</span>(<span class="string">"js Arr -&gt; Swift Arr: <span class="subst">\(String(describing: swiftArr)</span>)"</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">js Arr -&gt; Swift Arr: Optional([www., mengyueping, .com])</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="取出存储的js集合对象，并直接使用OC对象给js对象赋值"><a href="#取出存储的js集合对象，并直接使用OC对象给js对象赋值" class="headerlink" title="取出存储的js集合对象，并直接使用OC对象给js对象赋值"></a>取出存储的js集合对象，并直接使用OC对象给js对象赋值</h3><p><code>JSValue</code>是遵循<code>JS</code>的数组特性：没有下标越位，自动延展数组大小。即：集合中没有的下标，元素会自动补空。并且通过<code>JSValue</code>还可以获取<code>JS</code>对象上的属性，比如：JS数组的长度“length”。</p>
<h4 id="OC版本-13"><a href="#OC版本-13" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">jsArr[8] = @8;</div><div class="line">NSLog(@&quot;通过下标对js取值赋值：JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]);</div><div class="line">// 通过下标对js取值赋值：JS Array: www.,mengyueping,.com,,,,,,8;  Length: 9; jsArr[0]：www.</div><div class="line">NSLog(@&quot;js Arr -&gt; OC Arr: %@&quot;, jsArr.toArray);</div><div class="line">/*</div><div class="line">    js Arr -&gt; OC Arr: (</div><div class="line">    &quot;www.&quot;,</div><div class="line">    mengyueping,</div><div class="line">    &quot;.com&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    8</div><div class="line">    )</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-13"><a href="#Swift版本-13" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js集合对象，并直接使用Swift对象给js对象赋值</span></div><div class="line">jsArr?.setValue(<span class="number">8</span>, at: <span class="number">8</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"通过下标对js取值赋值：JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// 通过下标对js取值赋值：JS Array: Optional(www.,mengyueping,.com,,,,,,8);  Length: Optional(9); jsArr[0]：Optional(www.)</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"js Arr -&gt; Swift Arr: <span class="subst">\(String(describing: jsArr?.toArray()</span>))"</span>)</div><div class="line"><span class="comment">/*</span></div><div class="line">js Arr -&gt; Swift Arr: Optional([www., mengyueping, .com, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, 8])</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="取出存储的js函数，并执行"><a href="#取出存储的js函数，并执行" class="headerlink" title="取出存储的js函数，并执行"></a>取出存储的js函数，并执行</h3><p>使用<code>JSValue</code>的<code>API</code>执行<code>JS</code>函数，且有参数的，可以传参。</p>
<h4 id="OC版本-14"><a href="#OC版本-14" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[context evaluateScript:@&quot;function add(a, b)&#123; return a + b; &#125;&quot;];</div><div class="line">JSValue *addValue = context[@&quot;add&quot;]; // js函数</div><div class="line">NSLog(@&quot;Func: %@&quot;, addValue);  // Func: function add(a, b)&#123; return a + b; &#125;</div><div class="line"></div><div class="line">// 取出js函数，调用函数 - (JSValue *)callWithArguments:(NSArray *)arguments;</div><div class="line">JSValue *sum = [addValue callWithArguments:@[@1,@2]];</div><div class="line">NSLog(@&quot;Sum: %d&quot;, sum.toInt32); // Sum: 3</div></pre></td></tr></table></figure>
<h4 id="Swift版本-14"><a href="#Swift版本-14" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js函数，并执行</span></div><div class="line">context.evaluateScript(<span class="string">"function add(a, b)&#123; return a + b; &#125;"</span>)</div><div class="line"><span class="keyword">let</span> addValue = context.objectForKeyedSubscript(<span class="string">"add"</span>) <span class="comment">// js函数</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Func: <span class="subst">\(String(describing: addValue)</span>)"</span>)  <span class="comment">// Func: Optional(function add(a, b)&#123; return a + b; &#125;)</span></div><div class="line"><span class="comment">// 取出js函数，调用函数 open func call(withArguments arguments: [Any]!) -&gt; JSValue!</span></div><div class="line"><span class="keyword">let</span> sum = addValue?.call(withArguments:[<span class="number">1</span>,<span class="number">2</span>])</div><div class="line"><span class="built_in">print</span>(<span class="string">"Sum: <span class="subst">\(String(describing: sum?.toInt32()</span>))"</span>) <span class="comment">// Sum: Optional(3)</span></div></pre></td></tr></table></figure>
<h3 id="调用js函数的另一种简单方法"><a href="#调用js函数的另一种简单方法" class="headerlink" title="调用js函数的另一种简单方法"></a>调用js函数的另一种简单方法</h3><p>不必像上面一样先取出存储的<code>JS</code>函数，再执行<code>JS</code>函数。直接使用<code>JSContext</code>对象的<code>JSValue *globalObject;</code>属性，调用<code>JSValue</code>对象的<code>- (JSValue *)invokeMethod:(NSString *)method withArguments:(NSArray *)arguments;</code>方法。如果定义的<code>JS</code>函数是全局函数，应该用<code>JSContext</code>的<code>globalObject</code>对象调用该方法。如果是某<code>JS</code>对象的方法，就应该用相应的<code>JSValue</code>对象调用。</p>
<h4 id="OC版本-15"><a href="#OC版本-15" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSValue *jsValue = [context evaluateScript:@&quot;function multiply(a, b)&#123; return a * b; &#125;&quot;];</div><div class="line">JSValue *multiplyValue = [jsValue.context.globalObject invokeMethod:@&quot;multiply&quot; withArguments:@[@3,@6]]; //第一种形式</div><div class="line">NSLog(@&quot;multiplyValue: %d&quot;,multiplyValue.toInt32); // multiplyValue: 18</div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSValue *jsValue = [context evaluateScript:@&quot;function multiply(a, b)&#123; return a * b; &#125;&quot;];</div><div class="line">JSValue *multiplyValue = [context.globalObject invokeMethod:@&quot;multiply&quot; withArguments:@[@3,@6]]; //第二种形式</div><div class="line">NSLog(@&quot;multiplyValue: %d&quot;,multiplyValue.toInt32); // multiplyValue: 18</div></pre></td></tr></table></figure></p>
<h4 id="Swift版本-15"><a href="#Swift版本-15" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK:  调用js函数的另一种简单方法</span></div><div class="line"><span class="keyword">let</span> jsValue = context.evaluateScript(<span class="string">"function multiply(a, b)&#123; return a * b; &#125;"</span>)</div><div class="line"><span class="keyword">let</span> multiplyValue = jsValue?.context.globalObject.invokeMethod(<span class="string">"multiply"</span>, withArguments: [<span class="number">3</span>,<span class="number">6</span>])</div><div class="line"><span class="built_in">print</span>(<span class="string">"multiplyValue: <span class="subst">\(String(describing: multiplyValue?.toInt32()</span>))"</span>); <span class="comment">// multiplyValue: Optional(18)</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> multiplyValue = context.globalObject.invokeMethod(<span class="string">"multiply"</span>, withArguments: [<span class="number">3</span>,<span class="number">6</span>])</div></pre></td></tr></table></figure>
<h3 id="把OC中Block转换成JS函数，并存储到JSContext对象"><a href="#把OC中Block转换成JS函数，并存储到JSContext对象" class="headerlink" title="把OC中Block转换成JS函数，并存储到JSContext对象"></a>把OC中Block转换成JS函数，并存储到JSContext对象</h3><p>通过<code>Block</code>可以实现在<code>OC/Swift</code>中定义<code>JS</code>函数，并且在<code>JS</code>运行环境中调用该<code>JS</code>函数，函数执行可以成功的回到<code>OC/Swift</code>的<code>Block/Closure</code>代码中，而且遵循<code>JS</code>方法的各种特点（比如：方法参数不固定）。<code>JSContext</code>提供了类方法来获取参数列表 <code>(+(NSArray *)currentArguments)</code>和当前调用该方法的对象<code>(+ (JSValue *)currentThis)</code>。<code>JS</code>函数中<code>this</code>的输出的内容是<code>GlobalObject</code>，也是<code>JSContext</code>对象方法 <code>-(JSValue *)globalObject;</code>所返回的内容。因为在<code>JS</code>里面，所有全局变量和方法其实都是一个全局变量(<code>GlobalObject</code>)的属性，在浏览器中是<code>window</code>对象。如下，使用<code>Block/Closure</code>定义一个<code>JS</code>函数<code>log</code>。并在<code>JS</code>脚本中调用<code>log</code>函数，并使用<code>OC</code>执行此脚本。</p>
<h4 id="OC版本-16"><a href="#OC版本-16" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">context[@&quot;log&quot;] = ^()&#123;</div><div class="line">    NSLog(@&quot;++++++Begin Log++++++&quot;);</div><div class="line">    </div><div class="line">    NSArray *args = [JSContext currentArguments];</div><div class="line">    for (JSValue *jsVal in args) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,jsVal);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    JSValue *this = [JSContext currentThis];</div><div class="line">    NSLog(@&quot;this: %@&quot;, this);</div><div class="line">    </div><div class="line">    NSLog(@&quot;---End Log------&quot;);</div><div class="line">&#125;;</div><div class="line">// 执行js，调用使用Block自定义的js函数</div><div class="line">[context evaluateScript:@&quot;log(&apos;mengyueping&apos;, [10,20], &#123;&apos;hello&apos;: &apos;world&apos;, &apos;number&apos;: &apos;100&apos;&#125;)&quot;];</div><div class="line">/*</div><div class="line">    ++++++Begin Log++++++</div><div class="line">    mengyueping</div><div class="line">    10,20</div><div class="line">    [object Object]</div><div class="line">    this: [object GlobalObject]</div><div class="line">    ---End Log------</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-16"><a href="#Swift版本-16" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 把Swift中Closure转换成JS函数，并存储到JSContext对象</span></div><div class="line"><span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"++++++Begin Log++++++"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> jsVal <span class="keyword">in</span> args! &#123;</div><div class="line">        <span class="built_in">print</span>(jsVal)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> this = <span class="type">JSContext</span>.currentThis()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"this: <span class="subst">\(String(describing: this)</span>)"</span>)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(<span class="string">"---End Log------"</span>)</div><div class="line">&#125;</div><div class="line">context.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line"><span class="comment">// 执行js，调用使用Block自定义的js函数</span></div><div class="line">context.evaluateScript(<span class="string">"log('mengyueping', [10,20], &#123;'hello': 'world', 'number': '100'&#125;)"</span>)</div><div class="line"><span class="comment">/*</span></div><div class="line">++++++Begin Log++++++</div><div class="line">mengyueping</div><div class="line">10,20</div><div class="line">[object Object]</div><div class="line">this: Optional([object GlobalObject])</div><div class="line">---End Log------</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>对<code>JSContext</code>和<code>JSValue</code>实例使用下标的方式我们可以很容易地访问我们之前创建的<code>context</code>的任何值。<code>JSContext</code>需要一个字符串下标，而<code>JSValue</code>允许使用字符串或整数作为下标来得到里面的<code>JS</code>对象和数组。</p>
<p><code>Block</code>可以传入<code>JSContext</code>作方法，但是<code>JSValue</code>没有<code>toBlock</code>方法来把<code>JS</code>方法变成<code>Block/Closure</code>在<code>OC/Swift</code>中使用。但是，<code>JSValue</code>提供了<code>-(JSValue *)callWithArguments:(NSArray *)arguments;</code>方法，可以反过来将函数参数传进去。</p>
<p><code>Block</code>在<code>JavaScriptCore</code>中起到强大作用，它为<code>JS</code>和<code>OC</code>之间的转换建立起更多的桥梁，让转换更方便。但需要注意：</p>
<ul>
<li>在<code>block</code>内部使用外部定义创建的对象，<code>block</code>会对其做强引用，而<code>JSContext</code>也会对被赋予的<code>block</code>做强引用，这样它们之间就形成了循环引用<code>（Circular Reference）</code>使得内存无法正常释放。</li>
<li>在<code>block</code>内部使用外部定义创建的<code>JSValue</code>对象，也会造成循环引用，因为每个<code>JSValue</code>上都有<code>JSContext</code>的引用<code>（@property (readonly, strong) JSContext *context;）</code>，<code>JSContext</code>再引用<code>Block</code>同样也会形成循环引用。</li>
<li>无论是把<code>Block</code>传给<code>JSContext</code>对象，让其变成<code>JS</code>方法；还是把它赋值给<code>exceptionHandler</code>属性；在<code>Block</code>内都不要直接使用其外部定义的<code>JSContext/JSValue</code>对象，应该将其当做参数传入到<code>Block</code>中，或者通过<code>JSContext</code>的类方法<code>+(JSContext *)currentContext;</code>来获得。否则会造成循环引用使得内存无法被正确释放。</li>
</ul>
<h2 id="JSContext结合UIWebView处理HTML中事件监听"><a href="#JSContext结合UIWebView处理HTML中事件监听" class="headerlink" title="JSContext结合UIWebView处理HTML中事件监听"></a>JSContext结合UIWebView处理HTML中事件监听</h2><p><code>JSContext</code>结合<code>UIWebView</code>，当点击<code>JS</code>函数时，响应<code>OC/Swift</code>操作。通过<code>UIWebView</code>的方法<code>JSContext *context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</code>获取<code>JSContext</code>对象。 <code>Swift</code>中是<code>let context = webView.value(forKeyPath: &quot;documentView.webView.mainFrame.javaScriptContext&quot;)</code>。</p>
<p>而<code>WKWebView</code>不支持通过<code>KVC</code>的方式创建<code>JSContext</code>，所以不能在<code>WKWebView</code>中使用<code>JavaScriptCore</code>。<br><code>WKWebView</code>中<code>OC/Swift</code>与<code>JS</code>交互的方式，更简洁，因此也用不到<code>JavaScriptCore</code>。</p>
<h3 id="加载的HTML"><a href="#加载的HTML" class="headerlink" title="加载的HTML"></a>加载的HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScriptCore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">            function showAlert(content) &#123;</div><div class="line">                asyncAlert(content);</div><div class="line">                document.getElementById("js-iOS-js-argsValue").value = content;</div><div class="line">            &#125;</div><div class="line">            function asyncAlert(content) &#123;</div><div class="line">                setTimeout(function()&#123; alert(content); &#125;, 1);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是按钮调用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'jsBtn'</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"点击Html按钮，调用OC/Swift要执行的代码，&amp;#13;&amp;#10;接收JS传递给OC/Swift的参数"</span> <span class="attr">onclick</span>=<span class="string">"handleJSToiOS('触发了Html中标签的点击事件，触发JS函数调用，js-&gt;OC/Swift-&gt;JS')"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span> =<span class="string">"js-iOS-js-argsValue"</span> <span class="attr">type</span>=<span class="string">"value"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-17"><a href="#OC版本-17" class="headerlink" title="OC版本"></a>OC版本</h3><p>代码<code>context[@&quot;jsMethodName&quot;] = ^(){//执行的OC代码};</code>其中，<code>jsMethodName</code>是<code>JS</code>中触发事件的方法名字；<code>^(){//执行的OC代码}</code> 这个<code>block</code>通过<code>JSContext</code>对象变成名字为<code>jsMethodName</code>的<code>JS</code>方法；所以当触发<code>Html</code>点击事件所监听的<code>jsMethodName</code>方法时，就等于触发了<code>OC</code>的<code>Block</code>中的代码。</p>
<p><code>Block</code>中的执行环境是子线程。可以更新部分<code>UI</code>：<code>view</code>设置背景色、调用<code>webView</code>执行<code>js</code>。弹出原生<code>alertView</code>会<code>Crash</code>子线程操作<code>UI</code>的错误信息。 </p>
<p><code>Block</code>避免循环引用，因为<code>block</code>会持有外部变量，而<code>JSContext</code>也会强引用它所有的变量，<code>self</code>使用<code>weakSelf</code>。<code>block</code>内不要使用外部的<code>JSContext</code>对象、<code>JSValue</code>对象。如果要使用<code>JSContext</code>对象，可以使用<code>[JSContext currentContext]</code>，也可以把<code>JSContext</code>对象、<code>JSValue</code>对象当做<code>block</code>的参数传入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">self.view.backgroundColor = [UIColor whiteColor];</div><div class="line">CGRect webFrame = CGRectMake(30, 80, self.view.bounds.size.width-60, self.view.bounds.size.height-100);</div><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:webFrame];</div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index.html&quot; withExtension:nil];</div><div class="line">//    NSURL *htmlUrl = [NSURL URLWithString:@&quot;&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line"></div><div class="line">webView.scrollView.bounces = NO; //关闭webView的回弹效果</div><div class="line">webView.scrollView.decelerationRate = UIScrollViewDecelerationRateNormal;//UIWebView滚动的比较慢，这里设置为正常速度</div><div class="line"></div><div class="line">[webView loadRequest:request];</div><div class="line">[self.view addSubview:webView];</div><div class="line">self.webView = webView;</div><div class="line">self.webView.delegate = self;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    __weak typeof (self) weakSelf = self;</div><div class="line">    </div><div class="line">    JSContext *context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    </div><div class="line">    context[@&quot;handleJSToiOS&quot;] = ^()&#123;</div><div class="line">        NSLog(@&quot;CurrentThread: %@&quot;,[NSThread currentThread]); //此Block是子线程</div><div class="line">        </div><div class="line">        // 获取js函数传入的参数</div><div class="line">        NSArray *args = [JSContext currentArguments];</div><div class="line">        for (int i = 0; i&lt;args.count; i++) &#123;</div><div class="line">            NSLog(@&quot;args[%d]: %@&quot;,i,args[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 使用JSContext执行JS代码，将JS传递给OC/Swift的数据，传递回JS</div><div class="line">        //方法一：</div><div class="line">        NSString *jsStr = [NSString stringWithFormat:@&quot;showAlert(&apos;%@&apos;)&quot;,args[0]];</div><div class="line">        [[JSContext currentContext] evaluateScript:jsStr];</div><div class="line">        </div><div class="line">        //方法二：</div><div class="line">        [[JSContext currentContext][@&quot;showAlert&quot;] callWithArguments:args];</div><div class="line">        </div><div class="line">        // 修改原生UI</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;  //回到主线程</div><div class="line">            </div><div class="line">            weakSelf.view.backgroundColor = [UIColor orangeColor];</div><div class="line">            </div><div class="line">            // BOM操作</div><div class="line">//            [weakSelf.webView goBack];</div><div class="line">//            [weakSelf.webView goForward];</div><div class="line">//            [weakSelf.webView reload];</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        // 播放系统音效</div><div class="line">        AudioServicesPlaySystemSound(1007); // 1007是系统声音的编号</div><div class="line">        </div><div class="line">        /*</div><div class="line">         此处可以执行的任务：</div><div class="line">             获取地理位置信息、调用相机、扫一扫二维码、调用系统分享面板、更改原生控件属性样式（回到主线程）、</div><div class="line">             原生调用支付（JS把支付参数传递给OC/Swfit进行支付、OC/Swfit把支付结果反馈给JS）、</div><div class="line">             摇一摇、播放系统音效、</div><div class="line">         */</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-17"><a href="#Swift版本-17" class="headerlink" title="Swift版本"></a>Swift版本</h3><p>代码<code>jscontext.setObject(block, forKeyedSubscript: NSString(string: &quot;handleJSToiOS&quot;))</code>其中，<code>block</code>是自己定义的一个<code>@convention(block)</code>的<code>Closure</code>；<code>handleJSToiOS</code>是<code>JS</code>中触发事件的方法名字；这个自定义的闭包通过<code>JSContext</code>对象，将存储的代码块变成名字为<code>jsMethodName</code>的<code>JS</code>方法；所以当触发<code>Html</code>点击事件所监听的<code>jsMethodName</code>方法时，就等于触发了<code>Swift</code>的<code>Closure</code>中的代码。</p>
<p> <code>Closure</code>中的执行环境是子线程。可以更新部分<code>UI</code>：<code>view</code>设置背景色、调用<code>webView</code>执行<code>js</code>。弹出原生<code>alertView</code>会<code>Crash</code>子线程操作<code>UI</code>的错误信息。</p>
<p><code>Closure</code>避免循环引用，因为<code>Closure</code>会持有外部变量，而<code>JSContext</code>也会强引用它所有的变量，闭包中声明<code>self</code>为弱引用<code>[weak self]</code>。<code>Closure</code>内不要使用外部的<code>JSContext</code>对象、<code>JSValue</code>对象。如果要使用<code>JSContext</code>对象，可以使用<code>JSContext.current()</code>，也可以把<code>JSContext</code>对象、<code>JSValue</code>对象当做<code>Closure</code>的参数传入。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> webView: <span class="type">UIWebView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> web = <span class="type">UIWebView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">80</span>, width: <span class="type">UIScreen</span>.main.bounds.width-<span class="number">60</span>, height: <span class="type">UIScreen</span>.main.bounds.height-<span class="number">160</span>))</div><div class="line">        web.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">return</span> web</div><div class="line">    &#125;()</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">        view.addSubview(webView)</div><div class="line"><span class="comment">//        let url = URL(string: "https://www..com")!</span></div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> context = webView.value(forKeyPath: <span class="string">"documentView.webView.mainFrame.javaScriptContext"</span>)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> jsContext = context <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">let</span> jscontext = jsContext <span class="keyword">as</span>! <span class="type">JSContext</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"CurrentThread: <span class="subst">\(Thread.current)</span>"</span>) <span class="comment">//此Closure是子线程</span></div><div class="line">            </div><div class="line">            <span class="comment">// 获取js函数传入的参数</span></div><div class="line">            <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> argments = args <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> argments &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"args[<span class="subst">\(i)</span>]: <span class="subst">\(item)</span>"</span>)</div><div class="line">                i += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 使用JSContext执行JS代码，将JS传递给OC/Swift的数据，传递回JS</span></div><div class="line">            <span class="comment">//方法一：</span></div><div class="line"><span class="comment">//            JSContext.current().evaluateScript("showAlert('\(argments[0])')")</span></div><div class="line">            <span class="comment">//方法二：</span></div><div class="line">            <span class="type">JSContext</span>.current().objectForKeyedSubscript(<span class="string">"showAlert"</span>).call(withArguments: argments)</div><div class="line"><span class="comment">//            JSContext.current().objectForKeyedSubscript("alert").call(withArguments: argments)</span></div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// 修改原生UI</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async &#123; <span class="comment">//回到主线程</span></div><div class="line">                <span class="keyword">self</span>!.view.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">                </div><div class="line">                <span class="comment">// BOM操作</span></div><div class="line"><span class="comment">//                self!.webView.reload()</span></div><div class="line"><span class="comment">//                self!.webView.goForward()</span></div><div class="line"><span class="comment">//                self!.webView.goBack()</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 播放系统音效</span></div><div class="line">            <span class="type">AudioServicesPlaySystemSound</span>(<span class="number">1007</span>)</div><div class="line">            </div><div class="line">            <span class="comment">/*</span></div><div class="line">             此处可以执行的任务：</div><div class="line">                 获取地理位置信息、调用相机、扫一扫二维码、调用系统分享面板、更改原生控件属性样式（回到主线程）、</div><div class="line">                 原生调用支付（JS把支付参数传递给OC/Swfit进行支付、OC/Swfit把支付结果反馈给JS）、</div><div class="line">                 摇一摇、播放系统音效、</div><div class="line">             */</div><div class="line">        &#125;</div><div class="line">        jscontext.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"handleJSToiOS"</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSVirtualMachine"><a href="#JSVirtualMachine" class="headerlink" title="JSVirtualMachine"></a>JSVirtualMachine</h2><blockquote>
<p><code>JSVirtualMachine</code>为<code>JS</code>脚本的执行提供底层资源。一个<code>JSVirtualMachine</code>实例，代表一个独立的<code>JS</code>对象空间，并为其执行提供资源。它通过加锁，保证<code>JSVirtualMachine</code>是线程安全的，如果要并发执行<code>JS</code>，那我们必须创建多个独立的<code>JSVirtualMachine</code>实例，在不同的实例中执行<code>JS</code>（有点像JS引擎，如V8）。有独立的堆空间和垃圾回收机制。处理线程相关，使用较少。</p>
</blockquote>
<p>通过<code>alloc/init</code>就可以创建一个<code>JSVirtualMachine</code>对象，但是我们一般不用新建<code>JSVirtualMachine</code>对象，因为创建<code>JSContext</code>时，如果我们不提供一个自己创建的<code>JSVirtualMachine</code>，内部会自动创建一个<code>JSVirtualMachine</code>对象。<code>JSContext</code>对象管理<code>JSVirtualMachine</code>对象的生命周期。</p>
<p><code>JSVirtualMachine</code>创建方式：<br>方式一，创建<code>JSContext</code>对象时，内部自动创建一个新的<code>JSVirtualMachine</code>对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//OC</div><div class="line">JSContext *context = [[JSContext alloc] init];</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="keyword">let</span> context = <span class="type">JSContext</span>()</div></pre></td></tr></table></figure>
<p>方式二，自己创建一个<code>JSVirtualMachine</code>对象，传入的创建<code>JSContext</code>对象中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//OC</div><div class="line">JSVirtualMachine *jsVM = [[JSVirtualMachine alloc] init];</div><div class="line">JSContext *context = [[JSContext alloc] initWithVirtualMachine:jsVM]; //传入的JSVirtualMachine对象不能为空</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="keyword">let</span> jsVM = <span class="type">JSVirtualMachine</span>()</div><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">JSContext</span>(virtualMachine: jsVM)</div></pre></td></tr></table></figure>
<p><code>JSVirtualMachine</code>为<code>JavaScript</code>的运行<strong>提供了底层资源</strong>，<code>JSContext</code>为<code>JavaScript</code><strong>提供了运行环境</strong>;<br>而<code>JSContext</code>的创建都是基于<code>JSVirtualMachine</code>。<br><code>JSValue</code>其实就是<code>JS</code>对象在<code>JSVirtualMachine</code>中的一个强引用。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_JavaScript/iOS-callJavaScript" target="_blank" rel="external">apple-stack</a></p>
<p>=================<br>2017.7更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OC-Swift与JavaScript交互&quot;&gt;&lt;a href=&quot;#OC-Swift与JavaScript交互&quot; class=&quot;headerlink&quot; title=&quot;OC/Swift与JavaScript交互&quot;&gt;&lt;/a&gt;OC/Swift与JavaScript交互&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何加载&lt;code&gt;HTML&lt;/code&gt;页面？（包括&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何去执行一段&lt;code&gt;JavaScript&lt;/code&gt;代码？（包括&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中为什么要使用原生语言去执行一段&lt;code&gt;JavaScript&lt;/code&gt;代码？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何监听到&lt;code&gt;HTML&lt;/code&gt;页面中触发的事件？（&lt;code&gt;JavaScript&lt;/code&gt;函数的触发）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;混合开发中，当&lt;code&gt;JavaScript&lt;/code&gt;函数触发时，能否发送一些数据给&lt;code&gt;iOS&lt;/code&gt;原生，如何发送？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;混合开发中，当&lt;code&gt;JavaScript&lt;/code&gt;函数触发时，能否让&lt;code&gt;OC/Swift&lt;/code&gt;执行一些操作，比如调用系统相机等？
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/categories/iOS/JavaScriptCore/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="JavaScript" scheme="http://mengyueping.com/tags/JavaScript/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/tags/JavaScriptCore/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="UIWebView" scheme="http://mengyueping.com/tags/UIWebView/"/>
    
      <category term="WKWebView" scheme="http://mengyueping.com/tags/WKWebView/"/>
    
      <category term="HTML" scheme="http://mengyueping.com/tags/HTML/"/>
    
      <category term="WebKit" scheme="http://mengyueping.com/tags/WebKit/"/>
    
  </entry>
  
</feed>
