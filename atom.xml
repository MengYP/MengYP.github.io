<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孟跃平的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengyueping.com/"/>
  <updated>2017-07-01T16:00:00.000Z</updated>
  <id>http://mengyueping.com/</id>
  
  <author>
    <name>孟跃平</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JSExport实现JS调用OC/Swift</title>
    <link href="http://mengyueping.com/2017/07/02/iOS-JSExport-JSCallOC-Swift/"/>
    <id>http://mengyueping.com/2017/07/02/iOS-JSExport-JSCallOC-Swift/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2017-07-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li><code>JSExport</code>如何使用？</li>
<li>如何使用<code>JSExport</code>调用自定义的<code>OC/Swift</code>类属性?</li>
<li>如何使用<code>JSExport</code>调用自定义的<code>OC/Swift</code>类的方法？</li>
<li>如何使用<code>JSExport</code>调用系统或外部引用库的<code>OC/Swift</code>类的属性和方法？</li>
<li><code>JSManagedValue</code>的作用？</li>
</ul>
<p>若想了解如何通过<code>UIWebView</code>、<code>WKWebView</code>、<code>JavaScriptCore</code>的<code>JSContext</code>来执行<code>JavaScript</code>代码，使用<code>UIWebView</code>、<code>WKWebView</code>监听<code>JS</code>函数调用，<code>WKWebView</code>与<code>JS</code>之间的通信，以及通过<code>JavaScriptCore</code>的<code>JSContext</code>使<code>OC/Swift</code>中<code>Block/Closure</code>转换成<code>JS</code>函数以达到<code>JS</code>调用<code>OC</code>效果，可以参看：<a href="http://www.mengyueping.com/2016/10/16/iOS-callJavaScript/" target="_blank" rel="external">Objective-C/Swift与JavaScript交互</a>。</p>
<a id="more"></a>
<h1 id="JSExport"><a href="#JSExport" class="headerlink" title="JSExport"></a>JSExport</h1><blockquote>
<p><code>JSExport</code>：是一个协议，没有声明任何属性和方法。可以自定义一个协议，继承自<code>JSExport</code>。我们可以在自定义的协议里面声明属性、方法，继承该协议的<code>OC/Swift</code>对象会把协议中的属性和方法提供给<code>JS</code>调用。<code>JSExport</code>主要是用于将<code>OC/Swift</code>中定义的<code>Model</code>类等引入到<code>JavaScript</code>中，便于在<code>JS</code>中使用这种对象和对象的属性、方法。</p>
</blockquote>
<h1 id="JSExport实现JS调用原生对象属性和方法"><a href="#JSExport实现JS调用原生对象属性和方法" class="headerlink" title="JSExport实现JS调用原生对象属性和方法"></a>JSExport实现JS调用原生对象属性和方法</h1><p>通过<code>OC/Swift</code>类实现<code>JSExport</code>协议，来实现<code>JS</code>对象直接调用<code>OC/Swift</code>对象里面的方法和属性。<code>OC/Swift</code>如何实现<code>JSExport</code>协议？需要自定义一个协议继承自<code>JSExport</code>协议，在自定义协议中声明<code>JS</code>要调用的属性和方法。然后让<code>OC/Swift</code>类遵守自定义协议并实现协议中的定义的属性和方法。然后把<code>OC/Swift</code>对象存储到<code>JSContext</code>中，这样在<code>JS</code>运行环境中就可以调用<code>OC/Swift</code>对象的属性和方法了。</p>
<h2 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// MYPJSExport.h</div><div class="line">/*</div><div class="line"> * 自定义协议继承自 &lt;JSExport&gt;</div><div class="line"> */</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</div><div class="line"></div><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">@property (nonatomic, assign) NSInteger sum;</div><div class="line">JSExportAs(add, - (NSInteger)add:(NSInteger)a b:(NSInteger)b);</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//在MYPObject.m中</div><div class="line">@synthesize sum = _sum;</div><div class="line">/**</div><div class="line"> 实现协议方法</div><div class="line"> */</div><div class="line">- (NSInteger)add:(NSInteger)a b:(NSInteger)b</div><div class="line">&#123;</div><div class="line">    return a + b;</div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> 重写setter方法方便打印信息</div><div class="line"> */</div><div class="line">- (void)setSum:(NSInteger)sum</div><div class="line">&#123;</div><div class="line">    _sum = sum;</div><div class="line">    NSLog(@&quot;--%@&quot;, @(sum));</div><div class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]); // main</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//在ViewController.m</div><div class="line">//初始化</div><div class="line">self.obj = [[MYPObject alloc] init];</div><div class="line">self.context = [[JSContext alloc] init];</div><div class="line">self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">    [JSContext currentContext].exception = exception;</div><div class="line">    NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//将OC对象obj添加到context中</div><div class="line">self.context[@&quot;OCobj&quot;] = self.obj;</div><div class="line">//使用JS调用存储在context中的OC对象obj的方法，并将结果赋值给OC对象obj的sum属性</div><div class="line">[self.context evaluateScript:@&quot;OCobj.sum = OCobj.add(2,3)&quot;]; //OC对象属性值改变是在主线程</div><div class="line">//更改了OC对象 self.obj 的属性值sum , 可见，都是强引用。</div><div class="line">NSLog(@&quot;self.obj.sum: %ld&quot;,(long)self.obj.sum);  // self.obj.sum: 5</div></pre></td></tr></table></figure>
<h2 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum: <span class="type">Int</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doNothing</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">squared</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, num2: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span></div><div class="line"><span class="comment">//    func add(_ num1: Int, num2: Int) -&gt; Int //第一个外部参数省略，是没办法使用JS方法表达   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MYPObject</span>: <span class="title">NSObject</span>, <span class="title">MYPJSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum: <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"newValue: <span class="subst">\(newValue)</span>  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"oldValue: <span class="subst">\(oldValue)</span>  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> a + b</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doNothing</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"doNothing--"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">squared</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num * num</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num + <span class="number">10</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num1 + num2</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> num1 * num2</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//不成立</span></div><div class="line"><span class="comment">//    func add(_ num1: Int, num2: Int) -&gt; Int &#123;</span></div><div class="line"><span class="comment">//        return (num1 + num2) * 2</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在ViewController.swift中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj: <span class="type">MYPObject</span> = <span class="type">MYPObject</span>()</div><div class="line">    <span class="keyword">let</span> context:<span class="type">JSContext</span> = <span class="type">JSContext</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exce = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context!.exception = exce</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出exception: <span class="subst">\(exce)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"++++++Begin Log++++++"</span>)</div><div class="line">            <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">for</span> jsVal <span class="keyword">in</span> args! &#123;</div><div class="line">                <span class="built_in">print</span>(jsVal)</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"---End Log------"</span>)</div><div class="line">        &#125;</div><div class="line">        context.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line">        context.setObject(obj, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"Swiftobj"</span>))</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.doNothing(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.squared(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.add(5,5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum(5))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum1Num2(10,10))"</span>))</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.addWithNum1(10,10))"</span>))</div><div class="line"><span class="comment">//        print(context.evaluateScript("log(Swiftobj.addWithNum2(10,10))")) // 'Swiftobj.addWithNum2' is undefined</span></div><div class="line">        </div><div class="line">        context.evaluateScript(<span class="string">"Swiftobj.sum = Swiftobj.add(2,3)"</span>)</div><div class="line">        <span class="built_in">print</span>(context.evaluateScript(<span class="string">"log(Swiftobj.sum)"</span>))</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.sum: <span class="subst">\(obj.sum)</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JSExport实现JS调用系统对象属性和方法"><a href="#JSExport实现JS调用系统对象属性和方法" class="headerlink" title="JSExport实现JS调用系统对象属性和方法"></a>JSExport实现JS调用系统对象属性和方法</h1><p>通过<code>&lt;objc/runtime.h&gt;</code>运行时，可以动态的为一个系统类、或者外部导入的库类添加一个协议，这样我们就可以让这些已经定义实现的类遵守我们的<code>JSExport</code>子协议，从而可以在<code>JS</code>中调用这些类在协议中声明的属性和方法。如下：为系统<code>UITextField</code>类动态添加自定义的<code>JSExport</code>子协议，让其能够通过<code>JSContext</code>环境中运行的<code>JS</code>脚本运行修改<code>UITextField</code>对象的<code>text</code>属性。</p>
<h2 id="OC版本-1"><a href="#OC版本-1" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        function btnClick()&#123;</div><div class="line">            log("打印自定义对象："+jsObj.text);</div><div class="line">            //jsObj.text = 333; //子线程更新UI，Crash</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"log()"</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"打印log"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">"btnClick()"</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"点击H5的按钮标签，修改iOS的UITextField的输入值"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//自定义协议继承自 &lt;JSExport&gt;</div><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">@property (nonatomic, copy) NSString *text;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">// 在ViewController.m中</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;index&quot; ofType:@&quot;html&quot;];</div><div class="line">    NSURL *url = [NSURL fileURLWithPath:path];</div><div class="line">    [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line">    </div><div class="line">    //为UITextField类动态添加协议</div><div class="line">    class_addProtocol([UITextField class], @protocol(MYPJSExport));</div><div class="line"></div><div class="line">    // 注意：不能在JS脚本中更改UI控件类的UI属性，因为JS的运行是在子线程，不能对UI进行更新。</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)btnClick:(UIButton *)sender</div><div class="line">&#123;</div><div class="line">    self.context = [[JSContext alloc] init];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    self.context[@&quot;log&quot;] = ^() &#123;</div><div class="line">        NSLog(@&quot;---Begin Log---&quot;);</div><div class="line">        NSArray *arr= JSContext.currentArguments;</div><div class="line">        for (int i=0; i&lt;arr.count; i++) &#123;</div><div class="line">            NSLog(@&quot;arr[%d] = %@&quot;,i, arr[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,[NSThread currentThread]); // 主线程</div><div class="line">        NSLog(@&quot;---End Log---&quot;);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    // 实现：可以在JS中拿到原生控件的属性值。</div><div class="line">    self.context[@&quot;textField&quot;] = self.textField;</div><div class="line">    NSString *script = @&quot;var text = textField.text;&quot;;</div><div class="line">    [self.context evaluateScript:script];</div><div class="line">    [self.context evaluateScript:@&quot;log(text)&quot;]; // 此处执行log函数，log内部依然是主线程。</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)addBtnClick:(UIButton *)sender</div><div class="line">&#123;</div><div class="line">    NSString *script = @&quot;var num = parseInt(textField.text, 10);&quot;</div><div class="line">    &quot;++num;&quot;</div><div class="line">    &quot;textField.text = num;&quot;;</div><div class="line">    [self.context evaluateScript: script];</div><div class="line">    </div><div class="line">    //问题：JS执行环境都是在子线程，修改UITextField的text属性值是更新UI，子线程更新UI会Crash。为什么此处更新成功了？</div><div class="line">    //猜想：JS调用OC，OC执行依然在主线程。</div><div class="line">    //证实：使用OC执行JS脚本，JS脚本调用OC，对OC对象属性值改变，是在主线程发生的。</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过-evaluateScript: 方法，OC执行JS脚本，此时JS脚本的执行是在主线程，可以通过JS更新原生控件UI。</div><div class="line">// JS 直接在Html中调用OC定义的JS函数，运行是在子线程。</div><div class="line"></div><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    self.context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    self.context[@&quot;log&quot;] = ^() &#123;</div><div class="line">        NSLog(@&quot;---Begin Log---&quot;);</div><div class="line">        </div><div class="line">        NSArray *arr= JSContext.currentArguments;</div><div class="line">        for (int i=0; i&lt;arr.count; i++) &#123;</div><div class="line">            NSLog(@&quot;arr[%d] = %@&quot;,i, arr[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSLog(@&quot;%@&quot;,[NSThread currentThread]); //子线程</div><div class="line">        NSLog(@&quot;---End Log---&quot;);</div><div class="line">    &#125;;</div><div class="line">    //注意：直接在Html中调用OC定义的JS函数，运行是在子线程。</div><div class="line">    </div><div class="line">    // 存储OC对象，JS调用OC，JS脚本中获得OC对象的属性值。</div><div class="line">    JSValue *jsObj = [JSValue valueWithObject:self.textField inContext:self.context]; //把OC对象转为JS对象</div><div class="line">    JSManagedValue *managedValue = [JSManagedValue managedValueWithValue:jsObj];</div><div class="line">    [self.context.virtualMachine addManagedReference:managedValue withOwner:self];</div><div class="line">    self.context[@&quot;jsObj&quot;] = jsObj; // 存储JS对象</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Swift版本-1"><a href="#Swift版本-1" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="comment">//注意：@objc</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> text: <span class="type">String</span>? &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> context: <span class="type">JSContext</span>? = &#123;</div><div class="line">        <span class="keyword">let</span> context = <span class="type">JSContext</span>()</div><div class="line">        <span class="keyword">return</span> context</div><div class="line">    &#125;()</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> textField: <span class="type">UITextField</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context?.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exception = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context?.exception = exception</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出错误：<span class="subst">\(exception)</span>"</span>)</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"----Begin Log----"</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Thread.current: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> arguments = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> args = arguments <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="keyword">var</span> num = <span class="number">1</span></div><div class="line">            <span class="keyword">for</span> arg <span class="keyword">in</span> args &#123;</div><div class="line">                num += <span class="number">1</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"arg[<span class="subst">\(num)</span>]: <span class="subst">\(arg)</span>"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"----End Log----"</span>)</div><div class="line">        &#125;</div><div class="line">        context?.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line">        </div><div class="line">        <span class="comment">//为UITextField类动态添加协议</span></div><div class="line">        class_addProtocol(<span class="type">UITextField</span>.<span class="keyword">self</span>, <span class="type">MYPJSExport</span>.<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">()</span></span> &#123;</div><div class="line">        context?.setObject(textField, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"textField"</span>))</div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"log(textField.text)"</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> script = <span class="string">"var num = parseInt(textField.text, 10); ++num; textField.text = num;"</span></div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(script)</div><div class="line">        </div><div class="line">        <span class="comment">//注音：注意JS脚本调用OC/Swift是在子线程还是主线程，如果是更新原生UI，需要注意在主线程更新。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JSManagedValue"><a href="#JSManagedValue" class="headerlink" title="JSManagedValue"></a>JSManagedValue</h1><p>关于内存管理，<code>OC/Swfit</code>使用<code>ARC</code>，而<code>JS</code>使用的是垃圾回收机制，且<code>JS</code>中所有的引用都是强引用，不过<code>JS</code>的循环引用，垃圾回收会帮他们打破。在使用<code>JavaScriptCore</code>里面提供的<code>API</code>时，关于<code>OC/Swift</code>和<code>JS</code>对象之间内存管理，需要注意，一是不要在<code>Block/Closure</code>里面直接使用外部的<code>JSContext</code>对象和外部的<code>JSValue</code>对象；二是<code>OC/Swift</code>对象不要用属性直接保存<code>JSValue</code>对象，太容易循环引用。可以使用<code>JSManagedValue</code>，<code>JSManagedValue</code>帮我们保存了<code>JSValue</code>，这个是弱引用，但必须保证保存的<code>JS</code>对象在<code>JS</code>环境中是存在的。三是不要在不同的<code>JSVirtualMachine</code>之间进行传递<code>JS</code>对象。一个<code>JSVirtualMachine</code>可以运行多个<code>JSContext</code>对象，由于在同一个堆内存和同一个垃圾回收下，所以相互之间传值是没有问题的。但是如果在不同的<code>JSVirtualMachine</code>之间传值，垃圾回收就不知道他们之间的关系了，可能会引起异常。</p>
<p>有时候为了方便调用，要全局保存<code>JSValue</code>对象，就可以通过全局保存<code>JSManagedValue</code>变量，来达到全局拿到<code>JSValue</code>对象的目的，这样可以避免产生循环引用。这也是<code>JSManagedValue</code>主要用途，解决<code>JSValue</code>对象在<code>OC/Swift</code>堆上的安全引用问题。把<code>JSValue</code>保存进<code>OC/Swift</code>堆对象中是不正确的，这很容易引发循环引用，而导致<code>JSContext</code>不能释放。</p>
<h2 id="OC版本-2"><a href="#OC版本-2" class="headerlink" title="OC版本"></a>OC版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@protocol MYPJSExport &lt;JSExport&gt;</div><div class="line">//注意：在OC中，保存JS的对象，不要使用JSValue对象作为属性，容易循环引用，替代使用JSManagedValue对象。</div><div class="line">//@property (nonatomic, strong) JSValue *jsValue;</div><div class="line"></div><div class="line">//JSManagedValue对象本身是弱引用，来打破强引用，可以用来保存JSValue对象（JS对象）</div><div class="line">@property (nonatomic, strong) JSManagedValue *managedValue;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@implementation MYPObject</div><div class="line">@synthesize managedValue = _managedValue;</div><div class="line"></div><div class="line">- (void)setManagedValue:(JSManagedValue *)managedValue</div><div class="line">&#123;</div><div class="line">    _managedValue = managedValue;</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;,[NSThread currentThread]);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//在ViewController.h 中</div><div class="line">    self.obj = [[MYPObject alloc] init];</div><div class="line">    self.context = [[JSContext alloc] init];</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;JS抛出exception: %@&quot;,exception);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    self.context[@&quot;OCobj&quot;] = self.obj;</div><div class="line">    [self.context evaluateScript: @&quot;function callback()&#123;&#125;;&quot;];</div><div class="line">    </div><div class="line">    //把JS对象存储为全局属性，方便OC下次调用JS</div><div class="line">    self.obj.managedValue = [JSManagedValue managedValueWithValue:self.context[@&quot;callback&quot;]];</div><div class="line">    [JSContext.currentContext.virtualMachine addManagedReference:self.obj.managedValue withOwner:self];</div><div class="line">    NSLog(@&quot;self.obj.managedValue.value: %@&quot;, self.obj.managedValue.value); // function callback()&#123;&#125;</div><div class="line">    // 用 JSManagedValue来保存 JSValue</div><div class="line">    </div><div class="line">    // 如果直接使用JSValue对象作为属性，调用JS方法，进行赋值，JS对象保留了传进来的obj，最后，JS将自己的回调callback赋值给了obj，方便obj下次回调给JS；由于JS那边保存了obj，而且obj这边也保留了JS的回调。这样就形成了循环引用。</div><div class="line">    </div><div class="line">    //注意：只有在协议中定义的方法和属性才能够在JS中被调用。</div></pre></td></tr></table></figure>
<h2 id="Swift版本-2"><a href="#Swift版本-2" class="headerlink" title="Swift版本"></a>Swift版本</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 自定义协议继承自 &lt;JSExport&gt;</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">MYPJSExport</span>: <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> managedValue: <span class="type">JSManagedValue</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MYPObject</span>: <span class="title">NSObject</span>, <span class="title">MYPJSExport</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> text: <span class="type">String</span>?</div><div class="line">    </div><div class="line"><span class="comment">//    var managedValue: JSManagedValue = managedValue</span></div><div class="line">    <span class="keyword">var</span> managedValue: <span class="type">JSManagedValue</span>? &#123;</div><div class="line">        <span class="keyword">willSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"newValue: <span class="subst">\(String(describing: newValue)</span>)  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">didSet</span>&#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"oldValue: <span class="subst">\(String(describing: oldValue)</span>)  |CurrentThread: <span class="subst">\(Thread.current)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj = <span class="type">MYPObject</span>()</div><div class="line">    <span class="keyword">let</span> context = <span class="type">JSContext</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        context?.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> exce = exception <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            context!.exception = exce</div><div class="line">            <span class="built_in">print</span>(<span class="string">"JS抛出exception: <span class="subst">\(exce)</span>"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        context?.setObject(obj, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"SwiftObj"</span>))</div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"function callback()&#123;&#125;;"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">// 用 JSManagedValue来保存 JSValue</span></div><div class="line">        <span class="comment">// 把JS对象存储为全局属性，方便OC下次调用JS</span></div><div class="line">        obj.managedValue = <span class="type">JSManagedValue</span>.<span class="keyword">init</span>(value: context?.objectForKeyedSubscript(<span class="string">"callback"</span>))</div><div class="line">        context?.virtualMachine.addManagedReference(obj.managedValue, withOwner: <span class="keyword">self</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.managedValue.value: <span class="subst">\(String(describing: obj.managedValue?.value)</span>)"</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//注意：只有在协议中定义的方法和属性才能够在JS中被调用。</span></div><div class="line">        <span class="keyword">let</span> <span class="number">_</span> = context?.evaluateScript(<span class="string">"SwiftObj.text = '测试';"</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"obj.text: <span class="subst">\(String(describing: obj.text)</span>)"</span>) <span class="comment">// obj.text: nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>JSVirtualMachine</code>对象通过方法<code>- (void)addManagedReference:(id)object withOwner:(id)owner</code>来建立<code>JSManagedValue</code>对象与控制器<code>self</code>之间的弱引用关系。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_JavaScript/iOS-JavaScriptCore-JSExport" target="_blank" rel="external">apple-stack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSExport&lt;/code&gt;如何使用？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用自定义的&lt;code&gt;OC/Swift&lt;/code&gt;类属性?&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用自定义的&lt;code&gt;OC/Swift&lt;/code&gt;类的方法？&lt;/li&gt;
&lt;li&gt;如何使用&lt;code&gt;JSExport&lt;/code&gt;调用系统或外部引用库的&lt;code&gt;OC/Swift&lt;/code&gt;类的属性和方法？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSManagedValue&lt;/code&gt;的作用？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若想了解如何通过&lt;code&gt;UIWebView&lt;/code&gt;、&lt;code&gt;WKWebView&lt;/code&gt;、&lt;code&gt;JavaScriptCore&lt;/code&gt;的&lt;code&gt;JSContext&lt;/code&gt;来执行&lt;code&gt;JavaScript&lt;/code&gt;代码，使用&lt;code&gt;UIWebView&lt;/code&gt;、&lt;code&gt;WKWebView&lt;/code&gt;监听&lt;code&gt;JS&lt;/code&gt;函数调用，&lt;code&gt;WKWebView&lt;/code&gt;与&lt;code&gt;JS&lt;/code&gt;之间的通信，以及通过&lt;code&gt;JavaScriptCore&lt;/code&gt;的&lt;code&gt;JSContext&lt;/code&gt;使&lt;code&gt;OC/Swift&lt;/code&gt;中&lt;code&gt;Block/Closure&lt;/code&gt;转换成&lt;code&gt;JS&lt;/code&gt;函数以达到&lt;code&gt;JS&lt;/code&gt;调用&lt;code&gt;OC&lt;/code&gt;效果，可以参看：&lt;a href=&quot;http://www.mengyueping.com/2016/10/16/iOS-callJavaScript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C/Swift与JavaScript交互&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/categories/iOS/JavaScriptCore/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="JavaScript" scheme="http://mengyueping.com/tags/JavaScript/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/tags/JavaScriptCore/"/>
    
      <category term="JSExport" scheme="http://mengyueping.com/tags/JSExport/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="JSManagedValue" scheme="http://mengyueping.com/tags/JSManagedValue/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C/Swift与JavaScript交互</title>
    <link href="http://mengyueping.com/2016/10/16/iOS-callJavaScript/"/>
    <id>http://mengyueping.com/2016/10/16/iOS-callJavaScript/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2017-07-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OC-Swift与JavaScript交互"><a href="#OC-Swift与JavaScript交互" class="headerlink" title="OC/Swift与JavaScript交互"></a>OC/Swift与JavaScript交互</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><code>iOS</code>中如何加载<code>HTML</code>页面？（包括<code>Objective-C</code>和<code>Swift</code>）</li>
<li><code>iOS</code>中如何去执行一段<code>JavaScript</code>代码？（包括<code>Objective-C</code>和<code>Swift</code>）</li>
<li><code>iOS</code>中为什么要使用原生语言去执行一段<code>JavaScript</code>代码？</li>
<li><code>iOS</code>中如何监听到<code>HTML</code>页面中触发的事件？（<code>JavaScript</code>函数的触发）</li>
<li><code>iOS</code>混合开发中，当<code>JavaScript</code>函数触发时，能否发送一些数据给<code>iOS</code>原生，如何发送？</li>
<li><code>iOS</code>混合开发中，当<code>JavaScript</code>函数触发时，能否让<code>OC/Swift</code>执行一些操作，比如调用系统相机等？<a id="more"></a>
</li>
</ul>
<h1 id="iOS中加载HTML页面"><a href="#iOS中加载HTML页面" class="headerlink" title="iOS中加载HTML页面"></a>iOS中加载HTML页面</h1><h2 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h2><h3 id="OC版本"><a href="#OC版本" class="headerlink" title="OC版本"></a>OC版本</h3><p><code>UIWebView</code>是<code>iOS 2.0</code>就有的一个UI控件，是用来加载<code>HTML</code>页面的，属于<code>UIKit</code>框架。基本使用比较简单，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//UI控件设置</div><div class="line">  UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">  webView.delegate = self;</div><div class="line">  [self.view addSubview:webView];</div><div class="line">  NSURL *htmlUrl = [NSURL URLWithString:@&quot;https://www.baidu.com&quot;];</div><div class="line">  NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line">  [webView loadRequest:request];</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 实现代理 UIWebViewDelegate</div><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView&#123;</div><div class="line">	//网页开始加载时调用</div><div class="line">&#125;</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView&#123;</div><div class="line">	//网页加载完成时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error&#123;</div><div class="line">	//网页加载失败时调用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本"><a href="#Swift版本" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UI控件设置</span></div><div class="line">  <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">  webView.delegate = <span class="keyword">self</span></div><div class="line">  view.addSubview(webView)</div><div class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.baidu.com"</span>)!</div><div class="line">  webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="comment">//网页开始加载时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="comment">//网页加载完成时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, didFailLoadWithError error: Error)</span></span> &#123;</div><div class="line">        <span class="comment">//网页加载失败时调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><h3 id="OC版本-1"><a href="#OC版本-1" class="headerlink" title="OC版本"></a>OC版本</h3><p><code>WKWebView</code>是<code>iOS 8.0</code>出现的一个UI控件，是用来加载<code>HTML</code>页面的，属于<code>WebKit</code>框架。基本使用，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [NSURL URLWithString:@&quot;https://www.baidu.com&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//需要遵守协议 WKNavigationDelegate, WKUIDelegate</div><div class="line">/*</div><div class="line">WKNavigationDelegate实现：</div><div class="line">首次载入调用顺序：didStartProvisionalNavigation -&gt; didCommitNavigation -&gt; didFinishNavigation</div><div class="line">重定向：didStartProvisionalNavigation -&gt; didReceiveServerRedirectForProvisionalNavigation -&gt; didCommitNavigation -&gt; didFinishNavigation</div><div class="line">*/</div><div class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面开始加载时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didCommitNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //当内容开始返回时调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面加载完成之后调用</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //服务器重定向页面时调用,并且在 didStartProvisionalNavigation 之后，didCommitNavigation之前调用。</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error &#123;</div><div class="line">    NSLog(@&quot;--%s&quot;,__func__);</div><div class="line">    //页面加载失败时调用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-1"><a href="#Swift版本-1" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line"><span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">webView.uiDelegate = <span class="keyword">self</span></div><div class="line">view.addSubview(webView)</div><div class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.baidu.com"</span>)!</div><div class="line">webView.load(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要遵守协议 WKNavigationDelegate, WKUIDelegate</span></div><div class="line"><span class="comment">/*</span></div><div class="line">顺序：didStartProvisionalNavigation -&gt; didCommit -&gt; didFinish</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面开始加载时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didCommit navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//当内容开始返回时调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面加载完成之后调用</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//服务器重定向页面时调用.</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        <span class="comment">//页面加载失败时调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中执行一段JavaScript代码"><a href="#iOS中执行一段JavaScript代码" class="headerlink" title="iOS中执行一段JavaScript代码"></a>iOS中执行一段JavaScript代码</h1><p>在<code>iOS</code>中使用原生语言去执行<code>JavaScript</code>脚本，是为了对已经加载好的<code>HTML</code>的<code>DOM</code>元素的增、删、改、查。同时，还可以通过执行<code>JavaScript</code>脚本获取<code>DOM</code>对象，进而获取一些<code>HTML</code>的页面信息，比如，通过脚本<code>document.title</code>可以获取当前页面的<code>title</code>,通过脚本<code>document.location.href</code>可以获取当前加载的<code>HTML</code>页面的<code>url</code>。<br>通常这些操作的方法是：使用<code>UIWebView</code>或<code>WKWebView</code>的对象方法执行<code>JavaScript</code>脚本。通常这些操作的时机是：在<code>HTML</code>页面加载完成的原生回调中进行的。</p>
<h2 id="使用UIWebView执行JS代码"><a href="#使用UIWebView执行JS代码" class="headerlink" title="使用UIWebView执行JS代码"></a>使用UIWebView执行JS代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--要加载的HTML文件 index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-2"><a href="#OC版本-2" class="headerlink" title="OC版本"></a>OC版本</h3><p>使用<code>UIWebView</code>的对象方法<code>- (nullable NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script;</code>来执行一段<code>JavaScript</code>代码。一般是在<code>UIWebView</code>的代理方法：<code>- (void)webViewDidFinishLoad:(UIWebView *)webView;</code>中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">webView.delegate = self;</div><div class="line">webView.scrollView.hidden = YES;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">webView.scalesPageToFit = YES;</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line">[webView loadRequest:request];</div><div class="line"></div><div class="line">//添加网络加载指示器</div><div class="line">UIActivityIndicatorView *indicatorView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];</div><div class="line">indicatorView.center = CGPointMake(200, 200);</div><div class="line">[self.view addSubview:indicatorView];</div><div class="line">self.indicatorView = indicatorView;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 代理</div><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView</div><div class="line">&#123;//网页开始加载时调用</div><div class="line">    //指示器开始显示动画</div><div class="line">    [self.indicatorView startAnimating];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;//网页加载完成时调用</div><div class="line">    </div><div class="line">    //指示器结束显示动画</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.25 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        webView.scrollView.hidden = NO;</div><div class="line">        [self.indicatorView stopAnimating];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    //注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</div><div class="line">    NSString *jsStr_1 = @&quot;alert(&apos;JS弹框&apos;)&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_1];</div><div class="line">    </div><div class="line">    NSString *jsStr_2 = @&quot;var p = document.getElementsByTagName(&apos;p&apos;)[0];&quot;;</div><div class="line">    NSString *jsStr_3 = @&quot;p.innerHTML = &apos;使用JavaScript很🐂&apos;;&quot;;</div><div class="line">    NSString *jsStr_4 = @&quot;p.style.background = &apos;red&apos;;document.body.appendChild(p);&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_2];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_3];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_4];</div><div class="line">    </div><div class="line">    NSString *jsStr_5 = @&quot;var li = document.createElement(&apos;li&apos;);li.innerHTML=&apos;执行js代码，dom操作元素&apos;;li.style.background = &apos;gray&apos;;document.body.appendChild(li);&quot;;</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsStr_5];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-2"><a href="#Swift版本-2" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//网络加载指示器</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> indicatorView: <span class="type">UIActivityIndicatorView</span> = &#123;</div><div class="line">        <span class="keyword">var</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle: .whiteLarge)</div><div class="line">        indicator.center = <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">200</span>)</div><div class="line">        <span class="keyword">return</span> indicator</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">        webView.delegate = <span class="keyword">self</span></div><div class="line">        webView.scrollView.isHidden = <span class="literal">true</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.scalesPageToFit = <span class="literal">true</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">        </div><div class="line">        <span class="comment">//添加网络加载指示器</span></div><div class="line">        view.addSubview(indicatorView)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidStartLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;<span class="comment">//网页开始加载时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器开始显示动画</span></div><div class="line">        indicatorView.startAnimating()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;<span class="comment">//网页加载完成时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器结束显示动画</span></div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.25</span>) &#123; </div><div class="line">            webView.scrollView.isHidden = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.indicatorView.stopAnimating()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</span></div><div class="line">        <span class="keyword">let</span> jsStr_1 = <span class="string">"alert('JS弹框')"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_1)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_2 = <span class="string">"var p = document.getElementsByTagName('p')[0];"</span></div><div class="line">        <span class="keyword">let</span> jsStr_3 = <span class="string">"p.innerHTML = '使用JavaScript很🐂';"</span></div><div class="line">        <span class="keyword">let</span> jsStr_4 = <span class="string">"p.style.background = 'red';document.body.appendChild(p);"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_2)</div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_3)</div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_4)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_5 = <span class="string">"var li = document.createElement('li');li.innerHTML='执行js代码，dom操作元素';li.style.background = 'gray';document.body.appendChild(li);"</span></div><div class="line">        webView.stringByEvaluatingJavaScript(from: jsStr_5)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用WKWebView执行JS代码"><a href="#使用WKWebView执行JS代码" class="headerlink" title="使用WKWebView执行JS代码"></a>使用WKWebView执行JS代码</h2><h3 id="OC版本-3"><a href="#OC版本-3" class="headerlink" title="OC版本"></a>OC版本</h3><p>使用<code>WKWebView</code>的对象方法<code>- (void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^ _Nullable)(_Nullable id, NSError * _Nullable error))completionHandler;</code>来执行一段<code>JavaScript</code>代码。一般是在<code>WKWebView</code>的代理方法：<code>- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation;</code>中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">webView.scrollView.hidden = YES;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line"></div><div class="line">//添加网络加载指示器</div><div class="line">UIActivityIndicatorView *indicatorView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];</div><div class="line">indicatorView.center = CGPointMake(200, 200);</div><div class="line">[self.view addSubview:indicatorView];</div><div class="line">self.indicatorView = indicatorView;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 代理 WKNavigationDelegate</div><div class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123;//页面开始加载时调用</div><div class="line">    //指示器开始显示动画</div><div class="line">    [self.indicatorView startAnimating];</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123; //页面加载完成之后调用</div><div class="line">    </div><div class="line">    //指示器结束显示动画</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.25 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        webView.scrollView.hidden = NO;</div><div class="line">        [self.indicatorView stopAnimating];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    //注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</div><div class="line">    NSString *jsStr_1 = @&quot;var p = document.getElementsByTagName(&apos;p&apos;)[0];&quot;;</div><div class="line">    NSString *jsStr_2 = @&quot;p.innerHTML = &apos;使用JavaScript很🐂&apos;;&quot;;</div><div class="line">    NSString *jsStr_3 = @&quot;p.style.background = &apos;red&apos;;document.body.appendChild(p);&quot;;</div><div class="line">    [webView evaluateJavaScript:jsStr_1 completionHandler:nil];</div><div class="line">    [webView evaluateJavaScript:jsStr_2 completionHandler:^(id _Nullable value, NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;value: %@&quot;,value); //打印出插入的内容：使用JavaScript很🐂</div><div class="line">    &#125;];</div><div class="line">    [webView evaluateJavaScript:jsStr_3 completionHandler:nil];</div><div class="line">    </div><div class="line">    NSString *jsStr_4 = @&quot;var li = document.createElement(&apos;li&apos;);li.innerHTML=&apos;执行js代码，dom操作元素&apos;;li.style.background = &apos;gray&apos;;document.body.appendChild(li);&quot;;</div><div class="line">    [webView evaluateJavaScript:jsStr_4 completionHandler:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-3"><a href="#Swift版本-3" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="comment">//网络加载指示器</span></div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> indicatorView: <span class="type">UIActivityIndicatorView</span> = &#123;</div><div class="line">        <span class="keyword">var</span> indicator = <span class="type">UIActivityIndicatorView</span>(activityIndicatorStyle: .whiteLarge)</div><div class="line">        indicator.center = <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">200</span>)</div><div class="line">        <span class="keyword">return</span> indicator</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">        <span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">        webView.scrollView.isHidden = <span class="literal">true</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        webView.uiDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.load(<span class="type">URLRequest</span>(url: url))</div><div class="line">        </div><div class="line">        <span class="comment">//添加网络加载指示器</span></div><div class="line">        view.addSubview(indicatorView)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代理 WKNavigationDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面开始加载时调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器开始显示动画</span></div><div class="line">        indicatorView.startAnimating()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面加载完成之后调用</span></div><div class="line">        </div><div class="line">        <span class="comment">//指示器结束显示动画</span></div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">0.25</span>) &#123;</div><div class="line">            webView.scrollView.isHidden = <span class="literal">false</span></div><div class="line">            <span class="keyword">self</span>.indicatorView.stopAnimating()</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//注意：JavaScript脚本字符串中不需要添加&lt;script&gt;&lt;/script&gt;标签</span></div><div class="line">        <span class="keyword">let</span> jsStr_1 = <span class="string">"var p = document.getElementsByTagName('p')[0];"</span></div><div class="line">        <span class="keyword">let</span> jsStr_2 = <span class="string">"p.innerHTML = '使用JavaScript很🐂';"</span></div><div class="line">        <span class="keyword">let</span> jsStr_3 = <span class="string">"p.style.background = 'red';document.body.appendChild(p);"</span></div><div class="line">        webView.evaluateJavaScript(jsStr_1, completionHandler: <span class="literal">nil</span>)</div><div class="line">        webView.evaluateJavaScript(jsStr_2) &#123; (value, error) <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value ?? <span class="string">""</span>) <span class="comment">//打印出插入的内容：使用JavaScript很🐂</span></div><div class="line">        &#125;</div><div class="line">        webView.evaluateJavaScript(jsStr_3, completionHandler: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> jsStr_4 = <span class="string">"var li = document.createElement('li');li.innerHTML='执行js代码，dom操作元素';li.style.background = 'gray';document.body.appendChild(li);"</span></div><div class="line">        webView.evaluateJavaScript(jsStr_4, completionHandler: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中监听JavaScript函数调用"><a href="#iOS中监听JavaScript函数调用" class="headerlink" title="iOS中监听JavaScript函数调用"></a>iOS中监听JavaScript函数调用</h1><p>在<code>iOS</code>混合<code>HTML</code>开发中，如何去监听<code>HTML</code>页面中一个<code>JavaScript</code>函数的调用，这是在需求中经常遇到的。比如，在一个混合页面中，需要点击<code>HTML</code>中的某个按钮标签，调用iPhone系统相机，而相机的触发必须调用<code>iOS</code>原生方法。再比如，在一个混合页面中，需要点击<code>HTML</code>中的某个支付按钮标签，调用iPhone系统已经安装的支付宝应用进行支付操作，来实现应用间的传参跳转，就需要调用<code>支付宝SDK</code>的<code>iOS</code>原生方法。又比如，在混合开发中，需要从一个<code>HTML</code>页面跳转到我的原生页面，并且传送相应的参数，就需要监听<code>JavaScript</code>事件，调用原生控制器跳转方法。这又被很多人称为用<code>JavaScript</code>调用<code>iOS</code>原生代码，个人认为这种说法是不准确的。确切的说，<code>iOS</code>中监听<code>JavaScript</code>函数调用，并作出相应的行为，比较准确。</p>
<h2 id="使用UIWebView监听JS函数调用"><a href="#使用UIWebView监听JS函数调用" class="headerlink" title="使用UIWebView监听JS函数调用"></a>使用UIWebView监听JS函数调用</h2><p>在<code>HTML</code>页面中，对要触发的<code>JavaScript</code>方法中，使用<code>window.location.href =</code>实现一个页面重定向。当触发页面中<code>JavaScript</code>方法，即会调用<code>window.location.href =</code>进行页面重定向时，此时<code>UIWebView</code>代理方法<code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType;</code>会监听到页面的重定向，并且可以获取请求对象，<code>NSURLRequest</code>对象<code>request</code>，从<code>request</code>中可以获得重定向的地址。可以对要重定向的地址进行重新定义协议，例如，<code>&#39;mengyueping.com://&#39;</code>，后面可以拼接上要触发的<code>OC/Swift</code>方法名，<code>&#39;mengyueping.com://openCamera&#39;</code>，在代理中拦截到完整协议地址，可以通过截取获得<code>OC/Swift</code>方法名，然后根据方法名给方法发送消息，触发方法，从而达到监听<code>JavaScript</code>函数调用的目的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加载的本地HTML--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"openCamera()"</span>&gt;</span>访问相册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"field"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">            function openCamera() &#123;</div><div class="line">                document.getElementById('field').value = "赋值一下";</div><div class="line">                window.location.href = 'mengyueping.com://openCamera'; //自定义协议</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-4"><a href="#OC版本-4" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:self.view.bounds];</div><div class="line">webView.delegate = self;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">webView.scalesPageToFit = YES;</div><div class="line">[self.view addSubview:webView];</div><div class="line"></div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:htmlUrl]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//代理 UIWebViewDelegate</div><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</div><div class="line">&#123;</div><div class="line">    NSString *url = request.URL.absoluteString;</div><div class="line">    NSRange range = [url rangeOfString:@&quot;mengyueping.com://&quot;]; //自定义协议</div><div class="line">    NSUInteger location = range.location;</div><div class="line">    </div><div class="line">    if (location != NSNotFound) &#123;</div><div class="line">        NSString *str = [url substringFromIndex:(location + range.length)];</div><div class="line">        SEL selector = NSSelectorFromString(str);</div><div class="line">        //警告：PerformSelector may cause a leak because its selector is unknown</div><div class="line">        //[self performSelector:selector];</div><div class="line">        [self performSelector:selector withObject:nil afterDelay:0.0];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-4"><a href="#Swift版本-4" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> webView = <span class="type">UIWebView</span>(frame: view.bounds)</div><div class="line">        webView.delegate = <span class="keyword">self</span></div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.scalesPageToFit = <span class="literal">true</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// iOS原生方法访问相册</span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">openCamera</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> pickerVC = <span class="type">UIImagePickerController</span>()</div><div class="line">        pickerVC.sourceType = .photoLibrary</div><div class="line">        <span class="keyword">self</span>.present(pickerVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = request.url?.absoluteString</div><div class="line">        <span class="keyword">let</span> range = url?.range(of: <span class="string">"mengyueping.com://"</span>) <span class="comment">//自定义协议</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = range <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> str = url?.substring(from: <span class="string">"mengyueping.com://"</span>.endIndex)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> selStr = str <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> selector = <span class="type">Selector</span>(selStr)</div><div class="line">        perform(selector)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用WKWebView监听JS函数调用"><a href="#使用WKWebView监听JS函数调用" class="headerlink" title="使用WKWebView监听JS函数调用"></a>使用WKWebView监听JS函数调用</h2><h3 id="OC版本-5"><a href="#OC版本-5" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// app注册方法，供JS调用</div><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;</div><div class="line">webView.navigationDelegate = self;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// 代理 WKNavigationDelegate</div><div class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation</div><div class="line">&#123; //页面重定向时调用，不是每次都调用，不准确</div><div class="line">    NSLog(@&quot;navigation: %@&quot;,navigation);</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</div><div class="line">&#123;//在发送请求之前，决定是否跳转，可以截获发送的请求</div><div class="line">    </div><div class="line">    NSString *url = navigationAction.request.URL.absoluteString;</div><div class="line">    NSRange range = [url rangeOfString:@&quot;mengyueping.com://&quot;]; //自定义协议</div><div class="line">    NSUInteger location = range.location;</div><div class="line">    </div><div class="line">    if (location != NSNotFound) &#123;</div><div class="line">        NSString *str = [url substringFromIndex:(location + range.length)];</div><div class="line">        SEL selector = NSSelectorFromString(str);</div><div class="line">        //警告：PerformSelector may cause a leak because its selector is unknown</div><div class="line">        //[self performSelector:selector];</div><div class="line">        [self performSelector:selector withObject:nil afterDelay:0.0];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    decisionHandler(WKNavigationActionPolicyAllow);</div><div class="line">&#125;</div><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler</div><div class="line">&#123;// 在收到响应后，决定是否跳转，可以截获服务器的响应数据</div><div class="line">    decisionHandler(WKNavigationResponsePolicyAllow);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-5"><a href="#Swift版本-5" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">        <span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">        webView.backgroundColor = .gray</div><div class="line">        webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">        webView.uiDelegate = <span class="keyword">self</span></div><div class="line">        view.addSubview(webView)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.load(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// iOS原生方法访问相册</span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">openCamera</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> pickerVC = <span class="type">UIImagePickerController</span>()</div><div class="line">        pickerVC.sourceType = .photoLibrary</div><div class="line">        <span class="keyword">self</span>.present(pickerVC, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代理 WKNavigationDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKNavigationDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didReceiveServerRedirectForProvisionalNavigation navigation: WKNavigation!)</span></span> &#123; </div><div class="line">        <span class="comment">//页面重定向时调用，不是每次都调用，不准确</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123; </div><div class="line">        <span class="comment">// 在发送请求之前，决定是否跳转，可以截获发送的请求</span></div><div class="line">        decisionHandler(.allow)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> url = navigationAction.request.url?.absoluteString</div><div class="line">        <span class="keyword">let</span> range = url?.range(of: <span class="string">"mengyueping.com://"</span>) <span class="comment">//自定义协议</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = range <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> str = url?.substring(from: <span class="string">"mengyueping.com://"</span>.endIndex)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> selStr = str <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> selector = <span class="type">Selector</span>(selStr)</div><div class="line">        perform(selector)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping <span class="params">(WKNavigationResponsePolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123; </div><div class="line">        <span class="comment">// 在收到响应后，决定是否跳转，可以截获服务器的响应数据</span></div><div class="line">        decisionHandler(.allow)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function) <span class="comment">//页面开始加载时调用</span></div><div class="line">        <span class="comment">// 不是每次都调用，只有decisionHandler(.allow)时才能调用此方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="WKWebView与JS之间的通信"><a href="#WKWebView与JS之间的通信" class="headerlink" title="WKWebView与JS之间的通信"></a>WKWebView与JS之间的通信</h2><p><code>iOS</code>的<code>WebKit</code>中，为<code>JavaScript</code>提供了一个发消息的通道，是通过<code>WKUserContentController</code>类实现的，可以通过配置类<code>WKWebViewConfiguration</code>配置到<code>WKWebView</code>对象上。并且<code>WKUserContentController</code>的对象可以添加一个脚本信息处理器，(<code>addScriptMessageHandler: name:</code> 或 <code>add(_ scriptMessageHandler: WKScriptMessageHandler, name: String)</code>)，通过实现协议<code>WKScriptMessageHandler</code>来接收处理<code>JS</code>脚本发送过来信息。</p>
<blockquote>
<p><code>WKWebViewConfiguration</code>：是<code>WKWebView</code>初始化时的配置类，里面存储着初始化<code>WKWebView</code>的一系列属性。<br><code>WKUserContentController</code>：为<code>JavaScript</code>提供了一个发送消息的通道，并且可以向页面注入<code>JavaScript</code>的类。可以在配置类&gt; <code>WKWebViewConfiguration</code>属性中，配置此类。<br><code>WKScriptMessageHandler</code>：一个协议，协议只有一个方法，页面执行特定<code>JavaScript</code>的一个回调，这个特定<code>JavaScript</code>格式为<code>window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;);</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html 要加载的HTML，及通信脚本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sendMsgToiOS()"</span>&gt;</span>点击给iOS原生发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    function sendMsgToiOS() &#123;</div><div class="line"></div><div class="line">        var ua = navigator.userAgent.toLowerCase();</div><div class="line">        if (!!ua.match(/\(i[^;]+;( u;)? cpu.+mac os x/)) &#123; // iOS   Mac OS</div><div class="line"></div><div class="line">            var JSCallIOS = function () &#123;</div><div class="line">                //发送给 iOS 原生的 json 数据</div><div class="line">                var message = &#123;</div><div class="line">                    'method': 'push', </div><div class="line">                    'name' : '王小锌',</div><div class="line">                    'title' : '朋友圈',  </div><div class="line">                    'url': 'http://www.baidu.com'</div><div class="line">                &#125;;</div><div class="line">                //JS 脚本向 iOS原生传递消息</div><div class="line">                window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</div><div class="line">            &#125;</div><div class="line">            JSCallIOS();</div><div class="line"></div><div class="line">        &#125; else if (/android/.test(ua)) &#123; // 安卓</div><div class="line">            window.android.finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-6"><a href="#OC版本-6" class="headerlink" title="OC版本"></a>OC版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 为JS提供了一个发送消息的通道，且可以向页面注入JS的类。</div><div class="line">WKUserContentController *userContentController = [[WKUserContentController alloc] init];</div><div class="line">[userContentController addScriptMessageHandler:self name:@&quot;JSMessageToIOS&quot;]; // &lt;WKScriptMessageHandler&gt;</div><div class="line"></div><div class="line">// 添加一个脚本信息处理器。self遵守协议WKScriptMessageHandler</div><div class="line">// 脚本信息处理器，可以接收JS脚本发送过来的消息。JS脚本通过`window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)`发送消息。</div><div class="line">// 脚本处理器中监听的名字是js脚本里面消息发送的名字。                 window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</div><div class="line"></div><div class="line">// 配置</div><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line">configuration.userContentController = userContentController; //配置消息通道</div><div class="line"></div><div class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:configuration];</div><div class="line">webView.UIDelegate = self;  //&lt;WKUIDelegate&gt;</div><div class="line">webView.navigationDelegate = self; //&lt;WKNavigationDelegate&gt;</div><div class="line">webView.backgroundColor = [UIColor grayColor];</div><div class="line">[self.view addSubview:webView];</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;index&quot; withExtension:@&quot;html&quot;];</div><div class="line">[webView loadRequest:[NSURLRequest requestWithURL:url]];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 协议 WKScriptMessageHandler</div><div class="line">// 当JS给OC发送消息时，此回调中执行消息处理</div><div class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;JS传递过来的消息-message.body: %@&quot;,message.body);</div><div class="line">    </div><div class="line">    //收到JS传递过来的消息回调，可以做一些原生想要做的事情。--&gt; JS向原生OC传递消息。</div><div class="line">    //发送网络请求，页面跳转，打开相机等</div><div class="line"></div><div class="line">    [self openCamera];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// iOS原生方法访问相册</div><div class="line">- (void)openCamera</div><div class="line">&#123;</div><div class="line">    UIImagePickerController *picker = [[UIImagePickerController alloc] init];</div><div class="line">    picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</div><div class="line">    [self presentViewController:picker animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-6"><a href="#Swift版本-6" class="headerlink" title="Swift版本"></a>Swift版本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 为JS提供了一个发送消息的通道，且可以向页面注入JS的类。</span></div><div class="line"><span class="keyword">let</span> userContentController = <span class="type">WKUserContentController</span>()</div><div class="line">userContentController.add(<span class="keyword">self</span>, name: <span class="string">"JSMessageToIOS"</span>)</div><div class="line"><span class="comment">// 添加一个脚本信息处理器。self遵守协议WKScriptMessageHandler</span></div><div class="line"><span class="comment">// 脚本信息处理器，可以接收JS脚本发送过来的消息。JS脚本通过`window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)`发送消息。</span></div><div class="line"><span class="comment">// 脚本处理器中监听的名字是js脚本里面消息发送的名字。          window.webkit.messageHandlers.JSMessageToIOS.postMessage(message);</span></div><div class="line"></div><div class="line"><span class="comment">// 配置</span></div><div class="line"><span class="keyword">let</span> configuration = <span class="type">WKWebViewConfiguration</span>()</div><div class="line">configuration.userContentController = userContentController</div><div class="line"></div><div class="line"><span class="keyword">let</span> webView = <span class="type">WKWebView</span>(frame: view.bounds, configuration: configuration)</div><div class="line">webView.backgroundColor = .gray</div><div class="line">webView.navigationDelegate = <span class="keyword">self</span></div><div class="line">webView.uiDelegate = <span class="keyword">self</span></div><div class="line">view.addSubview(webView)</div><div class="line"></div><div class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">webView.load(<span class="type">URLRequest</span>(url: url))</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">WKScriptMessageHandler</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userContentController</span><span class="params">(<span class="number">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage)</span></span> &#123;</div><div class="line">        <span class="comment">// 当JS给OC发送消息时，此回调中执行消息处理</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"JS传递过来的消息-message.body:<span class="subst">\(message.body)</span>, name：<span class="subst">\(message.name)</span>"</span>);</div><div class="line">        <span class="comment">//iOS和js统一好的名字：message.name</span></div><div class="line">        </div><div class="line">        <span class="comment">//收到JS传递过来的消息回调，可以做一些原生想要做的事情。--&gt; JS向原生OC传递消息。</span></div><div class="line">        <span class="comment">//发送网络请求，页面跳转，打开相机等</span></div><div class="line"></div><div class="line">        <span class="keyword">let</span> vc = <span class="type">UIViewController</span>()</div><div class="line">        vc.title = <span class="string">"name：<span class="subst">\(message.name)</span>"</span></div><div class="line">        vc.view = &#123;</div><div class="line">            <span class="keyword">let</span> v = <span class="type">UITextView</span>(frame: <span class="keyword">self</span>.view.bounds)</div><div class="line">            v.text = <span class="string">"body: <span class="subst">\(message.body)</span>"</span></div><div class="line">            <span class="keyword">return</span> v</div><div class="line">        &#125;()</div><div class="line">        <span class="keyword">let</span> nav = <span class="type">UINavigationController</span>(rootViewController: vc)</div><div class="line">        <span class="keyword">self</span>.present(nav, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="iOS中利用JavaScriptCore交互JS"><a href="#iOS中利用JavaScriptCore交互JS" class="headerlink" title="iOS中利用JavaScriptCore交互JS"></a>iOS中利用JavaScriptCore交互JS</h1><p><code>JavaScriptCore.framework</code>是<code>iOS7</code>以后推出的一个<code>JS</code>与<code>OC</code>交互的框架，是使用<code>OC</code>语言对<code>WebKit</code>的<code>JS</code>引擎进行的封装。之后引入<code>Swift</code>。<br>使用时导入头文件<code>#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</code>或<code>import JavaScriptCore</code>。相关类：<code>JSContext</code>、<code>JSValue</code>、<code>JSManagedValue</code>、<code>JSVirtualMachine</code>、<code>JSExport</code>。</p>
<h2 id="使用JSContext运行JS代码"><a href="#使用JSContext运行JS代码" class="headerlink" title="使用JSContext运行JS代码"></a>使用JSContext运行JS代码</h2><p><code>JSContext</code>是运行<code>JS</code>代码的环境，一个<code>JSContext</code>是一个全局环境的实例。<code>JSContext</code>类似<code>window</code>对象。通过对象方法<code>- (JSValue *)evaluateScript:(NSString *)script;</code>来运行<code>JS</code>代码。</p>
<p><code>JSValue</code>包含了每一个<code>JS</code>类型的值。通过<code>JSValue</code>可以将<code>OC</code>中的类型转换为<code>JS</code>中的类型，也可将<code>JS</code>中的类型转为<code>OC</code>中的类型。类型对照如下：</p>
<p><pre><br>    OC Swift type         |   JavaScript type<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>         nil              |     undefined<br>        NSNull            |        null<br>  NSString String         |       string<br>       NSNumber           |   number, boolean<br>NSDictionary Dictionary   |   Object object<br>  NSArray  Array          |    Array object<br>        NSDate            |     Date object<br>       NSBlock (1)        |   Function object (1)<br>          id (2)          |   Wrapper object (2)<br>        Class (3)         | Constructor object (3)<br></pre><br><code>JSValue</code>都是通过<code>JSContext</code>返回或者创建的，并没有构造方法。每一个<code>JSValue</code>对象都要强引用关联一个<code>JSContext</code>。当与<code>JSContext</code>对象关联的所有<code>JSValue</code>释放后，<code>JSContext</code>也会释放。我们对<code>JS</code>的数值、对象、函数等进行操作，都是通过<code>JSValue</code>对象来实现的。<code>JSValue</code>是 <code>JS</code> 和 <code>OC/Swift</code>数据和方法的桥梁,封装了<code>JS</code>与<code>OC/Swift</code>中的对应的类型，以及如何通过<code>OC/Swift</code>方法调用<code>JS</code>函数的<code>API</code>等</p>
<h3 id="初始化JSContext对象及异常处理"><a href="#初始化JSContext对象及异常处理" class="headerlink" title="初始化JSContext对象及异常处理"></a>初始化JSContext对象及异常处理</h3><p><code>OC/Swift</code>异常会在运行时被<code>Xcode</code>捕获，<code>JSContext</code>中执行的<code>JS</code>如果出现异常，只会被<code>JSContext</code>捕获并存储在<code>exception</code>属性上，而不会向外抛出。时刻检查<code>JSContext</code>对象的<code>exception</code>是否为<code>nil</code>显然是不合适的，更合理的方法是，给<code>JSContext</code>对象设置<code>exceptionHandler</code>回调属性，它接受的是<code>void(^exceptionHandler)(JSContext *context, JSValue *exceptionValue)</code>形式的<code>block</code>，或<code>((JSContext?, JSValue?) -&gt; Swift.Void)</code>形式的闭包。其默认值就是将传入的<code>exceptionValue</code>赋给传入的<code>context</code>的<code>exception</code>属性。这样<code>JS</code>运行发生异常的时候，在<code>Block/Closure</code>中可以立即知道，通过设置<code>Block/Closure</code>中参数<code>context.exception</code>属性，可以观察和记录语法、类型以及运行时错误。</p>
<h4 id="OC版本-7"><a href="#OC版本-7" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [[JSContext alloc] init];</div><div class="line">// 异常处理回调</div><div class="line">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">    NSLog(@&quot;%@&quot;, exception);</div><div class="line">    context.exception = exception;</div><div class="line">    /*</div><div class="line">        此处打印js异常错误，JSContext不会主动抛出js异常。</div><div class="line">        常见异常：</div><div class="line">            ReferenceError: Can&apos;t find variable:</div><div class="line">            TypeError: undefined is not an object</div><div class="line">    */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Swift版本-7"><a href="#Swift版本-7" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 初始化JSContext对象及异常处理</span></div><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> context = <span class="type">JSContext</span>()!</div><div class="line">context.exceptionHandler = &#123; (context, exception) <span class="keyword">in</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> excep = exception <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(excep)</div><div class="line">    <span class="comment">/*</span></div><div class="line">    此处打印js异常错误，JSContext不会主动抛出js异常。</div><div class="line">    常见异常：</div><div class="line">        ReferenceError: Can't find variable:</div><div class="line">        TypeError: undefined is not an object</div><div class="line">    */</div><div class="line">    context?.exception = excep</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行带返回结果js脚本"><a href="#执行带返回结果js脚本" class="headerlink" title="执行带返回结果js脚本"></a>执行带返回结果js脚本</h3><p>如果执行的<code>js</code>脚本有返回结果，则<code>- (JSValue *)evaluateScript:(NSString *)script;</code>执行后返回的<code>JSValue</code>对象，包含返回的结果。可以解析为<code>JS</code>类型，也可以调用<code>JSValue</code>对象<code>API</code>方法，解析为<code>OC</code>对象。</p>
<h4 id="OC版本-8"><a href="#OC版本-8" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr1 = @&quot;1+2&quot;;</div><div class="line">JSValue *value1 = [context evaluateScript:jsStr1]; // 返回的JSValue对象，存储的是js计算的返回结果。不存储定义的变量。</div><div class="line">NSLog(@&quot;value1 JS: %@  -&gt; OC: %@&quot;,value1, value1.toNumber); // 3  3</div></pre></td></tr></table></figure>
<h4 id="Swift版本-8"><a href="#Swift版本-8" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 执行带返回结果js脚本</span></div><div class="line"><span class="keyword">let</span> jsStr1 = <span class="string">"1+2"</span></div><div class="line"><span class="keyword">let</span> jsvalue1 = context.evaluateScript(jsStr1)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value1 JS: <span class="subst">\(String(describing: jsvalue1)</span>)  -&gt; Swift: <span class="subst">\(String(describing: jsvalue1?.toNumber()</span>))"</span>)</div><div class="line"><span class="comment">// value1 JS: Optional(3)  -&gt; Swift: Optional(3)</span></div></pre></td></tr></table></figure>
<h3 id="执行不带返回结果js脚本"><a href="#执行不带返回结果js脚本" class="headerlink" title="执行不带返回结果js脚本"></a>执行不带返回结果js脚本</h3><p>如果执行的<code>js</code>脚本没有返回结果，则<code>- (JSValue *)evaluateScript:(NSString *)script;</code>执行后返回的<code>JSValue</code>对象，解析为<code>JS</code>是 <code>undefined</code>，对应的<code>OC</code>是<code>(null)</code>。</p>
<h4 id="OC版本-9"><a href="#OC版本-9" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr2 = @&quot;var a = 1; var b = 2;&quot;;</div><div class="line">JSValue *value2 = [context evaluateScript:jsStr2];</div><div class="line">NSLog(@&quot;value2 JS: %@  -&gt; OC: %@&quot;,value2, value2.toObject); // value2 JS: undefined  -&gt; OC: (null)</div></pre></td></tr></table></figure>
<h4 id="Swift版本-9"><a href="#Swift版本-9" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 执行不带返回结果js脚本</span></div><div class="line"><span class="keyword">let</span> jsStr2 = <span class="string">"var a = 1; var b = 2;"</span></div><div class="line"><span class="keyword">let</span> jsvalue2 = context.evaluateScript(jsStr2)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value2 JS: <span class="subst">\(String(describing: jsvalue2)</span>)  -&gt; Swift: <span class="subst">\(String(describing: jsvalue2?.toObject)</span>)"</span>);</div><div class="line"><span class="comment">//value2 JS: Optional(undefined)  -&gt; Swift: Optional((Function))</span></div></pre></td></tr></table></figure>
<h3 id="取出js脚本执行后存储在JSContext对象中的变量"><a href="#取出js脚本执行后存储在JSContext对象中的变量" class="headerlink" title="取出js脚本执行后存储在JSContext对象中的变量"></a>取出js脚本执行后存储在JSContext对象中的变量</h3><p>当<code>JSContext</code>对象调用方法<code>- (JSValue *)evaluateScript:(NSString *)script;</code>来执行<code>js</code>脚本时，会把<code>JS</code>中定义的变量函数等存储到<code>JSContext</code>对象中，并且可以通过<code>key-value</code>方法取出，取出获得的是<code>JSValue</code>对象。这样就可以通过取出的<code>JSValue</code>对象转换<code>js</code>脚本中定义的<code>JS</code>变量为<code>OC</code>对象来使用，或可以通过取出的<code>JSValue</code>对象调用<code>js</code>脚本中定义的<code>JS</code>函数。（调用<code>JSValue</code>的<code>API</code>）</p>
<h4 id="OC版本-10"><a href="#OC版本-10" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr2 = @&quot;var a = 1; var b = 2;&quot;;</div><div class="line">JSValue *value2 = [context evaluateScript:jsStr2];</div><div class="line">JSValue *jsValueA = context[@&quot;a&quot;];  // 运行js，定义的变量，存储在context中。</div><div class="line">JSValue *jsValueB = context[@&quot;b&quot;];</div><div class="line">NSLog(@&quot;JS a: %@;  JS a: %@&quot;, jsValueA, jsValueB); // JS a: 1;  JS a: 2</div></pre></td></tr></table></figure>
<h4 id="Swift版本-10"><a href="#Swift版本-10" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出js脚本执行后存储在JSContext对象中的变量</span></div><div class="line"><span class="keyword">let</span> jsValueA = context.objectForKeyedSubscript(<span class="string">"a"</span>)</div><div class="line"><span class="keyword">let</span> jsValueB = context.objectForKeyedSubscript(<span class="string">"b"</span>)</div><div class="line"><span class="type">NSLog</span>(<span class="string">"JS a: <span class="subst">\(String(describing: jsValueA)</span>);  JS b: <span class="subst">\(String(describing: jsValueB)</span>)"</span>) <span class="comment">//  JS a: Optional(1);  JS b: Optional(2)</span></div></pre></td></tr></table></figure>
<h3 id="取出存储的js变量，并修改"><a href="#取出存储的js变量，并修改" class="headerlink" title="取出存储的js变量，并修改"></a>取出存储的js变量，并修改</h3><p>对于<code>JS</code>的<code>Array</code>、<code>Object</code>类型，<code>JSValue</code>也可以通过下标直接取值和赋值。</p>
<h4 id="OC版本-11"><a href="#OC版本-11" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">NSLog(@&quot;value3 JS: %@  -&gt; OC: %@&quot;,value3, value3.toObject); // value2 JS: undefined  -&gt; OC: (null)</div><div class="line">NSLog(@&quot;JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]); // JS Array: 20,10,www.mengyueping.com;  Length: 3; jsArr[0]：20</div><div class="line">jsArr[0] = @&quot;www.&quot;;</div><div class="line">jsArr[2] = @&quot;.com&quot;;</div><div class="line">NSLog(@&quot;通过下标对js取值赋值：JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]); // JS Array: 20,10,www.mengyueping.com;  Length: 3; jsArr[0]：20</div></pre></td></tr></table></figure>
<h4 id="Swift版本-11"><a href="#Swift版本-11" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js变量，并修改</span></div><div class="line"><span class="keyword">let</span> jsStr3 = <span class="string">"var arr = [88, 'mengyueping', 66];"</span></div><div class="line"><span class="keyword">let</span> value3 = context.evaluateScript(jsStr3)</div><div class="line"><span class="keyword">let</span> jsArr = context.objectForKeyedSubscript(<span class="string">"arr"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"value3 JS: <span class="subst">\(String(describing: value3)</span>)  -&gt; Swift: <span class="subst">\(String(describing: value3?.toObject)</span>)"</span>);</div><div class="line"><span class="comment">// value3 JS: Optional(undefined)  -&gt; Swift: Optional((Function))</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// JS Array: Optional(88,mengyueping,66);  Length: Optional(3); jsArr[0]：Optional(88)</span></div><div class="line">jsArr?.setValue(<span class="string">"www."</span>, at: <span class="number">0</span>)</div><div class="line">jsArr?.setValue(<span class="string">".com"</span>, at: <span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"通过下标对js取值赋值：JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// 通过下标对js取值赋值：JS Array: Optional(www.,mengyueping,.com);  Length: Optional(3); jsArr[0]：Optional(www.)</span></div></pre></td></tr></table></figure>
<h3 id="取出存储的js集合对象，并转为OC数组对象"><a href="#取出存储的js集合对象，并转为OC数组对象" class="headerlink" title="取出存储的js集合对象，并转为OC数组对象"></a>取出存储的js集合对象，并转为OC数组对象</h3><h4 id="OC版本-12"><a href="#OC版本-12" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">NSArray *ocArr = jsArr.toArray;</div><div class="line">NSLog(@&quot;js Arr -&gt; OC Arr: %@&quot;, ocArr);</div><div class="line">/*</div><div class="line">    js Arr -&gt; OC Arr: (</div><div class="line">    &quot;www.&quot;,</div><div class="line">    mengyueping,</div><div class="line">    &quot;.com&quot;</div><div class="line">    )</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-12"><a href="#Swift版本-12" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> swiftArr = jsArr?.toArray()</div><div class="line"><span class="built_in">print</span>(<span class="string">"js Arr -&gt; Swift Arr: <span class="subst">\(String(describing: swiftArr)</span>)"</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">js Arr -&gt; Swift Arr: Optional([www., mengyueping, .com])</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="取出存储的js集合对象，并直接使用OC对象给js对象赋值"><a href="#取出存储的js集合对象，并直接使用OC对象给js对象赋值" class="headerlink" title="取出存储的js集合对象，并直接使用OC对象给js对象赋值"></a>取出存储的js集合对象，并直接使用OC对象给js对象赋值</h3><p><code>JSValue</code>是遵循<code>JS</code>的数组特性：没有下标越位，自动延展数组大小。即：集合中没有的下标，元素会自动补空。并且通过<code>JSValue</code>还可以获取<code>JS</code>对象上的属性，比如：JS数组的长度“length”。</p>
<h4 id="OC版本-13"><a href="#OC版本-13" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">NSString *jsStr3 = @&quot;var arr = [88, &apos;mengyueping&apos;, 66];&quot;;</div><div class="line">JSValue *value3 = [context evaluateScript:jsStr3];</div><div class="line">JSValue *jsArr = context[@&quot;arr&quot;];</div><div class="line">jsArr[8] = @8;</div><div class="line">NSLog(@&quot;通过下标对js取值赋值：JS Array: %@;  Length: %@; jsArr[0]：%@&quot;, jsArr, jsArr[@&quot;length&quot;], jsArr[0]);</div><div class="line">// 通过下标对js取值赋值：JS Array: www.,mengyueping,.com,,,,,,8;  Length: 9; jsArr[0]：www.</div><div class="line">NSLog(@&quot;js Arr -&gt; OC Arr: %@&quot;, jsArr.toArray);</div><div class="line">/*</div><div class="line">    js Arr -&gt; OC Arr: (</div><div class="line">    &quot;www.&quot;,</div><div class="line">    mengyueping,</div><div class="line">    &quot;.com&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    &quot;&lt;null&gt;&quot;,</div><div class="line">    8</div><div class="line">    )</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-13"><a href="#Swift版本-13" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js集合对象，并直接使用Swift对象给js对象赋值</span></div><div class="line">jsArr?.setValue(<span class="number">8</span>, at: <span class="number">8</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"通过下标对js取值赋值：JS Array: <span class="subst">\(String(describing: jsArr)</span>);  Length: <span class="subst">\(String(describing: jsArr?.objectForKeyedSubscript("length")</span>)); jsArr[0]：<span class="subst">\(String(describing: jsArr?.objectAtIndexedSubscript(<span class="number">0</span>)</span>))"</span> )</div><div class="line"><span class="comment">// 通过下标对js取值赋值：JS Array: Optional(www.,mengyueping,.com,,,,,,8);  Length: Optional(9); jsArr[0]：Optional(www.)</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"js Arr -&gt; Swift Arr: <span class="subst">\(String(describing: jsArr?.toArray()</span>))"</span>)</div><div class="line"><span class="comment">/*</span></div><div class="line">js Arr -&gt; Swift Arr: Optional([www., mengyueping, .com, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, &lt;null&gt;, 8])</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="取出存储的js函数，并执行"><a href="#取出存储的js函数，并执行" class="headerlink" title="取出存储的js函数，并执行"></a>取出存储的js函数，并执行</h3><p>使用<code>JSValue</code>的<code>API</code>执行<code>JS</code>函数，且有参数的，可以传参。</p>
<h4 id="OC版本-14"><a href="#OC版本-14" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[context evaluateScript:@&quot;function add(a, b)&#123; return a + b; &#125;&quot;];</div><div class="line">JSValue *addValue = context[@&quot;add&quot;]; // js函数</div><div class="line">NSLog(@&quot;Func: %@&quot;, addValue);  // Func: function add(a, b)&#123; return a + b; &#125;</div><div class="line"></div><div class="line">// 取出js函数，调用函数 - (JSValue *)callWithArguments:(NSArray *)arguments;</div><div class="line">JSValue *sum = [addValue callWithArguments:@[@1,@2]];</div><div class="line">NSLog(@&quot;Sum: %d&quot;, sum.toInt32); // Sum: 3</div></pre></td></tr></table></figure>
<h4 id="Swift版本-14"><a href="#Swift版本-14" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 取出存储的js函数，并执行</span></div><div class="line">context.evaluateScript(<span class="string">"function add(a, b)&#123; return a + b; &#125;"</span>)</div><div class="line"><span class="keyword">let</span> addValue = context.objectForKeyedSubscript(<span class="string">"add"</span>) <span class="comment">// js函数</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"Func: <span class="subst">\(String(describing: addValue)</span>)"</span>)  <span class="comment">// Func: Optional(function add(a, b)&#123; return a + b; &#125;)</span></div><div class="line"><span class="comment">// 取出js函数，调用函数 open func call(withArguments arguments: [Any]!) -&gt; JSValue!</span></div><div class="line"><span class="keyword">let</span> sum = addValue?.call(withArguments:[<span class="number">1</span>,<span class="number">2</span>])</div><div class="line"><span class="built_in">print</span>(<span class="string">"Sum: <span class="subst">\(String(describing: sum?.toInt32()</span>))"</span>) <span class="comment">// Sum: Optional(3)</span></div></pre></td></tr></table></figure>
<h3 id="调用js函数的另一种简单方法"><a href="#调用js函数的另一种简单方法" class="headerlink" title="调用js函数的另一种简单方法"></a>调用js函数的另一种简单方法</h3><p>不必像上面一样先取出存储的<code>JS</code>函数，再执行<code>JS</code>函数。直接使用<code>JSContext</code>对象的<code>JSValue *globalObject;</code>属性，调用<code>JSValue</code>对象的<code>- (JSValue *)invokeMethod:(NSString *)method withArguments:(NSArray *)arguments;</code>方法。如果定义的<code>JS</code>函数是全局函数，应该用<code>JSContext</code>的<code>globalObject</code>对象调用该方法。如果是某<code>JS</code>对象的方法，就应该用相应的<code>JSValue</code>对象调用。</p>
<h4 id="OC版本-15"><a href="#OC版本-15" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSValue *jsValue = [context evaluateScript:@&quot;function multiply(a, b)&#123; return a * b; &#125;&quot;];</div><div class="line">JSValue *multiplyValue = [jsValue.context.globalObject invokeMethod:@&quot;multiply&quot; withArguments:@[@3,@6]]; //第一种形式</div><div class="line">NSLog(@&quot;multiplyValue: %d&quot;,multiplyValue.toInt32); // multiplyValue: 18</div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSValue *jsValue = [context evaluateScript:@&quot;function multiply(a, b)&#123; return a * b; &#125;&quot;];</div><div class="line">JSValue *multiplyValue = [context.globalObject invokeMethod:@&quot;multiply&quot; withArguments:@[@3,@6]]; //第二种形式</div><div class="line">NSLog(@&quot;multiplyValue: %d&quot;,multiplyValue.toInt32); // multiplyValue: 18</div></pre></td></tr></table></figure></p>
<h4 id="Swift版本-15"><a href="#Swift版本-15" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK:  调用js函数的另一种简单方法</span></div><div class="line"><span class="keyword">let</span> jsValue = context.evaluateScript(<span class="string">"function multiply(a, b)&#123; return a * b; &#125;"</span>)</div><div class="line"><span class="keyword">let</span> multiplyValue = jsValue?.context.globalObject.invokeMethod(<span class="string">"multiply"</span>, withArguments: [<span class="number">3</span>,<span class="number">6</span>])</div><div class="line"><span class="built_in">print</span>(<span class="string">"multiplyValue: <span class="subst">\(String(describing: multiplyValue?.toInt32()</span>))"</span>); <span class="comment">// multiplyValue: Optional(18)</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> multiplyValue = context.globalObject.invokeMethod(<span class="string">"multiply"</span>, withArguments: [<span class="number">3</span>,<span class="number">6</span>])</div></pre></td></tr></table></figure>
<h3 id="把OC中Block转换成JS函数，并存储到JSContext对象"><a href="#把OC中Block转换成JS函数，并存储到JSContext对象" class="headerlink" title="把OC中Block转换成JS函数，并存储到JSContext对象"></a>把OC中Block转换成JS函数，并存储到JSContext对象</h3><p>通过<code>Block</code>可以实现在<code>OC/Swift</code>中定义<code>JS</code>函数，并且在<code>JS</code>运行环境中调用该<code>JS</code>函数，函数执行可以成功的回到<code>OC/Swift</code>的<code>Block/Closure</code>代码中，而且遵循<code>JS</code>方法的各种特点（比如：方法参数不固定）。<code>JSContext</code>提供了类方法来获取参数列表 <code>(+(NSArray *)currentArguments)</code>和当前调用该方法的对象<code>(+ (JSValue *)currentThis)</code>。<code>JS</code>函数中<code>this</code>的输出的内容是<code>GlobalObject</code>，也是<code>JSContext</code>对象方法 <code>-(JSValue *)globalObject;</code>所返回的内容。因为在<code>JS</code>里面，所有全局变量和方法其实都是一个全局变量(<code>GlobalObject</code>)的属性，在浏览器中是<code>window</code>对象。如下，使用<code>Block/Closure</code>定义一个<code>JS</code>函数<code>log</code>。并在<code>JS</code>脚本中调用<code>log</code>函数，并使用<code>OC</code>执行此脚本。</p>
<h4 id="OC版本-16"><a href="#OC版本-16" class="headerlink" title="OC版本"></a>OC版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">context[@&quot;log&quot;] = ^()&#123;</div><div class="line">    NSLog(@&quot;++++++Begin Log++++++&quot;);</div><div class="line">    </div><div class="line">    NSArray *args = [JSContext currentArguments];</div><div class="line">    for (JSValue *jsVal in args) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;,jsVal);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    JSValue *this = [JSContext currentThis];</div><div class="line">    NSLog(@&quot;this: %@&quot;, this);</div><div class="line">    </div><div class="line">    NSLog(@&quot;---End Log------&quot;);</div><div class="line">&#125;;</div><div class="line">// 执行js，调用使用Block自定义的js函数</div><div class="line">[context evaluateScript:@&quot;log(&apos;mengyueping&apos;, [10,20], &#123;&apos;hello&apos;: &apos;world&apos;, &apos;number&apos;: &apos;100&apos;&#125;)&quot;];</div><div class="line">/*</div><div class="line">    ++++++Begin Log++++++</div><div class="line">    mengyueping</div><div class="line">    10,20</div><div class="line">    [object Object]</div><div class="line">    this: [object GlobalObject]</div><div class="line">    ---End Log------</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="Swift版本-16"><a href="#Swift版本-16" class="headerlink" title="Swift版本"></a>Swift版本</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 把Swift中Closure转换成JS函数，并存储到JSContext对象</span></div><div class="line"><span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"++++++Begin Log++++++"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> jsVal <span class="keyword">in</span> args! &#123;</div><div class="line">        <span class="built_in">print</span>(jsVal)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> this = <span class="type">JSContext</span>.currentThis()</div><div class="line">    <span class="built_in">print</span>(<span class="string">"this: <span class="subst">\(String(describing: this)</span>)"</span>)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(<span class="string">"---End Log------"</span>)</div><div class="line">&#125;</div><div class="line">context.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"log"</span>))</div><div class="line"><span class="comment">// 执行js，调用使用Block自定义的js函数</span></div><div class="line">context.evaluateScript(<span class="string">"log('mengyueping', [10,20], &#123;'hello': 'world', 'number': '100'&#125;)"</span>)</div><div class="line"><span class="comment">/*</span></div><div class="line">++++++Begin Log++++++</div><div class="line">mengyueping</div><div class="line">10,20</div><div class="line">[object Object]</div><div class="line">this: Optional([object GlobalObject])</div><div class="line">---End Log------</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>对<code>JSContext</code>和<code>JSValue</code>实例使用下标的方式我们可以很容易地访问我们之前创建的<code>context</code>的任何值。<code>JSContext</code>需要一个字符串下标，而<code>JSValue</code>允许使用字符串或整数作为下标来得到里面的<code>JS</code>对象和数组。</p>
<p><code>Block</code>可以传入<code>JSContext</code>作方法，但是<code>JSValue</code>没有<code>toBlock</code>方法来把<code>JS</code>方法变成<code>Block/Closure</code>在<code>OC/Swift</code>中使用。但是，<code>JSValue</code>提供了<code>-(JSValue *)callWithArguments:(NSArray *)arguments;</code>方法，可以反过来将函数参数传进去。</p>
<p><code>Block</code>在<code>JavaScriptCore</code>中起到强大作用，它为<code>JS</code>和<code>OC</code>之间的转换建立起更多的桥梁，让转换更方便。但需要注意：</p>
<ul>
<li>在<code>block</code>内部使用外部定义创建的对象，<code>block</code>会对其做强引用，而<code>JSContext</code>也会对被赋予的<code>block</code>做强引用，这样它们之间就形成了循环引用<code>（Circular Reference）</code>使得内存无法正常释放。</li>
<li>在<code>block</code>内部使用外部定义创建的<code>JSValue</code>对象，也会造成循环引用，因为每个<code>JSValue</code>上都有<code>JSContext</code>的引用<code>（@property (readonly, strong) JSContext *context;）</code>，<code>JSContext</code>再引用<code>Block</code>同样也会形成循环引用。</li>
<li>无论是把<code>Block</code>传给<code>JSContext</code>对象，让其变成<code>JS</code>方法；还是把它赋值给<code>exceptionHandler</code>属性；在<code>Block</code>内都不要直接使用其外部定义的<code>JSContext/JSValue</code>对象，应该将其当做参数传入到<code>Block</code>中，或者通过<code>JSContext</code>的类方法<code>+(JSContext *)currentContext;</code>来获得。否则会造成循环引用使得内存无法被正确释放。</li>
</ul>
<h2 id="JSContext结合UIWebView处理HTML中事件监听"><a href="#JSContext结合UIWebView处理HTML中事件监听" class="headerlink" title="JSContext结合UIWebView处理HTML中事件监听"></a>JSContext结合UIWebView处理HTML中事件监听</h2><p><code>JSContext</code>结合<code>UIWebView</code>，当点击<code>JS</code>函数时，响应<code>OC/Swift</code>操作。通过<code>UIWebView</code>的方法<code>JSContext *context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</code>获取<code>JSContext</code>对象。 <code>Swift</code>中是<code>let context = webView.value(forKeyPath: &quot;documentView.webView.mainFrame.javaScriptContext&quot;)</code>。</p>
<p>而<code>WKWebView</code>不支持通过<code>KVC</code>的方式创建<code>JSContext</code>，所以不能在<code>WKWebView</code>中使用<code>JavaScriptCore</code>。<br><code>WKWebView</code>中<code>OC/Swift</code>与<code>JS</code>交互的方式，更简洁，因此也用不到<code>JavaScriptCore</code>。</p>
<h3 id="加载的HTML"><a href="#加载的HTML" class="headerlink" title="加载的HTML"></a>加载的HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScriptCore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">            function showAlert(content) &#123;</div><div class="line">                asyncAlert(content);</div><div class="line">                document.getElementById("js-iOS-js-argsValue").value = content;</div><div class="line">            &#125;</div><div class="line">            function asyncAlert(content) &#123;</div><div class="line">                setTimeout(function()&#123; alert(content); &#125;, 1);</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是按钮调用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'jsBtn'</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">style</span>=<span class="string">"width:300px;height:50px;"</span> <span class="attr">value</span>=<span class="string">"点击Html按钮，调用OC/Swift要执行的代码，&amp;#13;&amp;#10;接收JS传递给OC/Swift的参数"</span> <span class="attr">onclick</span>=<span class="string">"handleJSToiOS('触发了Html中标签的点击事件，触发JS函数调用，js-&gt;OC/Swift-&gt;JS')"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span> =<span class="string">"js-iOS-js-argsValue"</span> <span class="attr">type</span>=<span class="string">"value"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="OC版本-17"><a href="#OC版本-17" class="headerlink" title="OC版本"></a>OC版本</h3><p>代码<code>context[@&quot;jsMethodName&quot;] = ^(){//执行的OC代码};</code>其中，<code>jsMethodName</code>是<code>JS</code>中触发事件的方法名字；<code>^(){//执行的OC代码}</code> 这个<code>block</code>通过<code>JSContext</code>对象变成名字为<code>jsMethodName</code>的<code>JS</code>方法；所以当触发<code>Html</code>点击事件所监听的<code>jsMethodName</code>方法时，就等于触发了<code>OC</code>的<code>Block</code>中的代码。</p>
<p><code>Block</code>中的执行环境是子线程。可以更新部分<code>UI</code>：<code>view</code>设置背景色、调用<code>webView</code>执行<code>js</code>。弹出原生<code>alertView</code>会<code>Crash</code>子线程操作<code>UI</code>的错误信息。 </p>
<p><code>Block</code>避免循环引用，因为<code>block</code>会持有外部变量，而<code>JSContext</code>也会强引用它所有的变量，<code>self</code>使用<code>weakSelf</code>。<code>block</code>内不要使用外部的<code>JSContext</code>对象、<code>JSValue</code>对象。如果要使用<code>JSContext</code>对象，可以使用<code>[JSContext currentContext]</code>，也可以把<code>JSContext</code>对象、<code>JSValue</code>对象当做<code>block</code>的参数传入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">self.view.backgroundColor = [UIColor whiteColor];</div><div class="line">CGRect webFrame = CGRectMake(30, 80, self.view.bounds.size.width-60, self.view.bounds.size.height-100);</div><div class="line">UIWebView *webView = [[UIWebView alloc] initWithFrame:webFrame];</div><div class="line">NSURL *htmlUrl = [[NSBundle mainBundle] URLForResource:@&quot;index.html&quot; withExtension:nil];</div><div class="line">//    NSURL *htmlUrl = [NSURL URLWithString:@&quot;&quot;];</div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:htmlUrl];</div><div class="line"></div><div class="line">webView.scrollView.bounces = NO; //关闭webView的回弹效果</div><div class="line">webView.scrollView.decelerationRate = UIScrollViewDecelerationRateNormal;//UIWebView滚动的比较慢，这里设置为正常速度</div><div class="line"></div><div class="line">[webView loadRequest:request];</div><div class="line">[self.view addSubview:webView];</div><div class="line">self.webView = webView;</div><div class="line">self.webView.delegate = self;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">#pragma mark - UIWebViewDelegate</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    __weak typeof (self) weakSelf = self;</div><div class="line">    </div><div class="line">    JSContext *context = [self.webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    </div><div class="line">    context[@&quot;handleJSToiOS&quot;] = ^()&#123;</div><div class="line">        NSLog(@&quot;CurrentThread: %@&quot;,[NSThread currentThread]); //此Block是子线程</div><div class="line">        </div><div class="line">        // 获取js函数传入的参数</div><div class="line">        NSArray *args = [JSContext currentArguments];</div><div class="line">        for (int i = 0; i&lt;args.count; i++) &#123;</div><div class="line">            NSLog(@&quot;args[%d]: %@&quot;,i,args[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 使用JSContext执行JS代码，将JS传递给OC/Swift的数据，传递回JS</div><div class="line">        //方法一：</div><div class="line">        NSString *jsStr = [NSString stringWithFormat:@&quot;showAlert(&apos;%@&apos;)&quot;,args[0]];</div><div class="line">        [[JSContext currentContext] evaluateScript:jsStr];</div><div class="line">        </div><div class="line">        //方法二：</div><div class="line">        [[JSContext currentContext][@&quot;showAlert&quot;] callWithArguments:args];</div><div class="line">        </div><div class="line">        // 修改原生UI</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;  //回到主线程</div><div class="line">            </div><div class="line">            weakSelf.view.backgroundColor = [UIColor orangeColor];</div><div class="line">            </div><div class="line">            // BOM操作</div><div class="line">//            [weakSelf.webView goBack];</div><div class="line">//            [weakSelf.webView goForward];</div><div class="line">//            [weakSelf.webView reload];</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        // 播放系统音效</div><div class="line">        AudioServicesPlaySystemSound(1007); // 1007是系统声音的编号</div><div class="line">        </div><div class="line">        /*</div><div class="line">         此处可以执行的任务：</div><div class="line">             获取地理位置信息、调用相机、扫一扫二维码、调用系统分享面板、更改原生控件属性样式（回到主线程）、</div><div class="line">             原生调用支付（JS把支付参数传递给OC/Swfit进行支付、OC/Swfit把支付结果反馈给JS）、</div><div class="line">             摇一摇、播放系统音效、</div><div class="line">         */</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Swift版本-17"><a href="#Swift版本-17" class="headerlink" title="Swift版本"></a>Swift版本</h3><p>代码<code>jscontext.setObject(block, forKeyedSubscript: NSString(string: &quot;handleJSToiOS&quot;))</code>其中，<code>block</code>是自己定义的一个<code>@convention(block)</code>的<code>Closure</code>；<code>handleJSToiOS</code>是<code>JS</code>中触发事件的方法名字；这个自定义的闭包通过<code>JSContext</code>对象，将存储的代码块变成名字为<code>jsMethodName</code>的<code>JS</code>方法；所以当触发<code>Html</code>点击事件所监听的<code>jsMethodName</code>方法时，就等于触发了<code>Swift</code>的<code>Closure</code>中的代码。</p>
<p> <code>Closure</code>中的执行环境是子线程。可以更新部分<code>UI</code>：<code>view</code>设置背景色、调用<code>webView</code>执行<code>js</code>。弹出原生<code>alertView</code>会<code>Crash</code>子线程操作<code>UI</code>的错误信息。</p>
<p><code>Closure</code>避免循环引用，因为<code>Closure</code>会持有外部变量，而<code>JSContext</code>也会强引用它所有的变量，闭包中声明<code>self</code>为弱引用<code>[weak self]</code>。<code>Closure</code>内不要使用外部的<code>JSContext</code>对象、<code>JSValue</code>对象。如果要使用<code>JSContext</code>对象，可以使用<code>JSContext.current()</code>，也可以把<code>JSContext</code>对象、<code>JSValue</code>对象当做<code>Closure</code>的参数传入。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> webView: <span class="type">UIWebView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> web = <span class="type">UIWebView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">30</span>, y: <span class="number">80</span>, width: <span class="type">UIScreen</span>.main.bounds.width-<span class="number">60</span>, height: <span class="type">UIScreen</span>.main.bounds.height-<span class="number">160</span>))</div><div class="line">        web.delegate = <span class="keyword">self</span></div><div class="line">        <span class="keyword">return</span> web</div><div class="line">    &#125;()</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        view.backgroundColor = <span class="type">UIColor</span>.white</div><div class="line">        view.addSubview(webView)</div><div class="line"><span class="comment">//        let url = URL(string: "https://www..com")!</span></div><div class="line">        <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource:<span class="string">"index"</span>, withExtension:<span class="string">"html"</span>)!</div><div class="line">        webView.loadRequest(<span class="type">URLRequest</span>(url: url))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: 代理 UIWebViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIWebViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webViewDidFinishLoad</span><span class="params">(<span class="number">_</span> webView: UIWebView)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(#function)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> context = webView.value(forKeyPath: <span class="string">"documentView.webView.mainFrame.javaScriptContext"</span>)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> jsContext = context <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">let</span> jscontext = jsContext <span class="keyword">as</span>! <span class="type">JSContext</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> block: <span class="meta">@convention</span>(block) () -&gt; () = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"CurrentThread: <span class="subst">\(Thread.current)</span>"</span>) <span class="comment">//此Closure是子线程</span></div><div class="line">            </div><div class="line">            <span class="comment">// 获取js函数传入的参数</span></div><div class="line">            <span class="keyword">let</span> args = <span class="type">JSContext</span>.currentArguments()</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> argments = args <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> argments &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"args[<span class="subst">\(i)</span>]: <span class="subst">\(item)</span>"</span>)</div><div class="line">                i += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 使用JSContext执行JS代码，将JS传递给OC/Swift的数据，传递回JS</span></div><div class="line">            <span class="comment">//方法一：</span></div><div class="line"><span class="comment">//            JSContext.current().evaluateScript("showAlert('\(argments[0])')")</span></div><div class="line">            <span class="comment">//方法二：</span></div><div class="line">            <span class="type">JSContext</span>.current().objectForKeyedSubscript(<span class="string">"showAlert"</span>).call(withArguments: argments)</div><div class="line"><span class="comment">//            JSContext.current().objectForKeyedSubscript("alert").call(withArguments: argments)</span></div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// 修改原生UI</span></div><div class="line">            <span class="type">DispatchQueue</span>.main.async &#123; <span class="comment">//回到主线程</span></div><div class="line">                <span class="keyword">self</span>!.view.backgroundColor = <span class="type">UIColor</span>.orange</div><div class="line">                </div><div class="line">                <span class="comment">// BOM操作</span></div><div class="line"><span class="comment">//                self!.webView.reload()</span></div><div class="line"><span class="comment">//                self!.webView.goForward()</span></div><div class="line"><span class="comment">//                self!.webView.goBack()</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 播放系统音效</span></div><div class="line">            <span class="type">AudioServicesPlaySystemSound</span>(<span class="number">1007</span>)</div><div class="line">            </div><div class="line">            <span class="comment">/*</span></div><div class="line">             此处可以执行的任务：</div><div class="line">                 获取地理位置信息、调用相机、扫一扫二维码、调用系统分享面板、更改原生控件属性样式（回到主线程）、</div><div class="line">                 原生调用支付（JS把支付参数传递给OC/Swfit进行支付、OC/Swfit把支付结果反馈给JS）、</div><div class="line">                 摇一摇、播放系统音效、</div><div class="line">             */</div><div class="line">        &#125;</div><div class="line">        jscontext.setObject(block, forKeyedSubscript: <span class="type">NSString</span>(string: <span class="string">"handleJSToiOS"</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSVirtualMachine"><a href="#JSVirtualMachine" class="headerlink" title="JSVirtualMachine"></a>JSVirtualMachine</h2><blockquote>
<p><code>JSVirtualMachine</code>为<code>JS</code>脚本的执行提供底层资源。一个<code>JSVirtualMachine</code>实例，代表一个独立的<code>JS</code>对象空间，并为其执行提供资源。它通过加锁，保证<code>JSVirtualMachine</code>是线程安全的，如果要并发执行<code>JS</code>，那我们必须创建多个独立的<code>JSVirtualMachine</code>实例，在不同的实例中执行<code>JS</code>（有点像JS引擎，如V8）。有独立的堆空间和垃圾回收机制。处理线程相关，使用较少。</p>
</blockquote>
<p>通过<code>alloc/init</code>就可以创建一个<code>JSVirtualMachine</code>对象，但是我们一般不用新建<code>JSVirtualMachine</code>对象，因为创建<code>JSContext</code>时，如果我们不提供一个自己创建的<code>JSVirtualMachine</code>，内部会自动创建一个<code>JSVirtualMachine</code>对象。<code>JSContext</code>对象管理<code>JSVirtualMachine</code>对象的生命周期。</p>
<p><code>JSVirtualMachine</code>创建方式：<br>方式一，创建<code>JSContext</code>对象时，内部自动创建一个新的<code>JSVirtualMachine</code>对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//OC</div><div class="line">JSContext *context = [[JSContext alloc] init];</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="keyword">let</span> context = <span class="type">JSContext</span>()</div></pre></td></tr></table></figure>
<p>方式二，自己创建一个<code>JSVirtualMachine</code>对象，传入的创建<code>JSContext</code>对象中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//OC</div><div class="line">JSVirtualMachine *jsVM = [[JSVirtualMachine alloc] init];</div><div class="line">JSContext *context = [[JSContext alloc] initWithVirtualMachine:jsVM]; //传入的JSVirtualMachine对象不能为空</div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="keyword">let</span> jsVM = <span class="type">JSVirtualMachine</span>()</div><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">JSContext</span>(virtualMachine: jsVM)</div></pre></td></tr></table></figure>
<p><code>JSVirtualMachine</code>为<code>JavaScript</code>的运行<strong>提供了底层资源</strong>，<code>JSContext</code>为<code>JavaScript</code><strong>提供了运行环境</strong>;<br>而<code>JSContext</code>的创建都是基于<code>JSVirtualMachine</code>。<br><code>JSValue</code>其实就是<code>JS</code>对象在<code>JSVirtualMachine</code>中的一个强引用。</p>
<p>=================<br>本文代码，我的<code>Github</code>仓库获取<a href="https://github.com/MengYP/apple-stack/tree/master/iOS_JavaScript/iOS-callJavaScript" target="_blank" rel="external">apple-stack</a></p>
<p>=================<br>2017.7更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OC-Swift与JavaScript交互&quot;&gt;&lt;a href=&quot;#OC-Swift与JavaScript交互&quot; class=&quot;headerlink&quot; title=&quot;OC/Swift与JavaScript交互&quot;&gt;&lt;/a&gt;OC/Swift与JavaScript交互&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何加载&lt;code&gt;HTML&lt;/code&gt;页面？（包括&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何去执行一段&lt;code&gt;JavaScript&lt;/code&gt;代码？（包括&lt;code&gt;Objective-C&lt;/code&gt;和&lt;code&gt;Swift&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中为什么要使用原生语言去执行一段&lt;code&gt;JavaScript&lt;/code&gt;代码？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;中如何监听到&lt;code&gt;HTML&lt;/code&gt;页面中触发的事件？（&lt;code&gt;JavaScript&lt;/code&gt;函数的触发）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;混合开发中，当&lt;code&gt;JavaScript&lt;/code&gt;函数触发时，能否发送一些数据给&lt;code&gt;iOS&lt;/code&gt;原生，如何发送？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt;混合开发中，当&lt;code&gt;JavaScript&lt;/code&gt;函数触发时，能否让&lt;code&gt;OC/Swift&lt;/code&gt;执行一些操作，比如调用系统相机等？
    
    </summary>
    
      <category term="iOS" scheme="http://mengyueping.com/categories/iOS/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/categories/iOS/JavaScriptCore/"/>
    
    
      <category term="iOS" scheme="http://mengyueping.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://mengyueping.com/tags/Swift/"/>
    
      <category term="JavaScript" scheme="http://mengyueping.com/tags/JavaScript/"/>
    
      <category term="JavaScriptCore" scheme="http://mengyueping.com/tags/JavaScriptCore/"/>
    
      <category term="OC" scheme="http://mengyueping.com/tags/OC/"/>
    
      <category term="UIWebView" scheme="http://mengyueping.com/tags/UIWebView/"/>
    
      <category term="WKWebView" scheme="http://mengyueping.com/tags/WKWebView/"/>
    
      <category term="HTML" scheme="http://mengyueping.com/tags/HTML/"/>
    
      <category term="WebKit" scheme="http://mengyueping.com/tags/WebKit/"/>
    
  </entry>
  
</feed>
